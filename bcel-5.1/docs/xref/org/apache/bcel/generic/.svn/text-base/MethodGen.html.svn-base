<html>
<body bgcolor="white">
<pre>
<table bgcolor="#FFFFCC" cellpadding="0" cellspacing="0" border="0" width="100%"><a href="../../../../../apidocs/org/apache/bcel/generic/MethodGen.html">View Javadoc</a></table>
<a name="1" href="#1">1</a>   <b>package</b> <a href="../../../../org/apache/bcel/<b>generic</b>/package-summary.html">org.apache.bcel.<b>generic</b></a>;
<a name="2" href="#2">2</a>   
<a name="3" href="#3">3</a>   <font color="#329900"><i>/*<font color="#329900"><i> ====================================================================</font></i></font></i>
<a name="4" href="#4">4</a>   <font color="#329900"><i> * The Apache Software License, Version 1.1</font></i>
<a name="5" href="#5">5</a>   <font color="#329900"><i> *</font></i>
<a name="6" href="#6">6</a>   <font color="#329900"><i> * Copyright (c) 2001 The Apache Software Foundation.  All rights</font></i>
<a name="7" href="#7">7</a>   <font color="#329900"><i> * reserved.</font></i>
<a name="8" href="#8">8</a>   <font color="#329900"><i> *</font></i>
<a name="9" href="#9">9</a>   <font color="#329900"><i> * Redistribution and use in source and binary forms, with or without</font></i>
<a name="10" href="#10">10</a>  <font color="#329900"><i> * modification, are permitted provided that the following conditions</font></i>
<a name="11" href="#11">11</a>  <font color="#329900"><i> * are met:</font></i>
<a name="12" href="#12">12</a>  <font color="#329900"><i> *</font></i>
<a name="13" href="#13">13</a>  <font color="#329900"><i> * 1. Redistributions of source code must retain the above copyright</font></i>
<a name="14" href="#14">14</a>  <font color="#329900"><i> *    notice, this list of conditions and the following disclaimer.</font></i>
<a name="15" href="#15">15</a>  <font color="#329900"><i> *</font></i>
<a name="16" href="#16">16</a>  <font color="#329900"><i> * 2. Redistributions in binary form must reproduce the above copyright</font></i>
<a name="17" href="#17">17</a>  <font color="#329900"><i> *    notice, this list of conditions and the following disclaimer in</font></i>
<a name="18" href="#18">18</a>  <font color="#329900"><i> *    the documentation and/or other materials provided with the</font></i>
<a name="19" href="#19">19</a>  <font color="#329900"><i> *    distribution.</font></i>
<a name="20" href="#20">20</a>  <font color="#329900"><i> *</font></i>
<a name="21" href="#21">21</a>  <font color="#329900"><i> * 3. The end-user documentation included with the redistribution,</font></i>
<a name="22" href="#22">22</a>  <font color="#329900"><i> *    if any, must include the following acknowledgment:</font></i>
<a name="23" href="#23">23</a>  <font color="#329900"><i> *       "This product includes software developed by the</font></i>
<a name="24" href="#24">24</a>  <font color="#329900"><i> *        Apache Software Foundation (<a href="http://www.apache.org/" target="alexandria_uri">http://www.apache.org/</a>)."</font></i>
<a name="25" href="#25">25</a>  <font color="#329900"><i> *    Alternately, this acknowledgment may appear in the software itself,</font></i>
<a name="26" href="#26">26</a>  <font color="#329900"><i> *    if and wherever such third-party acknowledgments normally appear.</font></i>
<a name="27" href="#27">27</a>  <font color="#329900"><i> *</font></i>
<a name="28" href="#28">28</a>  <font color="#329900"><i> * 4. The names "Apache" and "Apache Software Foundation" and</font></i>
<a name="29" href="#29">29</a>  <font color="#329900"><i> *    "Apache BCEL" must not be used to endorse or promote products</font></i>
<a name="30" href="#30">30</a>  <font color="#329900"><i> *    derived from this software without prior written permission. For</font></i>
<a name="31" href="#31">31</a>  <font color="#329900"><i> *    written permission, please contact apache@apache.org.</font></i>
<a name="32" href="#32">32</a>  <font color="#329900"><i> *</font></i>
<a name="33" href="#33">33</a>  <font color="#329900"><i> * 5. Products derived from this software may not be called "Apache",</font></i>
<a name="34" href="#34">34</a>  <font color="#329900"><i> *    "Apache BCEL", nor may "Apache" appear in their name, without</font></i>
<a name="35" href="#35">35</a>  <font color="#329900"><i> *    prior written permission of the Apache Software Foundation.</font></i>
<a name="36" href="#36">36</a>  <font color="#329900"><i> *</font></i>
<a name="37" href="#37">37</a>  <font color="#329900"><i> * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED</font></i>
<a name="38" href="#38">38</a>  <font color="#329900"><i> * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES</font></i>
<a name="39" href="#39">39</a>  <font color="#329900"><i> * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</font></i>
<a name="40" href="#40">40</a>  <font color="#329900"><i> * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR</font></i>
<a name="41" href="#41">41</a>  <font color="#329900"><i> * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</font></i>
<a name="42" href="#42">42</a>  <font color="#329900"><i> * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</font></i>
<a name="43" href="#43">43</a>  <font color="#329900"><i> * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF</font></i>
<a name="44" href="#44">44</a>  <font color="#329900"><i> * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND</font></i>
<a name="45" href="#45">45</a>  <font color="#329900"><i> * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</font></i>
<a name="46" href="#46">46</a>  <font color="#329900"><i> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT</font></i>
<a name="47" href="#47">47</a>  <font color="#329900"><i> * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF</font></i>
<a name="48" href="#48">48</a>  <font color="#329900"><i> * SUCH DAMAGE.</font></i>
<a name="49" href="#49">49</a>  <font color="#329900"><i> * ====================================================================</font></i>
<a name="50" href="#50">50</a>  <font color="#329900"><i> *</font></i>
<a name="51" href="#51">51</a>  <font color="#329900"><i> * This software consists of voluntary contributions made by many</font></i>
<a name="52" href="#52">52</a>  <font color="#329900"><i> * individuals on behalf of the Apache Software Foundation.  For more</font></i>
<a name="53" href="#53">53</a>  <font color="#329900"><i> * information on the Apache Software Foundation, please see</font></i>
<a name="54" href="#54">54</a>  <font color="#329900"><i> * &lt;<a href="http://www.apache.org/&gt" target="alexandria_uri">http://www.apache.org/&gt</a>;.</font></i>
<a name="55" href="#55">55</a>  <font color="#329900"><i> */</font></i>
<a name="56" href="#56">56</a>  
<a name="57" href="#57">57</a>  <b>import</b> org.apache.bcel.Constants;
<a name="58" href="#58">58</a>  <b>import</b> <a href="../../../../org/apache/bcel/classfile/package-summary.html">org.apache.bcel.classfile</a>.*;
<a name="59" href="#59">59</a>  <b>import</b> java.util.*;
<a name="60" href="#60">60</a>  
<a name="61" href="#61">61</a>  <font color="#AA0000"><i>/**<font color="#AA0000"><i>* </font></i></font></i>
<a name="62" href="#62">62</a>  <font color="#AA0000"><i> * Template class for building up a method. This is done by defining exception</font></i>
<a name="63" href="#63">63</a>  <font color="#AA0000"><i> * handlers, adding thrown exceptions, local variables and attributes, whereas</font></i>
<a name="64" href="#64">64</a>  <font color="#AA0000"><i> * the `LocalVariableTable' and `LineNumberTable' attributes will be set</font></i>
<a name="65" href="#65">65</a>  <font color="#AA0000"><i> * automatically for the code. Use stripAttributes() if you don't like this.</font></i>
<a name="66" href="#66">66</a>  <font color="#AA0000"><i> *</font></i>
<a name="67" href="#67">67</a>  <font color="#AA0000"><i> * While generating code it may be necessary to insert NOP operations. You can</font></i>
<a name="68" href="#68">68</a>  <font color="#AA0000"><i> * use the `removeNOPs' method to get rid off them.</font></i>
<a name="69" href="#69">69</a>  <font color="#AA0000"><i> * The resulting method object can be obtained via the `getMethod()' method.</font></i>
<a name="70" href="#70">70</a>  <font color="#AA0000"><i> *</font></i>
<a name="71" href="#71">71</a>  <font color="#AA0000"><i> * @version $Id: MethodGen.java,v 1.7 2003/02/13 11:18:23 enver Exp $</font></i>
<a name="72" href="#72">72</a>  <font color="#AA0000"><i> * @author  &lt;A HREF="<a href="mailto:markus.dahm@berlin.de" target="alexandria_uri">mailto:markus.dahm@berlin.de</a>"&gt;M. Dahm&lt;/A&gt;</font></i>
<a name="73" href="#73">73</a>  <font color="#AA0000"><i> * @author  &lt;A HREF="<a href="http://www.vmeng.com/beard" target="alexandria_uri">http://www.vmeng.com/beard</a>"&gt;Patrick C. Beard&lt;/A&gt; [setMaxStack()]</font></i>
<a name="74" href="#74">74</a>  <font color="#AA0000"><i> * @see     InstructionList</font></i>
<a name="75" href="#75">75</a>  <font color="#AA0000"><i> * @see     Method</font></i>
<a name="76" href="#76">76</a>  <font color="#AA0000"><i> */</font></i>
<a name="77" href="#77">77</a>  <b>public</b> <b>class</b> <a href="../../../../org/apache/bcel/generic/MethodGen.html">MethodGen</a> <b>extends</b> <a href="../../../../org/apache/bcel/generic/FieldGenOrMethodGen.html">FieldGenOrMethodGen</a> {
<a name="78" href="#78">78</a>    <b>private</b> String          <b>class</b>_name;
<a name="79" href="#79">79</a>    <b>private</b> <a href="../../../../org/apache/bcel/generic/Type.html">Type</a>[]          arg_types;
<a name="80" href="#80">80</a>    <b>private</b> String[]        arg_names;
<a name="81" href="#81">81</a>    <b>private</b> <b>int</b>             max_locals;
<a name="82" href="#82">82</a>    <b>private</b> <b>int</b>             max_stack;
<a name="83" href="#83">83</a>    <b>private</b> <a href="../../../../org/apache/bcel/generic/InstructionList.html">InstructionList</a> il;
<a name="84" href="#84">84</a>    <b>private</b> <b>boolean</b>         strip_attributes;
<a name="85" href="#85">85</a>  
<a name="86" href="#86">86</a>    <b>private</b> ArrayList       variable_vec    = <b>new</b> ArrayList();
<a name="87" href="#87">87</a>    <b>private</b> ArrayList       line_number_vec = <b>new</b> ArrayList();
<a name="88" href="#88">88</a>    <b>private</b> ArrayList       exception_vec   = <b>new</b> ArrayList();
<a name="89" href="#89">89</a>    <b>private</b> ArrayList       throws_vec      = <b>new</b> ArrayList();
<a name="90" href="#90">90</a>    <b>private</b> ArrayList       code_attrs_vec  = <b>new</b> ArrayList();
<a name="91" href="#91">91</a>  
<a name="92" href="#92">92</a>    <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="93" href="#93">93</a>  <font color="#AA0000"><i>   * Declare method. If the method is non-static the constructor</font></i>
<a name="94" href="#94">94</a>  <font color="#AA0000"><i>   * automatically declares a local variable `$this' in slot 0. The</font></i>
<a name="95" href="#95">95</a>  <font color="#AA0000"><i>   * actual code is contained in the `il' parameter, which may further</font></i>
<a name="96" href="#96">96</a>  <font color="#AA0000"><i>   * manipulated by the user. But he must take care not to remove any</font></i>
<a name="97" href="#97">97</a>  <font color="#AA0000"><i>   * instruction (handles) that are still referenced from this object.</font></i>
<a name="98" href="#98">98</a>  <font color="#AA0000"><i>   *</font></i>
<a name="99" href="#99">99</a>  <font color="#AA0000"><i>   * For example one may not add a local variable and later remove the</font></i>
<a name="100" href="#100">100</a> <font color="#AA0000"><i>   * instructions it refers to without causing havoc. It is safe</font></i>
<a name="101" href="#101">101</a> <font color="#AA0000"><i>   * however if you remove that local variable, too.</font></i>
<a name="102" href="#102">102</a> <font color="#AA0000"><i>   *</font></i>
<a name="103" href="#103">103</a> <font color="#AA0000"><i>   * @param access_flags access qualifiers</font></i>
<a name="104" href="#104">104</a> <font color="#AA0000"><i>   * @param return_type  method type</font></i>
<a name="105" href="#105">105</a> <font color="#AA0000"><i>   * @param arg_types argument types</font></i>
<a name="106" href="#106">106</a> <font color="#AA0000"><i>   * @param arg_names argument names (if this is null, default names will be provided</font></i>
<a name="107" href="#107">107</a> <font color="#AA0000"><i>   * for them)</font></i>
<a name="108" href="#108">108</a> <font color="#AA0000"><i>   * @param method_name name of method</font></i>
<a name="109" href="#109">109</a> <font color="#AA0000"><i>   * @param class_name class name containing this method (may be null, if you don't care)</font></i>
<a name="110" href="#110">110</a> <font color="#AA0000"><i>   * @param il instruction list associated with this method, may be null only for</font></i>
<a name="111" href="#111">111</a> <font color="#AA0000"><i>   * abstract or native methods</font></i>
<a name="112" href="#112">112</a> <font color="#AA0000"><i>   * @param cp constant pool</font></i>
<a name="113" href="#113">113</a> <font color="#AA0000"><i>   */</font></i>
<a name="114" href="#114">114</a>   <b>public</b> <a href="../../../../org/apache/bcel/generic/MethodGen.html">MethodGen</a>(<b>int</b> access_flags, <a href="../../../../org/apache/bcel/generic/Type.html">Type</a> <b>return</b>_type, <a href="../../../../org/apache/bcel/generic/Type.html">Type</a>[] arg_types,
<a name="115" href="#115">115</a> 		   String[] arg_names, String method_name, String <b>class</b>_name,
<a name="116" href="#116">116</a> 		   InstructionList il, ConstantPoolGen cp) {
<a name="117" href="#117">117</a>     setAccessFlags(access_flags);
<a name="118" href="#118">118</a>     setType(<b>return</b>_type);
<a name="119" href="#119">119</a>     setArgumentTypes(arg_types);
<a name="120" href="#120">120</a>     setArgumentNames(arg_names);
<a name="121" href="#121">121</a>     setName(method_name);
<a name="122" href="#122">122</a>     setClassName(<b>class</b>_name);
<a name="123" href="#123">123</a>     setInstructionList(il);
<a name="124" href="#124">124</a>     setConstantPool(cp);
<a name="125" href="#125">125</a> 
<a name="126" href="#126">126</a>     <b>boolean</b> <b>abstract</b>_ = isAbstract() || isNative();
<a name="127" href="#127">127</a>     <a href="../../../../org/apache/bcel/generic/InstructionHandle.html">InstructionHandle</a> start = <b>null</b>;
<a name="128" href="#128">128</a>     <a href="../../../../org/apache/bcel/generic/InstructionHandle.html">InstructionHandle</a> end   = <b>null</b>;
<a name="129" href="#129">129</a> 
<a name="130" href="#130">130</a>     <b>if</b>(!<b>abstract</b>_) {
<a name="131" href="#131">131</a>       start = il.getStart();
<a name="132" href="#132">132</a>       end   = il.getEnd();
<a name="133" href="#133">133</a> 
<a name="134" href="#134">134</a>       <font color="#329900"><i>/*<font color="#329900"><i> Add local variables, namely the implicit `this' and the arguments</font></i></font></i>
<a name="135" href="#135">135</a> <font color="#329900"><i>       */</font></i>
<a name="136" href="#136">136</a>       <b>if</b>(!isStatic() && (<b>class</b>_name != <b>null</b>)) { <font color="#329900"><i>// Instance method -&gt; `this' is local var 0</font></i>
<a name="137" href="#137">137</a> 	addLocalVariable(<font color="#000099">"this"</font>, <b>new</b> <a href="../../../../org/apache/bcel/generic/ObjectType.html">ObjectType</a>(<b>class</b>_name), start, end);
<a name="138" href="#138">138</a>       }
<a name="139" href="#139">139</a>     }
<a name="140" href="#140">140</a> 
<a name="141" href="#141">141</a>     <b>if</b>(arg_types != <b>null</b>) {
<a name="142" href="#142">142</a>       <b>int</b> size = arg_types.length;
<a name="143" href="#143">143</a> 
<a name="144" href="#144">144</a>       <b>for</b>(<b>int</b> i=0; i &lt; size; i++) {
<a name="145" href="#145">145</a> 	<b>if</b>(Type.VOID == arg_types[i]) {
<a name="146" href="#146">146</a> 	  <b>throw</b> <b>new</b> ClassGenException(<font color="#000099">"'void' is an illegal argument type for a method"</font>);
<a name="147" href="#147">147</a> 	}
<a name="148" href="#148">148</a>       }
<a name="149" href="#149">149</a> 	
<a name="150" href="#150">150</a>       <b>if</b>(arg_names != <b>null</b>) { <font color="#329900"><i>// Names for variables provided?</font></i>
<a name="151" href="#151">151</a> 	<b>if</b>(size != arg_names.length)
<a name="152" href="#152">152</a> 	  <b>throw</b> <b>new</b> ClassGenException(<font color="#000099">"Mismatch in argument array lengths: "</font> +
<a name="153" href="#153">153</a> 				      size + <font color="#000099">" vs. "</font> + arg_names.length);
<a name="154" href="#154">154</a>       } <b>else</b> { <font color="#329900"><i>// Give them dummy names</font></i>
<a name="155" href="#155">155</a> 	arg_names = <b>new</b> String[size];
<a name="156" href="#156">156</a> 	
<a name="157" href="#157">157</a> 	<b>for</b>(<b>int</b> i=0; i &lt; size; i++)
<a name="158" href="#158">158</a> 	  arg_names[i] = <font color="#000099">"arg"</font> + i;
<a name="159" href="#159">159</a> 	
<a name="160" href="#160">160</a> 	setArgumentNames(arg_names);
<a name="161" href="#161">161</a>       }
<a name="162" href="#162">162</a>       
<a name="163" href="#163">163</a>       <b>if</b>(!<b>abstract</b>_) {
<a name="164" href="#164">164</a> 	<b>for</b>(<b>int</b> i=0; i &lt; size; i++) {
<a name="165" href="#165">165</a> 	  addLocalVariable(arg_names[i], arg_types[i], start, end);
<a name="166" href="#166">166</a> 	}
<a name="167" href="#167">167</a>       }
<a name="168" href="#168">168</a>     }
<a name="169" href="#169">169</a>   }
<a name="170" href="#170">170</a> 
<a name="171" href="#171">171</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="172" href="#172">172</a> <font color="#AA0000"><i>   * Instantiate from existing method.</font></i>
<a name="173" href="#173">173</a> <font color="#AA0000"><i>   *</font></i>
<a name="174" href="#174">174</a> <font color="#AA0000"><i>   * @param m method</font></i>
<a name="175" href="#175">175</a> <font color="#AA0000"><i>   * @param class_name class name containing this method</font></i>
<a name="176" href="#176">176</a> <font color="#AA0000"><i>   * @param cp constant pool</font></i>
<a name="177" href="#177">177</a> <font color="#AA0000"><i>   */</font></i>
<a name="178" href="#178">178</a>   <b>public</b> <a href="../../../../org/apache/bcel/generic/MethodGen.html">MethodGen</a>(<a href="../../../../org/apache/bcel/classfile/Method.html">Method</a> m, String <b>class</b>_name, <a href="../../../../org/apache/bcel/generic/ConstantPoolGen.html">ConstantPoolGen</a> cp) {
<a name="179" href="#179">179</a>     <b>this</b>(m.getAccessFlags(), Type.getReturnType(m.getSignature()),
<a name="180" href="#180">180</a> 	 Type.getArgumentTypes(m.getSignature()), <b>null</b> <font color="#329900"><i>/*<font color="#329900"><i> may be overridden anyway */</font></i>,</font></i>
<a name="181" href="#181">181</a> 	 m.getName(), <b>class</b>_name,
<a name="182" href="#182">182</a> 	 ((m.getAccessFlags() & (Constants.ACC_ABSTRACT | Constants.ACC_NATIVE)) == 0)?
<a name="183" href="#183">183</a> 	 <b>new</b> <a href="../../../../org/apache/bcel/generic/InstructionList.html">InstructionList</a>(m.getCode().getCode()) : <b>null</b>,
<a name="184" href="#184">184</a> 	 cp);
<a name="185" href="#185">185</a> 
<a name="186" href="#186">186</a>     <a href="../../../../org/apache/bcel/classfile/Attribute.html">Attribute</a>[] attributes = m.getAttributes();
<a name="187" href="#187">187</a>     <b>for</b>(<b>int</b> i=0; i &lt; attributes.length; i++) {
<a name="188" href="#188">188</a>       <a href="../../../../org/apache/bcel/classfile/Attribute.html">Attribute</a> a = attributes[i];
<a name="189" href="#189">189</a> 
<a name="190" href="#190">190</a>       <b>if</b>(a instanceof <a href="../../../../org/apache/bcel/classfile/Code.html">Code</a>) {
<a name="191" href="#191">191</a> 	Code c = (Code)a;
<a name="192" href="#192">192</a> 	setMaxStack(c.getMaxStack());
<a name="193" href="#193">193</a> 	setMaxLocals(c.getMaxLocals());
<a name="194" href="#194">194</a> 	
<a name="195" href="#195">195</a> 	CodeException[] ces = c.getExceptionTable();
<a name="196" href="#196">196</a> 	
<a name="197" href="#197">197</a> 	<b>if</b>(ces != <b>null</b>) {
<a name="198" href="#198">198</a> 	  <b>for</b>(<b>int</b> j=0; j &lt; ces.length; j++) {
<a name="199" href="#199">199</a>             <a href="../../../../org/apache/bcel/classfile/CodeException.html">CodeException</a> ce     = ces[j];
<a name="200" href="#200">200</a>             <b>int</b>           type   = ce.getCatchType();
<a name="201" href="#201">201</a>             <a href="../../../../org/apache/bcel/generic/ObjectType.html">ObjectType</a>    c_type = <b>null</b>;
<a name="202" href="#202">202</a> 
<a name="203" href="#203">203</a> 	    <b>if</b>(type &gt; 0) {
<a name="204" href="#204">204</a> 	      String cen = m.getConstantPool().getConstantString(type, Constants.CONSTANT_Class);
<a name="205" href="#205">205</a> 	      c_type = <b>new</b> ObjectType(cen);
<a name="206" href="#206">206</a> 	    }
<a name="207" href="#207">207</a> 
<a name="208" href="#208">208</a> 	    <b>int</b> end_pc = ce.getEndPC();
<a name="209" href="#209">209</a> 	    <b>int</b> length = m.getCode().getCode().length;
<a name="210" href="#210">210</a> 	    
<a name="211" href="#211">211</a> 	    InstructionHandle end;
<a name="212" href="#212">212</a> 
<a name="213" href="#213">213</a> 	    <b>if</b>(length == end_pc) { <font color="#329900"><i>// May happen, because end_pc is exclusive</font></i>
<a name="214" href="#214">214</a> 	      end = il.getEnd();
<a name="215" href="#215">215</a> 	    } <b>else</b> {
<a name="216" href="#216">216</a> 	      end = il.findHandle(end_pc);
<a name="217" href="#217">217</a> 	      end = end.getPrev(); <font color="#329900"><i>// Make it inclusive</font></i>
<a name="218" href="#218">218</a> 	    }
<a name="219" href="#219">219</a> 
<a name="220" href="#220">220</a> 	    addExceptionHandler(il.findHandle(ce.getStartPC()), end,
<a name="221" href="#221">221</a> 				il.findHandle(ce.getHandlerPC()), c_type);
<a name="222" href="#222">222</a> 	  }
<a name="223" href="#223">223</a> 	}
<a name="224" href="#224">224</a> 
<a name="225" href="#225">225</a> 	Attribute[] c_attributes = c.getAttributes();
<a name="226" href="#226">226</a> 	<b>for</b>(<b>int</b> j=0; j &lt; c_attributes.length; j++) {
<a name="227" href="#227">227</a> 	  a = c_attributes[j];
<a name="228" href="#228">228</a> 
<a name="229" href="#229">229</a> 	  <b>if</b>(a instanceof LineNumberTable) {
<a name="230" href="#230">230</a> 	    LineNumber[] ln = ((LineNumberTable)a).getLineNumberTable();
<a name="231" href="#231">231</a> 
<a name="232" href="#232">232</a> 	    <b>for</b>(<b>int</b> k=0; k &lt; ln.length; k++) {
<a name="233" href="#233">233</a> 	      LineNumber l = ln[k];
<a name="234" href="#234">234</a> 	      addLineNumber(il.findHandle(l.getStartPC()), l.getLineNumber());
<a name="235" href="#235">235</a> 	    }
<a name="236" href="#236">236</a> 	  } <b>else</b> <b>if</b>(a instanceof LocalVariableTable) {
<a name="237" href="#237">237</a> 	    LocalVariable[] lv = ((LocalVariableTable)a).getLocalVariableTable();
<a name="238" href="#238">238</a> 
<a name="239" href="#239">239</a> 	    removeLocalVariables();
<a name="240" href="#240">240</a> 
<a name="241" href="#241">241</a> 	    <b>for</b>(<b>int</b> k=0; k &lt; lv.length; k++) {
<a name="242" href="#242">242</a> 	      LocalVariable     l     = lv[k];
<a name="243" href="#243">243</a> 	      InstructionHandle start = il.findHandle(l.getStartPC());
<a name="244" href="#244">244</a> 	      InstructionHandle end   = il.findHandle(l.getStartPC() + l.getLength());
<a name="245" href="#245">245</a> 
<a name="246" href="#246">246</a> 	      <font color="#329900"><i>// Repair malformed handles</font></i>
<a name="247" href="#247">247</a> 	      <b>if</b>(<b>null</b> == start) {
<a name="248" href="#248">248</a> 		start = il.getStart();
<a name="249" href="#249">249</a> 	      }
<a name="250" href="#250">250</a> 
<a name="251" href="#251">251</a> 	      <b>if</b>(<b>null</b> == end) {
<a name="252" href="#252">252</a> 		end = il.getEnd();
<a name="253" href="#253">253</a> 	      }
<a name="254" href="#254">254</a> 
<a name="255" href="#255">255</a> 	      addLocalVariable(l.getName(), Type.getType(l.getSignature()),
<a name="256" href="#256">256</a> 			       l.getIndex(), start, end);
<a name="257" href="#257">257</a> 	    }
<a name="258" href="#258">258</a> 	  } <b>else</b>
<a name="259" href="#259">259</a> 	    addCodeAttribute(a);
<a name="260" href="#260">260</a> 	}
<a name="261" href="#261">261</a>       } <b>else</b> <b>if</b>(a instanceof <a href="../../../../org/apache/bcel/classfile/ExceptionTable.html">ExceptionTable</a>) {
<a name="262" href="#262">262</a> 	String[] names = ((ExceptionTable)a).getExceptionNames();
<a name="263" href="#263">263</a> 	<b>for</b>(<b>int</b> j=0; j &lt; names.length; j++)
<a name="264" href="#264">264</a> 	  addException(names[j]);
<a name="265" href="#265">265</a>       } <b>else</b>
<a name="266" href="#266">266</a> 	addAttribute(a);
<a name="267" href="#267">267</a>     }
<a name="268" href="#268">268</a>   }
<a name="269" href="#269">269</a> 
<a name="270" href="#270">270</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="271" href="#271">271</a> <font color="#AA0000"><i>   * Adds a local variable to this method.</font></i>
<a name="272" href="#272">272</a> <font color="#AA0000"><i>   *</font></i>
<a name="273" href="#273">273</a> <font color="#AA0000"><i>   * @param name variable name</font></i>
<a name="274" href="#274">274</a> <font color="#AA0000"><i>   * @param type variable type</font></i>
<a name="275" href="#275">275</a> <font color="#AA0000"><i>   * @param slot the index of the local variable, if type is long or double, the next available</font></i>
<a name="276" href="#276">276</a> <font color="#AA0000"><i>   * index is slot+2</font></i>
<a name="277" href="#277">277</a> <font color="#AA0000"><i>   * @param start from where the variable is valid</font></i>
<a name="278" href="#278">278</a> <font color="#AA0000"><i>   * @param end until where the variable is valid</font></i>
<a name="279" href="#279">279</a> <font color="#AA0000"><i>   * @return new local variable object</font></i>
<a name="280" href="#280">280</a> <font color="#AA0000"><i>   * @see LocalVariable</font></i>
<a name="281" href="#281">281</a> <font color="#AA0000"><i>   */</font></i>
<a name="282" href="#282">282</a>   <b>public</b> <a href="../../../../org/apache/bcel/generic/LocalVariableGen.html">LocalVariableGen</a> addLocalVariable(String name, <a href="../../../../org/apache/bcel/generic/Type.html">Type</a> type, <b>int</b> slot,
<a name="283" href="#283">283</a> 					   InstructionHandle start,
<a name="284" href="#284">284</a> 					   InstructionHandle end) {
<a name="285" href="#285">285</a>     byte t = type.getType();
<a name="286" href="#286">286</a> 
<a name="287" href="#287">287</a>     <b>if</b>(t != Constants.T_ADDRESS) {
<a name="288" href="#288">288</a>       <b>int</b>  add = type.getSize();
<a name="289" href="#289">289</a>     
<a name="290" href="#290">290</a>       <b>if</b>(slot + add &gt; max_locals) 
<a name="291" href="#291">291</a> 	max_locals = slot + add;
<a name="292" href="#292">292</a>       
<a name="293" href="#293">293</a>       <a href="../../../../org/apache/bcel/generic/LocalVariableGen.html">LocalVariableGen</a> l = <b>new</b> <a href="../../../../org/apache/bcel/generic/LocalVariableGen.html">LocalVariableGen</a>(slot, name, type, start, end);
<a name="294" href="#294">294</a>       <b>int</b> i;
<a name="295" href="#295">295</a>       
<a name="296" href="#296">296</a>       <b>if</b>((i = variable_vec.indexOf(l)) &gt;= 0) <font color="#329900"><i>// Overwrite if necessary</font></i>
<a name="297" href="#297">297</a> 	variable_vec.set(i, l);
<a name="298" href="#298">298</a>       <b>else</b>
<a name="299" href="#299">299</a> 	variable_vec.add(l);
<a name="300" href="#300">300</a> 
<a name="301" href="#301">301</a>       <b>return</b> l;
<a name="302" href="#302">302</a>     } <b>else</b> {
<a name="303" href="#303">303</a>       <b>throw</b> <b>new</b> IllegalArgumentException(<font color="#000099">"Can not use "</font> + type + 
<a name="304" href="#304">304</a> 					 <font color="#000099">" as type for local variable"</font>);
<a name="305" href="#305">305</a> 					 
<a name="306" href="#306">306</a>     }
<a name="307" href="#307">307</a>   }
<a name="308" href="#308">308</a> 
<a name="309" href="#309">309</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="310" href="#310">310</a> <font color="#AA0000"><i>   * Adds a local variable to this method and assigns an index automatically.</font></i>
<a name="311" href="#311">311</a> <font color="#AA0000"><i>   *</font></i>
<a name="312" href="#312">312</a> <font color="#AA0000"><i>   * @param name variable name</font></i>
<a name="313" href="#313">313</a> <font color="#AA0000"><i>   * @param type variable type</font></i>
<a name="314" href="#314">314</a> <font color="#AA0000"><i>   * @param start from where the variable is valid, if this is null,</font></i>
<a name="315" href="#315">315</a> <font color="#AA0000"><i>   * it is valid from the start</font></i>
<a name="316" href="#316">316</a> <font color="#AA0000"><i>   * @param end until where the variable is valid, if this is null,</font></i>
<a name="317" href="#317">317</a> <font color="#AA0000"><i>   * it is valid to the end</font></i>
<a name="318" href="#318">318</a> <font color="#AA0000"><i>   * @return new local variable object</font></i>
<a name="319" href="#319">319</a> <font color="#AA0000"><i>   * @see LocalVariable</font></i>
<a name="320" href="#320">320</a> <font color="#AA0000"><i>   */</font></i>
<a name="321" href="#321">321</a>   <b>public</b> <a href="../../../../org/apache/bcel/generic/LocalVariableGen.html">LocalVariableGen</a> addLocalVariable(String name, <a href="../../../../org/apache/bcel/generic/Type.html">Type</a> type,
<a name="322" href="#322">322</a> 					   InstructionHandle start,
<a name="323" href="#323">323</a> 					   InstructionHandle end) {
<a name="324" href="#324">324</a>     <b>return</b> addLocalVariable(name, type, max_locals, start, end);
<a name="325" href="#325">325</a>   }
<a name="326" href="#326">326</a> 
<a name="327" href="#327">327</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="328" href="#328">328</a> <font color="#AA0000"><i>   * Remove a local variable, its slot will not be reused, if you do not use addLocalVariable</font></i>
<a name="329" href="#329">329</a> <font color="#AA0000"><i>   * with an explicit index argument.</font></i>
<a name="330" href="#330">330</a> <font color="#AA0000"><i>   */</font></i>
<a name="331" href="#331">331</a>   <b>public</b> <b>void</b> removeLocalVariable(<a href="../../../../org/apache/bcel/generic/LocalVariableGen.html">LocalVariableGen</a> l) {
<a name="332" href="#332">332</a>     variable_vec.remove(l);  
<a name="333" href="#333">333</a>   }
<a name="334" href="#334">334</a> 
<a name="335" href="#335">335</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="336" href="#336">336</a> <font color="#AA0000"><i>   * Remove all local variables.</font></i>
<a name="337" href="#337">337</a> <font color="#AA0000"><i>   */</font></i>
<a name="338" href="#338">338</a>   <b>public</b> <b>void</b> removeLocalVariables() {
<a name="339" href="#339">339</a>     variable_vec.clear();
<a name="340" href="#340">340</a>   }
<a name="341" href="#341">341</a> 
<a name="342" href="#342">342</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="343" href="#343">343</a> <font color="#AA0000"><i>   * Sort local variables by index</font></i>
<a name="344" href="#344">344</a> <font color="#AA0000"><i>   */</font></i>
<a name="345" href="#345">345</a>   <b>private</b> <b>static</b> <b>final</b> <b>void</b> sort(<a href="../../../../org/apache/bcel/generic/LocalVariableGen.html">LocalVariableGen</a>[] vars, <b>int</b> l, <b>int</b> r) {
<a name="346" href="#346">346</a>     <b>int</b> i = l, j = r;
<a name="347" href="#347">347</a>     <b>int</b> m = vars[(l + r) / 2].getIndex();
<a name="348" href="#348">348</a>     <a href="../../../../org/apache/bcel/generic/LocalVariableGen.html">LocalVariableGen</a> h;
<a name="349" href="#349">349</a> 
<a name="350" href="#350">350</a>     <b>do</b> {
<a name="351" href="#351">351</a>       <b>while</b>(vars[i].getIndex() &lt; m) i++;
<a name="352" href="#352">352</a>       <b>while</b>(m &lt; vars[j].getIndex()) j--;
<a name="353" href="#353">353</a> 
<a name="354" href="#354">354</a>       <b>if</b>(i &lt;= j) {
<a name="355" href="#355">355</a>         h=vars[i]; vars[i]=vars[j]; vars[j]=h; <font color="#329900"><i>// Swap elements</font></i>
<a name="356" href="#356">356</a>         i++; j--;
<a name="357" href="#357">357</a>       }
<a name="358" href="#358">358</a>     } <b>while</b>(i &lt;= j);
<a name="359" href="#359">359</a> 
<a name="360" href="#360">360</a>     <b>if</b>(l &lt; j) sort(vars, l, j);
<a name="361" href="#361">361</a>     <b>if</b>(i &lt; r) sort(vars, i, r);
<a name="362" href="#362">362</a>   }
<a name="363" href="#363">363</a> 
<a name="364" href="#364">364</a>   <font color="#329900"><i>/*</font></i>
<a name="365" href="#365">365</a> <font color="#329900"><i>   * If the range of the variable has not been set yet, it will be set to be valid from</font></i>
<a name="366" href="#366">366</a> <font color="#329900"><i>   * the start to the end of the instruction list.</font></i>
<a name="367" href="#367">367</a> <font color="#329900"><i>   * </font></i>
<a name="368" href="#368">368</a> <font color="#329900"><i>   * @return array of declared local variables sorted by index</font></i>
<a name="369" href="#369">369</a> <font color="#329900"><i>   */</font></i>
<a name="370" href="#370">370</a>   <b>public</b> <a href="../../../../org/apache/bcel/generic/LocalVariableGen.html">LocalVariableGen</a>[] getLocalVariables() {
<a name="371" href="#371">371</a>     <b>int</b>                size = variable_vec.size();
<a name="372" href="#372">372</a>     <a href="../../../../org/apache/bcel/generic/LocalVariableGen.html">LocalVariableGen</a>[] lg   = <b>new</b> LocalVariableGen[size];
<a name="373" href="#373">373</a>     variable_vec.toArray(lg);
<a name="374" href="#374">374</a>     
<a name="375" href="#375">375</a>     <b>for</b>(<b>int</b> i=0; i &lt; size; i++) {
<a name="376" href="#376">376</a>       <b>if</b>(lg[i].getStart() == <b>null</b>)
<a name="377" href="#377">377</a> 	lg[i].setStart(il.getStart());
<a name="378" href="#378">378</a> 
<a name="379" href="#379">379</a>       <b>if</b>(lg[i].getEnd() == <b>null</b>)
<a name="380" href="#380">380</a> 	lg[i].setEnd(il.getEnd());
<a name="381" href="#381">381</a>     }
<a name="382" href="#382">382</a> 
<a name="383" href="#383">383</a>     <b>if</b>(size &gt; 1)
<a name="384" href="#384">384</a>       sort(lg, 0, size - 1);
<a name="385" href="#385">385</a> 
<a name="386" href="#386">386</a>     <b>return</b> lg;
<a name="387" href="#387">387</a>   }
<a name="388" href="#388">388</a> 
<a name="389" href="#389">389</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="390" href="#390">390</a> <font color="#AA0000"><i>   * @return `LocalVariableTable' attribute of all the local variables of this method.</font></i>
<a name="391" href="#391">391</a> <font color="#AA0000"><i>   */</font></i>
<a name="392" href="#392">392</a>   <b>public</b> <a href="../../../../org/apache/bcel/classfile/LocalVariableTable.html">LocalVariableTable</a> getLocalVariableTable(<a href="../../../../org/apache/bcel/generic/ConstantPoolGen.html">ConstantPoolGen</a> cp) {
<a name="393" href="#393">393</a>     <a href="../../../../org/apache/bcel/generic/LocalVariableGen.html">LocalVariableGen</a>[] lg   = getLocalVariables();
<a name="394" href="#394">394</a>     <b>int</b>                size = lg.length;
<a name="395" href="#395">395</a>     <a href="../../../../org/apache/bcel/classfile/LocalVariable.html">LocalVariable</a>[]    lv   = <b>new</b> LocalVariable[size];
<a name="396" href="#396">396</a> 
<a name="397" href="#397">397</a>     <b>for</b>(<b>int</b> i=0; i &lt; size; i++)
<a name="398" href="#398">398</a>       lv[i] = lg[i].getLocalVariable(cp);
<a name="399" href="#399">399</a> 
<a name="400" href="#400">400</a>     <b>return</b> <b>new</b> <a href="../../../../org/apache/bcel/classfile/LocalVariableTable.html">LocalVariableTable</a>(cp.addUtf8(<font color="#000099">"LocalVariableTable"</font>),
<a name="401" href="#401">401</a> 				  2 + lv.length * 10, lv, cp.getConstantPool());
<a name="402" href="#402">402</a>   }
<a name="403" href="#403">403</a> 
<a name="404" href="#404">404</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="405" href="#405">405</a> <font color="#AA0000"><i>   * Give an instruction a line number corresponding to the source code line.</font></i>
<a name="406" href="#406">406</a> <font color="#AA0000"><i>   *</font></i>
<a name="407" href="#407">407</a> <font color="#AA0000"><i>   * @param ih instruction to tag</font></i>
<a name="408" href="#408">408</a> <font color="#AA0000"><i>   * @return new line number object</font></i>
<a name="409" href="#409">409</a> <font color="#AA0000"><i>   * @see LineNumber</font></i>
<a name="410" href="#410">410</a> <font color="#AA0000"><i>   */</font></i>
<a name="411" href="#411">411</a>   <b>public</b> <a href="../../../../org/apache/bcel/generic/LineNumberGen.html">LineNumberGen</a> addLineNumber(<a href="../../../../org/apache/bcel/generic/InstructionHandle.html">InstructionHandle</a> ih, <b>int</b> src_line) {
<a name="412" href="#412">412</a>     <a href="../../../../org/apache/bcel/generic/LineNumberGen.html">LineNumberGen</a> l = <b>new</b> <a href="../../../../org/apache/bcel/generic/LineNumberGen.html">LineNumberGen</a>(ih, src_line);
<a name="413" href="#413">413</a>     line_number_vec.add(l);
<a name="414" href="#414">414</a>     <b>return</b> l;
<a name="415" href="#415">415</a>   }
<a name="416" href="#416">416</a> 
<a name="417" href="#417">417</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="418" href="#418">418</a> <font color="#AA0000"><i>   * Remove a line number.</font></i>
<a name="419" href="#419">419</a> <font color="#AA0000"><i>   */</font></i>
<a name="420" href="#420">420</a>   <b>public</b> <b>void</b> removeLineNumber(<a href="../../../../org/apache/bcel/generic/LineNumberGen.html">LineNumberGen</a> l) {
<a name="421" href="#421">421</a>     line_number_vec.remove(l);  
<a name="422" href="#422">422</a>   }
<a name="423" href="#423">423</a> 
<a name="424" href="#424">424</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="425" href="#425">425</a> <font color="#AA0000"><i>   * Remove all line numbers.</font></i>
<a name="426" href="#426">426</a> <font color="#AA0000"><i>   */</font></i>
<a name="427" href="#427">427</a>   <b>public</b> <b>void</b> removeLineNumbers() {
<a name="428" href="#428">428</a>     line_number_vec.clear();
<a name="429" href="#429">429</a>   }
<a name="430" href="#430">430</a> 
<a name="431" href="#431">431</a>   <font color="#329900"><i>/*</font></i>
<a name="432" href="#432">432</a> <font color="#329900"><i>   * @return array of line numbers</font></i>
<a name="433" href="#433">433</a> <font color="#329900"><i>   */</font></i>
<a name="434" href="#434">434</a>   <b>public</b> <a href="../../../../org/apache/bcel/generic/LineNumberGen.html">LineNumberGen</a>[] getLineNumbers() {
<a name="435" href="#435">435</a>     <a href="../../../../org/apache/bcel/generic/LineNumberGen.html">LineNumberGen</a>[] lg = <b>new</b> <a href="../../../../org/apache/bcel/generic/LineNumberGen.html">LineNumberGen</a>[line_number_vec.size()];
<a name="436" href="#436">436</a>     line_number_vec.toArray(lg);
<a name="437" href="#437">437</a>     <b>return</b> lg;
<a name="438" href="#438">438</a>   }
<a name="439" href="#439">439</a> 
<a name="440" href="#440">440</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="441" href="#441">441</a> <font color="#AA0000"><i>   * @return `LineNumberTable' attribute of all the local variables of this method.</font></i>
<a name="442" href="#442">442</a> <font color="#AA0000"><i>   */</font></i>
<a name="443" href="#443">443</a>   <b>public</b> <a href="../../../../org/apache/bcel/classfile/LineNumberTable.html">LineNumberTable</a> getLineNumberTable(<a href="../../../../org/apache/bcel/generic/ConstantPoolGen.html">ConstantPoolGen</a> cp) {
<a name="444" href="#444">444</a>     <b>int</b>          size = line_number_vec.size(); 
<a name="445" href="#445">445</a>     <a href="../../../../org/apache/bcel/classfile/LineNumber.html">LineNumber</a>[] ln   = <b>new</b> LineNumber[size];
<a name="446" href="#446">446</a> 
<a name="447" href="#447">447</a>     <b>try</b> {
<a name="448" href="#448">448</a>       <b>for</b>(<b>int</b> i=0; i &lt; size; i++)
<a name="449" href="#449">449</a> 	ln[i] = ((LineNumberGen)line_number_vec.get(i)).getLineNumber();
<a name="450" href="#450">450</a>     } <b>catch</b>(ArrayIndexOutOfBoundsException e) {} <font color="#329900"><i>// Never occurs</font></i>
<a name="451" href="#451">451</a> 
<a name="452" href="#452">452</a>     <b>return</b> <b>new</b> <a href="../../../../org/apache/bcel/classfile/LineNumberTable.html">LineNumberTable</a>(cp.addUtf8(<font color="#000099">"LineNumberTable"</font>),
<a name="453" href="#453">453</a> 			       2 + ln.length * 4, ln, cp.getConstantPool());
<a name="454" href="#454">454</a>   }
<a name="455" href="#455">455</a> 
<a name="456" href="#456">456</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="457" href="#457">457</a> <font color="#AA0000"><i>   * Add an exception handler, i.e., specify region where a handler is active and an</font></i>
<a name="458" href="#458">458</a> <font color="#AA0000"><i>   * instruction where the actual handling is done.</font></i>
<a name="459" href="#459">459</a> <font color="#AA0000"><i>   *</font></i>
<a name="460" href="#460">460</a> <font color="#AA0000"><i>   * @param start_pc Start of region (inclusive)</font></i>
<a name="461" href="#461">461</a> <font color="#AA0000"><i>   * @param end_pc End of region (inclusive)</font></i>
<a name="462" href="#462">462</a> <font color="#AA0000"><i>   * @param handler_pc Where handling is done</font></i>
<a name="463" href="#463">463</a> <font color="#AA0000"><i>   * @param catch_type class type of handled exception or null if any</font></i>
<a name="464" href="#464">464</a> <font color="#AA0000"><i>   * exception is handled</font></i>
<a name="465" href="#465">465</a> <font color="#AA0000"><i>   * @return new exception handler object</font></i>
<a name="466" href="#466">466</a> <font color="#AA0000"><i>   */</font></i>
<a name="467" href="#467">467</a>   <b>public</b> <a href="../../../../org/apache/bcel/generic/CodeExceptionGen.html">CodeExceptionGen</a> addExceptionHandler(<a href="../../../../org/apache/bcel/generic/InstructionHandle.html">InstructionHandle</a> start_pc,
<a name="468" href="#468">468</a> 					      InstructionHandle end_pc,
<a name="469" href="#469">469</a> 					      InstructionHandle handler_pc,
<a name="470" href="#470">470</a> 					      ObjectType <b>catch</b>_type) {
<a name="471" href="#471">471</a>     <b>if</b>((start_pc == <b>null</b>) || (end_pc == <b>null</b>) || (handler_pc == <b>null</b>))
<a name="472" href="#472">472</a>       <b>throw</b> <b>new</b> <a href="../../../../org/apache/bcel/generic/ClassGenException.html">ClassGenException</a>(<font color="#000099">"Exception handler target is null instruction"</font>);
<a name="473" href="#473">473</a>     
<a name="474" href="#474">474</a>     <a href="../../../../org/apache/bcel/generic/CodeExceptionGen.html">CodeExceptionGen</a> c = <b>new</b> <a href="../../../../org/apache/bcel/generic/CodeExceptionGen.html">CodeExceptionGen</a>(start_pc, end_pc,
<a name="475" href="#475">475</a> 					      handler_pc, <b>catch</b>_type);
<a name="476" href="#476">476</a>     exception_vec.add(c);
<a name="477" href="#477">477</a>     <b>return</b> c;
<a name="478" href="#478">478</a>   }
<a name="479" href="#479">479</a> 
<a name="480" href="#480">480</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="481" href="#481">481</a> <font color="#AA0000"><i>   * Remove an exception handler.</font></i>
<a name="482" href="#482">482</a> <font color="#AA0000"><i>   */</font></i>
<a name="483" href="#483">483</a>   <b>public</b> <b>void</b> removeExceptionHandler(<a href="../../../../org/apache/bcel/generic/CodeExceptionGen.html">CodeExceptionGen</a> c) {
<a name="484" href="#484">484</a>     exception_vec.remove(c);  
<a name="485" href="#485">485</a>   }
<a name="486" href="#486">486</a> 
<a name="487" href="#487">487</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="488" href="#488">488</a> <font color="#AA0000"><i>   * Remove all line numbers.</font></i>
<a name="489" href="#489">489</a> <font color="#AA0000"><i>   */</font></i>
<a name="490" href="#490">490</a>   <b>public</b> <b>void</b> removeExceptionHandlers() {
<a name="491" href="#491">491</a>     exception_vec.clear();
<a name="492" href="#492">492</a>   }
<a name="493" href="#493">493</a> 
<a name="494" href="#494">494</a>   <font color="#329900"><i>/*</font></i>
<a name="495" href="#495">495</a> <font color="#329900"><i>   * @return array of declared exception handlers</font></i>
<a name="496" href="#496">496</a> <font color="#329900"><i>   */</font></i>
<a name="497" href="#497">497</a>   <b>public</b> <a href="../../../../org/apache/bcel/generic/CodeExceptionGen.html">CodeExceptionGen</a>[] getExceptionHandlers() {
<a name="498" href="#498">498</a>     <a href="../../../../org/apache/bcel/generic/CodeExceptionGen.html">CodeExceptionGen</a>[] cg   = <b>new</b> CodeExceptionGen[exception_vec.size()];
<a name="499" href="#499">499</a>     exception_vec.toArray(cg);
<a name="500" href="#500">500</a>     <b>return</b> cg;
<a name="501" href="#501">501</a>   }
<a name="502" href="#502">502</a> 
<a name="503" href="#503">503</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="504" href="#504">504</a> <font color="#AA0000"><i>   * @return code exceptions for `Code' attribute</font></i>
<a name="505" href="#505">505</a> <font color="#AA0000"><i>   */</font></i>
<a name="506" href="#506">506</a>   <b>private</b> <a href="../../../../org/apache/bcel/classfile/CodeException.html">CodeException</a>[] getCodeExceptions() {
<a name="507" href="#507">507</a>     <b>int</b>             size  = exception_vec.size(); 
<a name="508" href="#508">508</a>     <a href="../../../../org/apache/bcel/classfile/CodeException.html">CodeException</a>[] c_exc = <b>new</b> <a href="../../../../org/apache/bcel/classfile/CodeException.html">CodeException</a>[size];
<a name="509" href="#509">509</a> 
<a name="510" href="#510">510</a>     <b>try</b> {
<a name="511" href="#511">511</a>       <b>for</b>(<b>int</b> i=0; i &lt; size; i++) {
<a name="512" href="#512">512</a> 	CodeExceptionGen c = (CodeExceptionGen)exception_vec.get(i);
<a name="513" href="#513">513</a> 	c_exc[i] = c.getCodeException(cp);
<a name="514" href="#514">514</a>       }
<a name="515" href="#515">515</a>     } <b>catch</b>(ArrayIndexOutOfBoundsException e) {}
<a name="516" href="#516">516</a>     
<a name="517" href="#517">517</a>     <b>return</b> c_exc;
<a name="518" href="#518">518</a>   }
<a name="519" href="#519">519</a> 
<a name="520" href="#520">520</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="521" href="#521">521</a> <font color="#AA0000"><i>   * Add an exception possibly thrown by this method.</font></i>
<a name="522" href="#522">522</a> <font color="#AA0000"><i>   *</font></i>
<a name="523" href="#523">523</a> <font color="#AA0000"><i>   * @param class_name (fully qualified) name of exception</font></i>
<a name="524" href="#524">524</a> <font color="#AA0000"><i>   */</font></i>
<a name="525" href="#525">525</a>   <b>public</b> <b>void</b> addException(String <b>class</b>_name) {
<a name="526" href="#526">526</a>     throws_vec.add(<b>class</b>_name);
<a name="527" href="#527">527</a>   }
<a name="528" href="#528">528</a> 
<a name="529" href="#529">529</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="530" href="#530">530</a> <font color="#AA0000"><i>   * Remove an exception.</font></i>
<a name="531" href="#531">531</a> <font color="#AA0000"><i>   */</font></i>
<a name="532" href="#532">532</a>   <b>public</b> <b>void</b> removeException(String c) {
<a name="533" href="#533">533</a>     throws_vec.remove(c);  
<a name="534" href="#534">534</a>   }
<a name="535" href="#535">535</a> 
<a name="536" href="#536">536</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="537" href="#537">537</a> <font color="#AA0000"><i>   * Remove all exceptions.</font></i>
<a name="538" href="#538">538</a> <font color="#AA0000"><i>   */</font></i>
<a name="539" href="#539">539</a>   <b>public</b> <b>void</b> removeExceptions() {
<a name="540" href="#540">540</a>     throws_vec.clear();  
<a name="541" href="#541">541</a>   }
<a name="542" href="#542">542</a> 
<a name="543" href="#543">543</a>   <font color="#329900"><i>/*</font></i>
<a name="544" href="#544">544</a> <font color="#329900"><i>   * @return array of thrown exceptions</font></i>
<a name="545" href="#545">545</a> <font color="#329900"><i>   */</font></i>
<a name="546" href="#546">546</a>   <b>public</b> String[] getExceptions() {
<a name="547" href="#547">547</a>     String[] e = <b>new</b> String[throws_vec.size()];
<a name="548" href="#548">548</a>     throws_vec.toArray(e);
<a name="549" href="#549">549</a>     <b>return</b> e;
<a name="550" href="#550">550</a>   }
<a name="551" href="#551">551</a> 
<a name="552" href="#552">552</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="553" href="#553">553</a> <font color="#AA0000"><i>   * @return `Exceptions' attribute of all the exceptions thrown by this method.</font></i>
<a name="554" href="#554">554</a> <font color="#AA0000"><i>   */</font></i>
<a name="555" href="#555">555</a>   <b>private</b> <a href="../../../../org/apache/bcel/classfile/ExceptionTable.html">ExceptionTable</a> getExceptionTable(<a href="../../../../org/apache/bcel/generic/ConstantPoolGen.html">ConstantPoolGen</a> cp) {
<a name="556" href="#556">556</a>     <b>int</b>   size = throws_vec.size();
<a name="557" href="#557">557</a>     <b>int</b>[] ex   = <b>new</b> <b>int</b>[size];
<a name="558" href="#558">558</a>       
<a name="559" href="#559">559</a>     <b>try</b> {
<a name="560" href="#560">560</a>       <b>for</b>(<b>int</b> i=0; i &lt; size; i++)
<a name="561" href="#561">561</a> 	ex[i] = cp.addClass((String)throws_vec.get(i));
<a name="562" href="#562">562</a>     } <b>catch</b>(ArrayIndexOutOfBoundsException e) {}
<a name="563" href="#563">563</a>     
<a name="564" href="#564">564</a>     <b>return</b> <b>new</b> <a href="../../../../org/apache/bcel/classfile/ExceptionTable.html">ExceptionTable</a>(cp.addUtf8(<font color="#000099">"Exceptions"</font>),
<a name="565" href="#565">565</a> 			      2 + 2 * size, ex, cp.getConstantPool());
<a name="566" href="#566">566</a>   }
<a name="567" href="#567">567</a> 
<a name="568" href="#568">568</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="569" href="#569">569</a> <font color="#AA0000"><i>   * Add an attribute to the code. Currently, the JVM knows about the</font></i>
<a name="570" href="#570">570</a> <font color="#AA0000"><i>   * LineNumberTable, LocalVariableTable and StackMap attributes,</font></i>
<a name="571" href="#571">571</a> <font color="#AA0000"><i>   * where the former two will be generated automatically and the</font></i>
<a name="572" href="#572">572</a> <font color="#AA0000"><i>   * latter is used for the MIDP only. Other attributes will be</font></i>
<a name="573" href="#573">573</a> <font color="#AA0000"><i>   * ignored by the JVM but do no harm.</font></i>
<a name="574" href="#574">574</a> <font color="#AA0000"><i>   *</font></i>
<a name="575" href="#575">575</a> <font color="#AA0000"><i>   * @param a attribute to be added</font></i>
<a name="576" href="#576">576</a> <font color="#AA0000"><i>   */</font></i>
<a name="577" href="#577">577</a>   <b>public</b> <b>void</b> addCodeAttribute(<a href="../../../../org/apache/bcel/classfile/Attribute.html">Attribute</a> a) { code_attrs_vec.add(a); }
<a name="578" href="#578">578</a> 
<a name="579" href="#579">579</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="580" href="#580">580</a> <font color="#AA0000"><i>   * Remove a code attribute.</font></i>
<a name="581" href="#581">581</a> <font color="#AA0000"><i>   */</font></i>
<a name="582" href="#582">582</a>   <b>public</b> <b>void</b> removeCodeAttribute(<a href="../../../../org/apache/bcel/classfile/Attribute.html">Attribute</a> a) { code_attrs_vec.remove(a); }
<a name="583" href="#583">583</a>   
<a name="584" href="#584">584</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="585" href="#585">585</a> <font color="#AA0000"><i>   * Remove all code attributes.</font></i>
<a name="586" href="#586">586</a> <font color="#AA0000"><i>   */</font></i>
<a name="587" href="#587">587</a>   <b>public</b> <b>void</b> removeCodeAttributes() {
<a name="588" href="#588">588</a>     code_attrs_vec.clear();
<a name="589" href="#589">589</a>   }
<a name="590" href="#590">590</a> 
<a name="591" href="#591">591</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="592" href="#592">592</a> <font color="#AA0000"><i>   * @return all attributes of this method.</font></i>
<a name="593" href="#593">593</a> <font color="#AA0000"><i>   */</font></i>
<a name="594" href="#594">594</a>   <b>public</b> <a href="../../../../org/apache/bcel/classfile/Attribute.html">Attribute</a>[] getCodeAttributes() {
<a name="595" href="#595">595</a>     <a href="../../../../org/apache/bcel/classfile/Attribute.html">Attribute</a>[] attributes = <b>new</b> <a href="../../../../org/apache/bcel/classfile/Attribute.html">Attribute</a>[code_attrs_vec.size()];
<a name="596" href="#596">596</a>     code_attrs_vec.toArray(attributes);
<a name="597" href="#597">597</a>     <b>return</b> attributes;
<a name="598" href="#598">598</a>   }
<a name="599" href="#599">599</a> 
<a name="600" href="#600">600</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="601" href="#601">601</a> <font color="#AA0000"><i>   * Get method object. Never forget to call setMaxStack() or setMaxStack(max), respectively,</font></i>
<a name="602" href="#602">602</a> <font color="#AA0000"><i>   * before calling this method (the same applies for max locals).</font></i>
<a name="603" href="#603">603</a> <font color="#AA0000"><i>   *</font></i>
<a name="604" href="#604">604</a> <font color="#AA0000"><i>   * @return method object</font></i>
<a name="605" href="#605">605</a> <font color="#AA0000"><i>   */</font></i>
<a name="606" href="#606">606</a>   <b>public</b> <a href="../../../../org/apache/bcel/classfile/Method.html">Method</a> getMethod() {
<a name="607" href="#607">607</a>     String signature       = getSignature();
<a name="608" href="#608">608</a>     <b>int</b>    name_index      = cp.addUtf8(name);
<a name="609" href="#609">609</a>     <b>int</b>    signature_index = cp.addUtf8(signature);
<a name="610" href="#610">610</a> 
<a name="611" href="#611">611</a>     <font color="#329900"><i>/*<font color="#329900"><i> Also updates positions of instructions, i.e., their indices</font></i></font></i>
<a name="612" href="#612">612</a> <font color="#329900"><i>     */</font></i>
<a name="613" href="#613">613</a>     byte[] byte_code = <b>null</b>;
<a name="614" href="#614">614</a> 
<a name="615" href="#615">615</a>     <b>if</b>(il != <b>null</b>)
<a name="616" href="#616">616</a>       byte_code = il.getByteCode();
<a name="617" href="#617">617</a> 
<a name="618" href="#618">618</a>     <a href="../../../../org/apache/bcel/classfile/LineNumberTable.html">LineNumberTable</a>    lnt = <b>null</b>;
<a name="619" href="#619">619</a>     <a href="../../../../org/apache/bcel/classfile/LocalVariableTable.html">LocalVariableTable</a> lvt = <b>null</b>;
<a name="620" href="#620">620</a> 
<a name="621" href="#621">621</a>     <font color="#329900"><i>/*<font color="#329900"><i> Create LocalVariableTable and LineNumberTable attributes (for debuggers, e.g.)</font></i></font></i>
<a name="622" href="#622">622</a> <font color="#329900"><i>     */</font></i>
<a name="623" href="#623">623</a>     <b>if</b>((variable_vec.size() &gt; 0) && !strip_attributes)
<a name="624" href="#624">624</a>       addCodeAttribute(lvt = getLocalVariableTable(cp));
<a name="625" href="#625">625</a> 
<a name="626" href="#626">626</a>     <b>if</b>((line_number_vec.size() &gt; 0) && !strip_attributes)
<a name="627" href="#627">627</a>       addCodeAttribute(lnt = getLineNumberTable(cp));
<a name="628" href="#628">628</a> 
<a name="629" href="#629">629</a>     <a href="../../../../org/apache/bcel/classfile/Attribute.html">Attribute</a>[] code_attrs = getCodeAttributes();
<a name="630" href="#630">630</a> 
<a name="631" href="#631">631</a>     <font color="#329900"><i>/*<font color="#329900"><i> Each attribute causes 6 additional header bytes</font></i></font></i>
<a name="632" href="#632">632</a> <font color="#329900"><i>     */</font></i>
<a name="633" href="#633">633</a>     <b>int</b>                attrs_len  = 0;
<a name="634" href="#634">634</a>     <b>for</b>(<b>int</b> i=0; i &lt; code_attrs.length; i++)
<a name="635" href="#635">635</a>       attrs_len += (code_attrs[i].getLength() + 6);
<a name="636" href="#636">636</a> 
<a name="637" href="#637">637</a>     <a href="../../../../org/apache/bcel/classfile/CodeException.html">CodeException</a>[] c_exc   = getCodeExceptions();
<a name="638" href="#638">638</a>     <b>int</b>             exc_len = c_exc.length * 8; <font color="#329900"><i>// Every entry takes 8 bytes</font></i>
<a name="639" href="#639">639</a> 
<a name="640" href="#640">640</a>     <a href="../../../../org/apache/bcel/classfile/Code.html">Code</a> code = <b>null</b>;
<a name="641" href="#641">641</a> 
<a name="642" href="#642">642</a>     <b>if</b>((il != <b>null</b>) && !isAbstract()) {
<a name="643" href="#643">643</a>       <font color="#329900"><i>// Remove any stale code attribute</font></i>
<a name="644" href="#644">644</a>       <a href="../../../../org/apache/bcel/classfile/Attribute.html">Attribute</a>[] attributes = getAttributes();
<a name="645" href="#645">645</a>       <b>for</b>(<b>int</b> i=0; i &lt; attributes.length; i++) {
<a name="646" href="#646">646</a> 	Attribute a = attributes[i];
<a name="647" href="#647">647</a> 
<a name="648" href="#648">648</a> 	<b>if</b>(a instanceof <a href="../../../../org/apache/bcel/classfile/Code.html">Code</a>)
<a name="649" href="#649">649</a> 	  removeAttribute(a);
<a name="650" href="#650">650</a>       }
<a name="651" href="#651">651</a> 
<a name="652" href="#652">652</a>       code = <b>new</b> <a href="../../../../org/apache/bcel/classfile/Code.html">Code</a>(cp.addUtf8(<font color="#000099">"Code"</font>),
<a name="653" href="#653">653</a> 		      8 + byte_code.length + <font color="#329900"><i>// prologue byte code</font></i>
<a name="654" href="#654">654</a> 		      2 + exc_len +          <font color="#329900"><i>// exceptions</font></i>
<a name="655" href="#655">655</a> 		      2 + attrs_len,         <font color="#329900"><i>// attributes</font></i>
<a name="656" href="#656">656</a> 		      max_stack, max_locals,
<a name="657" href="#657">657</a> 		      byte_code, c_exc,
<a name="658" href="#658">658</a> 		      code_attrs,
<a name="659" href="#659">659</a> 		      cp.getConstantPool());
<a name="660" href="#660">660</a>       
<a name="661" href="#661">661</a>       addAttribute(code);
<a name="662" href="#662">662</a>     }
<a name="663" href="#663">663</a> 
<a name="664" href="#664">664</a>     <a href="../../../../org/apache/bcel/classfile/ExceptionTable.html">ExceptionTable</a> et = <b>null</b>;
<a name="665" href="#665">665</a>     
<a name="666" href="#666">666</a>     <b>if</b>(throws_vec.size() &gt; 0)
<a name="667" href="#667">667</a>       addAttribute(et = getExceptionTable(cp)); <font color="#329900"><i>// Add `Exceptions' if there are "throws" clauses</font></i>
<a name="668" href="#668">668</a> 
<a name="669" href="#669">669</a>     <a href="../../../../org/apache/bcel/classfile/Method.html">Method</a> m = <b>new</b> <a href="../../../../org/apache/bcel/classfile/Method.html">Method</a>(access_flags, name_index, signature_index,
<a name="670" href="#670">670</a> 			  getAttributes(), cp.getConstantPool());
<a name="671" href="#671">671</a> 
<a name="672" href="#672">672</a>     <font color="#329900"><i>// Undo effects of adding attributes</font></i>
<a name="673" href="#673">673</a>     <b>if</b>(lvt != <b>null</b>)  removeCodeAttribute(lvt);
<a name="674" href="#674">674</a>     <b>if</b>(lnt != <b>null</b>)  removeCodeAttribute(lnt);
<a name="675" href="#675">675</a>     <b>if</b>(code != <b>null</b>) removeAttribute(code);
<a name="676" href="#676">676</a>     <b>if</b>(et != <b>null</b>)   removeAttribute(et);
<a name="677" href="#677">677</a> 
<a name="678" href="#678">678</a>     <b>return</b> m;
<a name="679" href="#679">679</a>   }
<a name="680" href="#680">680</a> 
<a name="681" href="#681">681</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="682" href="#682">682</a> <font color="#AA0000"><i>   * Remove all NOPs from the instruction list (if possible) and update every</font></i>
<a name="683" href="#683">683</a> <font color="#AA0000"><i>   * object refering to them, i.e., branch instructions, local variables and</font></i>
<a name="684" href="#684">684</a> <font color="#AA0000"><i>   * exception handlers.</font></i>
<a name="685" href="#685">685</a> <font color="#AA0000"><i>   */</font></i>
<a name="686" href="#686">686</a>   <b>public</b> <b>void</b> removeNOPs() {
<a name="687" href="#687">687</a>     <b>if</b>(il != <b>null</b>) {
<a name="688" href="#688">688</a>       <a href="../../../../org/apache/bcel/generic/InstructionHandle.html">InstructionHandle</a> next;
<a name="689" href="#689">689</a>       <font color="#329900"><i>/*<font color="#329900"><i> Check branch instructions.</font></i></font></i>
<a name="690" href="#690">690</a> <font color="#329900"><i>       */</font></i>
<a name="691" href="#691">691</a>       <b>for</b>(<a href="../../../../org/apache/bcel/generic/InstructionHandle.html">InstructionHandle</a> ih = il.getStart(); ih != <b>null</b>; ih = next) {
<a name="692" href="#692">692</a> 	next = ih.next;
<a name="693" href="#693">693</a> 
<a name="694" href="#694">694</a> 	<b>if</b>((next != <b>null</b>) && (ih.getInstruction() instanceof NOP)) {
<a name="695" href="#695">695</a> 	  <b>try</b> {
<a name="696" href="#696">696</a> 	    il.delete(ih);
<a name="697" href="#697">697</a> 	  } <b>catch</b>(TargetLostException e) {
<a name="698" href="#698">698</a> 	    InstructionHandle[] targets = e.getTargets();
<a name="699" href="#699">699</a> 	    
<a name="700" href="#700">700</a> 	    <b>for</b>(<b>int</b> i=0; i &lt; targets.length; i++) {
<a name="701" href="#701">701</a> 	      InstructionTargeter[] targeters = targets[i].getTargeters();
<a name="702" href="#702">702</a> 	      
<a name="703" href="#703">703</a> 	      <b>for</b>(<b>int</b> j=0; j &lt; targeters.length; j++)
<a name="704" href="#704">704</a> 		targeters[j].updateTarget(targets[i], next);
<a name="705" href="#705">705</a> 	    }
<a name="706" href="#706">706</a> 	  }
<a name="707" href="#707">707</a> 	}
<a name="708" href="#708">708</a>       }
<a name="709" href="#709">709</a>     }
<a name="710" href="#710">710</a>   }
<a name="711" href="#711">711</a> 
<a name="712" href="#712">712</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="713" href="#713">713</a> <font color="#AA0000"><i>   * Set maximum number of local variables.</font></i>
<a name="714" href="#714">714</a> <font color="#AA0000"><i>   */</font></i>
<a name="715" href="#715">715</a>   <b>public</b> <b>void</b>   setMaxLocals(<b>int</b> m)  { max_locals = m; }
<a name="716" href="#716">716</a>   <b>public</b> <b>int</b>    getMaxLocals()       { <b>return</b> max_locals; }
<a name="717" href="#717">717</a> 
<a name="718" href="#718">718</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="719" href="#719">719</a> <font color="#AA0000"><i>   * Set maximum stack size for this method.</font></i>
<a name="720" href="#720">720</a> <font color="#AA0000"><i>   */</font></i>
<a name="721" href="#721">721</a>   <b>public</b> <b>void</b>   setMaxStack(<b>int</b> m)  { max_stack = m; }
<a name="722" href="#722">722</a>   <b>public</b> <b>int</b>    getMaxStack()       { <b>return</b> max_stack; }
<a name="723" href="#723">723</a> 
<a name="724" href="#724">724</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>* @return class that contains this method</font></i></font></i>
<a name="725" href="#725">725</a> <font color="#AA0000"><i>   */</font></i>
<a name="726" href="#726">726</a>   <b>public</b> String getClassName()                     { <b>return</b> <b>class</b>_name; }
<a name="727" href="#727">727</a>   <b>public</b> <b>void</b>   setClassName(String <b>class</b>_name)    { <b>this</b>.<b>class</b>_name = <b>class</b>_name; }
<a name="728" href="#728">728</a> 
<a name="729" href="#729">729</a>   <b>public</b> <b>void</b>   setReturnType(Type <b>return</b>_type)    { setType(<b>return</b>_type); }
<a name="730" href="#730">730</a>   <b>public</b> <a href="../../../../org/apache/bcel/generic/Type.html">Type</a>   getReturnType()                    { <b>return</b> getType(); }
<a name="731" href="#731">731</a> 
<a name="732" href="#732">732</a>   <b>public</b> <b>void</b>   setArgumentTypes(Type[] arg_types)  { <b>this</b>.arg_types = arg_types; }
<a name="733" href="#733">733</a>   <b>public</b> <a href="../../../../org/apache/bcel/generic/Type.html">Type</a>[] getArgumentTypes()                  { <b>return</b> (Type[])arg_types.clone(); }
<a name="734" href="#734">734</a>   <b>public</b> <b>void</b>   setArgumentType(<b>int</b> i, Type type)       { arg_types[i] = type; }
<a name="735" href="#735">735</a>   <b>public</b> <a href="../../../../org/apache/bcel/generic/Type.html">Type</a>   getArgumentType(<b>int</b> i)                  { <b>return</b> arg_types[i]; }
<a name="736" href="#736">736</a> 
<a name="737" href="#737">737</a>   <b>public</b> <b>void</b>     setArgumentNames(String[] arg_names) { <b>this</b>.arg_names = arg_names; }
<a name="738" href="#738">738</a>   <b>public</b> String[] getArgumentNames()                   { <b>return</b> (String[])arg_names.clone(); }
<a name="739" href="#739">739</a>   <b>public</b> <b>void</b>     setArgumentName(<b>int</b> i, String name)     { arg_names[i] = name; }
<a name="740" href="#740">740</a>   <b>public</b> String   getArgumentName(<b>int</b> i)                  { <b>return</b> arg_names[i]; }
<a name="741" href="#741">741</a> 
<a name="742" href="#742">742</a>   <b>public</b> <a href="../../../../org/apache/bcel/generic/InstructionList.html">InstructionList</a> getInstructionList()                    { <b>return</b> il; }
<a name="743" href="#743">743</a>   <b>public</b> <b>void</b>            setInstructionList(InstructionList il)  { <b>this</b>.il = il; }
<a name="744" href="#744">744</a> 
<a name="745" href="#745">745</a>   <b>public</b> String getSignature() { 
<a name="746" href="#746">746</a>     <b>return</b> Type.getMethodSignature(type, arg_types);
<a name="747" href="#747">747</a>   }
<a name="748" href="#748">748</a> 
<a name="749" href="#749">749</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="750" href="#750">750</a> <font color="#AA0000"><i>   * Computes max. stack size by performing control flow analysis.</font></i>
<a name="751" href="#751">751</a> <font color="#AA0000"><i>   */</font></i>
<a name="752" href="#752">752</a>   <b>public</b> <b>void</b> setMaxStack() {
<a name="753" href="#753">753</a>     <b>if</b>(il != <b>null</b>)
<a name="754" href="#754">754</a>       max_stack = getMaxStack(cp, il, getExceptionHandlers());
<a name="755" href="#755">755</a>     <b>else</b>
<a name="756" href="#756">756</a>       max_stack = 0;
<a name="757" href="#757">757</a>   }
<a name="758" href="#758">758</a> 
<a name="759" href="#759">759</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="760" href="#760">760</a> <font color="#AA0000"><i>   * Compute maximum number of local variables.</font></i>
<a name="761" href="#761">761</a> <font color="#AA0000"><i>   */</font></i>
<a name="762" href="#762">762</a>   <b>public</b> <b>void</b> setMaxLocals() {
<a name="763" href="#763">763</a>     <b>if</b>(il != <b>null</b>) {
<a name="764" href="#764">764</a>       <b>int</b> max = isStatic()? 0 : 1;
<a name="765" href="#765">765</a> 
<a name="766" href="#766">766</a>       <b>if</b>(arg_types != <b>null</b>)
<a name="767" href="#767">767</a> 	<b>for</b>(<b>int</b> i=0; i &lt; arg_types.length; i++)
<a name="768" href="#768">768</a> 	  max += arg_types[i].getSize();
<a name="769" href="#769">769</a> 
<a name="770" href="#770">770</a>       <b>for</b>(<a href="../../../../org/apache/bcel/generic/InstructionHandle.html">InstructionHandle</a> ih = il.getStart(); ih != <b>null</b>; ih = ih.getNext()) {
<a name="771" href="#771">771</a> 	Instruction ins = ih.getInstruction();
<a name="772" href="#772">772</a> 
<a name="773" href="#773">773</a> 	<b>if</b>((ins instanceof LocalVariableInstruction) ||
<a name="774" href="#774">774</a> 	   (ins instanceof RET) || (ins instanceof IINC))
<a name="775" href="#775">775</a> 	{
<a name="776" href="#776">776</a> 	  <b>int</b> index = ((IndexedInstruction)ins).getIndex() +
<a name="777" href="#777">777</a> 	    ((TypedInstruction)ins).getType(cp).getSize();
<a name="778" href="#778">778</a> 
<a name="779" href="#779">779</a> 	  <b>if</b>(index &gt; max)
<a name="780" href="#780">780</a> 	    max = index;
<a name="781" href="#781">781</a> 	}
<a name="782" href="#782">782</a>       }
<a name="783" href="#783">783</a> 
<a name="784" href="#784">784</a>       max_locals = max;
<a name="785" href="#785">785</a>     } <b>else</b>
<a name="786" href="#786">786</a>       max_locals = 0;
<a name="787" href="#787">787</a>   }
<a name="788" href="#788">788</a> 
<a name="789" href="#789">789</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>* Do not/Do produce attributes code attributesLineNumberTable and</font></i></font></i>
<a name="790" href="#790">790</a> <font color="#AA0000"><i>   * LocalVariableTable, like javac -O</font></i>
<a name="791" href="#791">791</a> <font color="#AA0000"><i>   */</font></i>
<a name="792" href="#792">792</a>   <b>public</b> <b>void</b> stripAttributes(<b>boolean</b> flag) { strip_attributes = flag; }
<a name="793" href="#793">793</a> 
<a name="794" href="#794">794</a>   <b>static</b> <b>final</b> <b>class</b> BranchTarget {
<a name="795" href="#795">795</a>     <a href="../../../../org/apache/bcel/generic/InstructionHandle.html">InstructionHandle</a> target;
<a name="796" href="#796">796</a>     <b>int</b>               stackDepth;
<a name="797" href="#797">797</a> 		
<a name="798" href="#798">798</a>     BranchTarget(<a href="../../../../org/apache/bcel/generic/InstructionHandle.html">InstructionHandle</a> target, <b>int</b> stackDepth) {
<a name="799" href="#799">799</a>       <b>this</b>.target = target;
<a name="800" href="#800">800</a>       <b>this</b>.stackDepth = stackDepth;
<a name="801" href="#801">801</a>     }
<a name="802" href="#802">802</a>   }
<a name="803" href="#803">803</a> 	
<a name="804" href="#804">804</a>   <b>static</b> <b>final</b> <b>class</b> BranchStack {
<a name="805" href="#805">805</a>     Stack     branchTargets  = <b>new</b> Stack();
<a name="806" href="#806">806</a>     Hashtable visitedTargets = <b>new</b> Hashtable();
<a name="807" href="#807">807</a> 
<a name="808" href="#808">808</a>     <b>public</b> <b>void</b> push(<a href="../../../../org/apache/bcel/generic/InstructionHandle.html">InstructionHandle</a> target, <b>int</b> stackDepth) {
<a name="809" href="#809">809</a>       <b>if</b>(visited(target))
<a name="810" href="#810">810</a> 	<b>return</b>;
<a name="811" href="#811">811</a> 
<a name="812" href="#812">812</a>       branchTargets.push(visit(target, stackDepth));
<a name="813" href="#813">813</a>     }
<a name="814" href="#814">814</a> 		
<a name="815" href="#815">815</a>     <b>public</b> BranchTarget pop() {
<a name="816" href="#816">816</a>       <b>if</b>(!branchTargets.empty()) {
<a name="817" href="#817">817</a> 	BranchTarget bt = (BranchTarget) branchTargets.pop();
<a name="818" href="#818">818</a> 	<b>return</b> bt;
<a name="819" href="#819">819</a>       }
<a name="820" href="#820">820</a> 
<a name="821" href="#821">821</a>       <b>return</b> <b>null</b>;
<a name="822" href="#822">822</a>     }
<a name="823" href="#823">823</a> 		
<a name="824" href="#824">824</a>     <b>private</b> <b>final</b> BranchTarget visit(<a href="../../../../org/apache/bcel/generic/InstructionHandle.html">InstructionHandle</a> target, <b>int</b> stackDepth) {
<a name="825" href="#825">825</a>       BranchTarget bt = <b>new</b> BranchTarget(target, stackDepth);
<a name="826" href="#826">826</a>       visitedTargets.put(target, bt);
<a name="827" href="#827">827</a> 
<a name="828" href="#828">828</a>       <b>return</b> bt;
<a name="829" href="#829">829</a>     }
<a name="830" href="#830">830</a> 		
<a name="831" href="#831">831</a>     <b>private</b> <b>final</b> <b>boolean</b> visited(<a href="../../../../org/apache/bcel/generic/InstructionHandle.html">InstructionHandle</a> target) {
<a name="832" href="#832">832</a>       <b>return</b> (visitedTargets.get(target) != <b>null</b>);
<a name="833" href="#833">833</a>     }
<a name="834" href="#834">834</a>   }
<a name="835" href="#835">835</a> 
<a name="836" href="#836">836</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="837" href="#837">837</a> <font color="#AA0000"><i>   * Computes stack usage of an instruction list by performing control flow analysis.</font></i>
<a name="838" href="#838">838</a> <font color="#AA0000"><i>   *</font></i>
<a name="839" href="#839">839</a> <font color="#AA0000"><i>   * @return maximum stack depth used by method</font></i>
<a name="840" href="#840">840</a> <font color="#AA0000"><i>   */</font></i>
<a name="841" href="#841">841</a>   <b>public</b> <b>static</b> <b>int</b> getMaxStack(<a href="../../../../org/apache/bcel/generic/ConstantPoolGen.html">ConstantPoolGen</a> cp, <a href="../../../../org/apache/bcel/generic/InstructionList.html">InstructionList</a> il, <a href="../../../../org/apache/bcel/generic/CodeExceptionGen.html">CodeExceptionGen</a>[] et) {
<a name="842" href="#842">842</a>     BranchStack branchTargets = <b>new</b> BranchStack();
<a name="843" href="#843">843</a>     	
<a name="844" href="#844">844</a>     <font color="#329900"><i>/*<font color="#329900"><i> Initially, populate the branch stack with the exception</font></i></font></i>
<a name="845" href="#845">845</a> <font color="#329900"><i>     * handlers, because these aren't (necessarily) branched to</font></i>
<a name="846" href="#846">846</a> <font color="#329900"><i>     * explicitly. in each case, the stack will have depth 1,</font></i>
<a name="847" href="#847">847</a> <font color="#329900"><i>     * containing the exception object.</font></i>
<a name="848" href="#848">848</a> <font color="#329900"><i>     */</font></i>
<a name="849" href="#849">849</a>     <b>for</b> (<b>int</b> i = 0; i &lt; et.length; i++) {
<a name="850" href="#850">850</a>       <a href="../../../../org/apache/bcel/generic/InstructionHandle.html">InstructionHandle</a> handler_pc = et[i].getHandlerPC();
<a name="851" href="#851">851</a>       <b>if</b> (handler_pc != <b>null</b>)
<a name="852" href="#852">852</a> 	branchTargets.push(handler_pc, 1);
<a name="853" href="#853">853</a>     }
<a name="854" href="#854">854</a>     	
<a name="855" href="#855">855</a>     <b>int</b>               stackDepth = 0, maxStackDepth = 0;
<a name="856" href="#856">856</a>     <a href="../../../../org/apache/bcel/generic/InstructionHandle.html">InstructionHandle</a> ih         = il.getStart();
<a name="857" href="#857">857</a> 
<a name="858" href="#858">858</a>     <b>while</b>(ih != <b>null</b>) {
<a name="859" href="#859">859</a>       <a href="../../../../org/apache/bcel/generic/Instruction.html">Instruction</a> instruction = ih.getInstruction();
<a name="860" href="#860">860</a>       <b>short</b> opcode = instruction.getOpcode();
<a name="861" href="#861">861</a>       <b>int</b> delta = instruction.produceStack(cp) - instruction.consumeStack(cp);
<a name="862" href="#862">862</a> 
<a name="863" href="#863">863</a>       stackDepth += delta;
<a name="864" href="#864">864</a>       <b>if</b>(stackDepth &gt; maxStackDepth)
<a name="865" href="#865">865</a> 	maxStackDepth = stackDepth;
<a name="866" href="#866">866</a> 
<a name="867" href="#867">867</a>       <font color="#329900"><i>// choose the next instruction based on whether current is a branch.</font></i>
<a name="868" href="#868">868</a>       <b>if</b>(instruction instanceof <a href="../../../../org/apache/bcel/generic/BranchInstruction.html">BranchInstruction</a>) {
<a name="869" href="#869">869</a> 	BranchInstruction branch = (BranchInstruction) instruction;
<a name="870" href="#870">870</a> 	<b>if</b>(instruction instanceof <a href="../../../../org/apache/bcel/generic/Select.html">Select</a>) {
<a name="871" href="#871">871</a> 	  <font color="#329900"><i>// explore all of the select's targets. the default target is handled below.</font></i>
<a name="872" href="#872">872</a> 	  Select select = (Select) branch;
<a name="873" href="#873">873</a> 	  InstructionHandle[] targets = select.getTargets();
<a name="874" href="#874">874</a> 	  <b>for</b> (<b>int</b> i = 0; i &lt; targets.length; i++)
<a name="875" href="#875">875</a> 	    branchTargets.push(targets[i], stackDepth);
<a name="876" href="#876">876</a> 	  <font color="#329900"><i>// nothing to fall through to.</font></i>
<a name="877" href="#877">877</a> 	  ih = <b>null</b>;
<a name="878" href="#878">878</a> 	} <b>else</b> <b>if</b>(!(branch instanceof IfInstruction)) {
<a name="879" href="#879">879</a> 	  <font color="#329900"><i>// if an instruction that comes back to following PC,</font></i>
<a name="880" href="#880">880</a> 	  <font color="#329900"><i>// push next instruction, with stack depth reduced by 1.</font></i>
<a name="881" href="#881">881</a> 	  <b>if</b>(opcode == Constants.JSR || opcode == Constants.JSR_W)
<a name="882" href="#882">882</a> 	    branchTargets.push(ih.getNext(), stackDepth - 1);
<a name="883" href="#883">883</a> 	  ih = <b>null</b>;
<a name="884" href="#884">884</a> 	}
<a name="885" href="#885">885</a> 	<font color="#329900"><i>// for all branches, the target of the branch is pushed on the branch stack.</font></i>
<a name="886" href="#886">886</a> 	<font color="#329900"><i>// conditional branches have a fall through case, selects don't, and</font></i>
<a name="887" href="#887">887</a> 	<font color="#329900"><i>// jsr/jsr_w return to the next instruction.</font></i>
<a name="888" href="#888">888</a> 	branchTargets.push(branch.getTarget(), stackDepth);
<a name="889" href="#889">889</a>       } <b>else</b> {
<a name="890" href="#890">890</a> 	<font color="#329900"><i>// check for instructions that terminate the method.</font></i>
<a name="891" href="#891">891</a> 	<b>if</b>(opcode == Constants.ATHROW || opcode == Constants.RET ||
<a name="892" href="#892">892</a> 	   (opcode &gt;= Constants.IRETURN && opcode &lt;= Constants.RETURN))
<a name="893" href="#893">893</a> 	  ih = <b>null</b>;
<a name="894" href="#894">894</a>       }
<a name="895" href="#895">895</a>       <font color="#329900"><i>// normal case, go to the next instruction.</font></i>
<a name="896" href="#896">896</a>       <b>if</b>(ih != <b>null</b>)
<a name="897" href="#897">897</a> 	ih = ih.getNext();
<a name="898" href="#898">898</a>       <font color="#329900"><i>// if we have no more instructions, see if there are any deferred branches to explore.</font></i>
<a name="899" href="#899">899</a>       <b>if</b>(ih == <b>null</b>) {
<a name="900" href="#900">900</a> 	BranchTarget bt = branchTargets.pop();
<a name="901" href="#901">901</a> 	<b>if</b> (bt != <b>null</b>) {
<a name="902" href="#902">902</a> 	  ih = bt.target;
<a name="903" href="#903">903</a> 	  stackDepth = bt.stackDepth;
<a name="904" href="#904">904</a> 	}
<a name="905" href="#905">905</a>       }
<a name="906" href="#906">906</a>     }
<a name="907" href="#907">907</a> 
<a name="908" href="#908">908</a>     <b>return</b> maxStackDepth;
<a name="909" href="#909">909</a>   }
<a name="910" href="#910">910</a> 
<a name="911" href="#911">911</a>   <b>private</b> ArrayList observers;
<a name="912" href="#912">912</a> 
<a name="913" href="#913">913</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>* Add observer for this object.</font></i></font></i>
<a name="914" href="#914">914</a> <font color="#AA0000"><i>   */</font></i>
<a name="915" href="#915">915</a>   <b>public</b> <b>void</b> addObserver(<a href="../../../../org/apache/bcel/generic/MethodObserver.html">MethodObserver</a> o) {
<a name="916" href="#916">916</a>     <b>if</b>(observers == <b>null</b>)
<a name="917" href="#917">917</a>       observers = <b>new</b> ArrayList();
<a name="918" href="#918">918</a> 
<a name="919" href="#919">919</a>     observers.add(o);
<a name="920" href="#920">920</a>   }
<a name="921" href="#921">921</a> 
<a name="922" href="#922">922</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>* Remove observer for this object.</font></i></font></i>
<a name="923" href="#923">923</a> <font color="#AA0000"><i>   */</font></i>
<a name="924" href="#924">924</a>   <b>public</b> <b>void</b> removeObserver(<a href="../../../../org/apache/bcel/generic/MethodObserver.html">MethodObserver</a> o) {
<a name="925" href="#925">925</a>     <b>if</b>(observers != <b>null</b>)
<a name="926" href="#926">926</a>       observers.remove(o);
<a name="927" href="#927">927</a>   }
<a name="928" href="#928">928</a> 
<a name="929" href="#929">929</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>* Call notify() method on all observers. This method is not called</font></i></font></i>
<a name="930" href="#930">930</a> <font color="#AA0000"><i>   * automatically whenever the state has changed, but has to be</font></i>
<a name="931" href="#931">931</a> <font color="#AA0000"><i>   * called by the user after he has finished editing the object.</font></i>
<a name="932" href="#932">932</a> <font color="#AA0000"><i>   */</font></i>
<a name="933" href="#933">933</a>   <b>public</b> <b>void</b> update() {
<a name="934" href="#934">934</a>     <b>if</b>(observers != <b>null</b>)
<a name="935" href="#935">935</a>       <b>for</b>(Iterator e = observers.iterator(); e.hasNext(); )
<a name="936" href="#936">936</a> 	((MethodObserver)e.next()).notify(<b>this</b>);
<a name="937" href="#937">937</a>   }
<a name="938" href="#938">938</a> 
<a name="939" href="#939">939</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="940" href="#940">940</a> <font color="#AA0000"><i>   * Return string representation close to declaration format,</font></i>
<a name="941" href="#941">941</a> <font color="#AA0000"><i>   * `public static void main(String[]) throws IOException', e.g.</font></i>
<a name="942" href="#942">942</a> <font color="#AA0000"><i>   *</font></i>
<a name="943" href="#943">943</a> <font color="#AA0000"><i>   * @return String representation of the method.</font></i>
<a name="944" href="#944">944</a> <font color="#AA0000"><i>   */</font></i>
<a name="945" href="#945">945</a>   <b>public</b> <b>final</b> String toString() {
<a name="946" href="#946">946</a>     String access    = Utility.accessToString(access_flags);
<a name="947" href="#947">947</a>     String signature = Type.getMethodSignature(type, arg_types);
<a name="948" href="#948">948</a> 
<a name="949" href="#949">949</a>     signature = Utility.methodSignatureToString(signature, name, access,
<a name="950" href="#950">950</a> 						<b>true</b>, getLocalVariableTable(cp));
<a name="951" href="#951">951</a> 
<a name="952" href="#952">952</a>     StringBuffer buf = <b>new</b> StringBuffer(signature);
<a name="953" href="#953">953</a> 
<a name="954" href="#954">954</a>     <b>if</b>(throws_vec.size() &gt; 0) {
<a name="955" href="#955">955</a>       <b>for</b>(Iterator e = throws_vec.iterator(); e.hasNext(); )
<a name="956" href="#956">956</a> 	buf.append(<font color="#000099">"\n\t\tthrows "</font> + e.next());
<a name="957" href="#957">957</a>     }
<a name="958" href="#958">958</a>  
<a name="959" href="#959">959</a>     <b>return</b> buf.toString();
<a name="960" href="#960">960</a>   }
<a name="961" href="#961">961</a> 
<a name="962" href="#962">962</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>* @return deep copy of this method</font></i></font></i>
<a name="963" href="#963">963</a> <font color="#AA0000"><i>   */</font></i>
<a name="964" href="#964">964</a>   <b>public</b> <a href="../../../../org/apache/bcel/generic/MethodGen.html">MethodGen</a> copy(String <b>class</b>_name, <a href="../../../../org/apache/bcel/generic/ConstantPoolGen.html">ConstantPoolGen</a> cp) {
<a name="965" href="#965">965</a>     <a href="../../../../org/apache/bcel/classfile/Method.html">Method</a>    m  = ((MethodGen)clone()).getMethod();
<a name="966" href="#966">966</a>     <a href="../../../../org/apache/bcel/generic/MethodGen.html">MethodGen</a> mg = <b>new</b> <a href="../../../../org/apache/bcel/generic/MethodGen.html">MethodGen</a>(m, <b>class</b>_name, <b>this</b>.cp);
<a name="967" href="#967">967</a> 
<a name="968" href="#968">968</a>     <b>if</b>(<b>this</b>.cp != cp) {
<a name="969" href="#969">969</a>       mg.setConstantPool(cp);
<a name="970" href="#970">970</a>       mg.getInstructionList().replaceConstantPool(<b>this</b>.cp, cp);
<a name="971" href="#971">971</a>     }
<a name="972" href="#972">972</a> 
<a name="973" href="#973">973</a>     <b>return</b> mg;
<a name="974" href="#974">974</a>   }          
<a name="975" href="#975">975</a> }
</pre>
<hr><center>This page was automatically generated by <a href="http://jakarta.apache.org/turbine/maven">Maven</a></center></body>
</html>

