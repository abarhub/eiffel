<html>
<body bgcolor="white">
<pre>
<table bgcolor="#FFFFCC" cellpadding="0" cellspacing="0" border="0" width="100%"><a href="../../../../apidocs/org/apache/bcel/Repository.html">View Javadoc</a></table>
<a name="1" href="#1">1</a>   <b>package</b> <a href="../../../org/apache/bcel/package-summary.html">org.apache.bcel</a>;
<a name="2" href="#2">2</a>   
<a name="3" href="#3">3</a>   <font color="#329900"><i>/*<font color="#329900"><i> ====================================================================</font></i></font></i>
<a name="4" href="#4">4</a>   <font color="#329900"><i> * The Apache Software License, Version 1.1</font></i>
<a name="5" href="#5">5</a>   <font color="#329900"><i> *</font></i>
<a name="6" href="#6">6</a>   <font color="#329900"><i> * Copyright (c) 2001 The Apache Software Foundation.  All rights</font></i>
<a name="7" href="#7">7</a>   <font color="#329900"><i> * reserved.</font></i>
<a name="8" href="#8">8</a>   <font color="#329900"><i> *</font></i>
<a name="9" href="#9">9</a>   <font color="#329900"><i> * Redistribution and use in source and binary forms, with or without</font></i>
<a name="10" href="#10">10</a>  <font color="#329900"><i> * modification, are permitted provided that the following conditions</font></i>
<a name="11" href="#11">11</a>  <font color="#329900"><i> * are met:</font></i>
<a name="12" href="#12">12</a>  <font color="#329900"><i> *</font></i>
<a name="13" href="#13">13</a>  <font color="#329900"><i> * 1. Redistributions of source code must retain the above copyright</font></i>
<a name="14" href="#14">14</a>  <font color="#329900"><i> *    notice, this list of conditions and the following disclaimer.</font></i>
<a name="15" href="#15">15</a>  <font color="#329900"><i> *</font></i>
<a name="16" href="#16">16</a>  <font color="#329900"><i> * 2. Redistributions in binary form must reproduce the above copyright</font></i>
<a name="17" href="#17">17</a>  <font color="#329900"><i> *    notice, this list of conditions and the following disclaimer in</font></i>
<a name="18" href="#18">18</a>  <font color="#329900"><i> *    the documentation and/or other materials provided with the</font></i>
<a name="19" href="#19">19</a>  <font color="#329900"><i> *    distribution.</font></i>
<a name="20" href="#20">20</a>  <font color="#329900"><i> *</font></i>
<a name="21" href="#21">21</a>  <font color="#329900"><i> * 3. The end-user documentation included with the redistribution,</font></i>
<a name="22" href="#22">22</a>  <font color="#329900"><i> *    if any, must include the following acknowledgment:</font></i>
<a name="23" href="#23">23</a>  <font color="#329900"><i> *       "This product includes software developed by the</font></i>
<a name="24" href="#24">24</a>  <font color="#329900"><i> *        Apache Software Foundation (<a href="http://www.apache.org/" target="alexandria_uri">http://www.apache.org/</a>)."</font></i>
<a name="25" href="#25">25</a>  <font color="#329900"><i> *    Alternately, this acknowledgment may appear in the software itself,</font></i>
<a name="26" href="#26">26</a>  <font color="#329900"><i> *    if and wherever such third-party acknowledgments normally appear.</font></i>
<a name="27" href="#27">27</a>  <font color="#329900"><i> *</font></i>
<a name="28" href="#28">28</a>  <font color="#329900"><i> * 4. The names "Apache" and "Apache Software Foundation" and</font></i>
<a name="29" href="#29">29</a>  <font color="#329900"><i> *    "Apache BCEL" must not be used to endorse or promote products</font></i>
<a name="30" href="#30">30</a>  <font color="#329900"><i> *    derived from this software without prior written permission. For</font></i>
<a name="31" href="#31">31</a>  <font color="#329900"><i> *    written permission, please contact apache@apache.org.</font></i>
<a name="32" href="#32">32</a>  <font color="#329900"><i> *</font></i>
<a name="33" href="#33">33</a>  <font color="#329900"><i> * 5. Products derived from this software may not be called "Apache",</font></i>
<a name="34" href="#34">34</a>  <font color="#329900"><i> *    "Apache BCEL", nor may "Apache" appear in their name, without</font></i>
<a name="35" href="#35">35</a>  <font color="#329900"><i> *    prior written permission of the Apache Software Foundation.</font></i>
<a name="36" href="#36">36</a>  <font color="#329900"><i> *</font></i>
<a name="37" href="#37">37</a>  <font color="#329900"><i> * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED</font></i>
<a name="38" href="#38">38</a>  <font color="#329900"><i> * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES</font></i>
<a name="39" href="#39">39</a>  <font color="#329900"><i> * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</font></i>
<a name="40" href="#40">40</a>  <font color="#329900"><i> * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR</font></i>
<a name="41" href="#41">41</a>  <font color="#329900"><i> * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</font></i>
<a name="42" href="#42">42</a>  <font color="#329900"><i> * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</font></i>
<a name="43" href="#43">43</a>  <font color="#329900"><i> * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF</font></i>
<a name="44" href="#44">44</a>  <font color="#329900"><i> * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND</font></i>
<a name="45" href="#45">45</a>  <font color="#329900"><i> * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</font></i>
<a name="46" href="#46">46</a>  <font color="#329900"><i> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT</font></i>
<a name="47" href="#47">47</a>  <font color="#329900"><i> * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF</font></i>
<a name="48" href="#48">48</a>  <font color="#329900"><i> * SUCH DAMAGE.</font></i>
<a name="49" href="#49">49</a>  <font color="#329900"><i> * ====================================================================</font></i>
<a name="50" href="#50">50</a>  <font color="#329900"><i> *</font></i>
<a name="51" href="#51">51</a>  <font color="#329900"><i> * This software consists of voluntary contributions made by many</font></i>
<a name="52" href="#52">52</a>  <font color="#329900"><i> * individuals on behalf of the Apache Software Foundation.  For more</font></i>
<a name="53" href="#53">53</a>  <font color="#329900"><i> * information on the Apache Software Foundation, please see</font></i>
<a name="54" href="#54">54</a>  <font color="#329900"><i> * &lt;<a href="http://www.apache.org/&gt" target="alexandria_uri">http://www.apache.org/&gt</a>;.</font></i>
<a name="55" href="#55">55</a>  <font color="#329900"><i> */</font></i>
<a name="56" href="#56">56</a>  
<a name="57" href="#57">57</a>  <b>import</b> org.apache.bcel.classfile.JavaClass;
<a name="58" href="#58">58</a>  <b>import</b> <a href="../../../org/apache/bcel/util/package-summary.html">org.apache.bcel.util</a>.*;
<a name="59" href="#59">59</a>  <b>import</b> java.io.*;
<a name="60" href="#60">60</a>  
<a name="61" href="#61">61</a>  <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="62" href="#62">62</a>  <font color="#AA0000"><i> * The repository maintains informations about class interdependencies, e.g.,</font></i>
<a name="63" href="#63">63</a>  <font color="#AA0000"><i> * whether a class is a sub-class of another. Delegates actual class loading</font></i>
<a name="64" href="#64">64</a>  <font color="#AA0000"><i> * to SyntheticRepository with current class path by default.</font></i>
<a name="65" href="#65">65</a>  <font color="#AA0000"><i> *</font></i>
<a name="66" href="#66">66</a>  <font color="#AA0000"><i> * @see org.apache.bcel.util.Repository</font></i>
<a name="67" href="#67">67</a>  <font color="#AA0000"><i> * @see org.apache.bcel.util.SyntheticRepository</font></i>
<a name="68" href="#68">68</a>  <font color="#AA0000"><i> *</font></i>
<a name="69" href="#69">69</a>  <font color="#AA0000"><i> * @version $Id: Repository.java,v 1.11 2002/10/11 20:34:47 mdahm Exp $</font></i>
<a name="70" href="#70">70</a>  <font color="#AA0000"><i> * @author &lt;A HREF="<a href="mailto:markus.dahm@berlin.de" target="alexandria_uri">mailto:markus.dahm@berlin.de</a>"&gt;M. Dahm&lt;/A&gt;</font></i>
<a name="71" href="#71">71</a>  <font color="#AA0000"><i> */</font></i>
<a name="72" href="#72">72</a>  <b>public</b> <b>abstract</b> <b>class</b> <a href="../../../org/apache/bcel/util/Repository.html">Repository</a> {
<a name="73" href="#73">73</a>    <b>private</b> <b>static</b> org.apache.bcel.util.Repository _repository =
<a name="74" href="#74">74</a>      SyntheticRepository.getInstance();
<a name="75" href="#75">75</a>  
<a name="76" href="#76">76</a>    <font color="#AA0000"><i>/**<font color="#AA0000"><i>* @return currently used repository instance</font></i></font></i>
<a name="77" href="#77">77</a>  <font color="#AA0000"><i>   */</font></i>
<a name="78" href="#78">78</a>    <b>public</b> <b>static</b> org.apache.bcel.util.Repository getRepository() {
<a name="79" href="#79">79</a>      <b>return</b> _repository;
<a name="80" href="#80">80</a>    }
<a name="81" href="#81">81</a>  
<a name="82" href="#82">82</a>    <font color="#AA0000"><i>/**<font color="#AA0000"><i>* Set repository instance to be used for class loading</font></i></font></i>
<a name="83" href="#83">83</a>  <font color="#AA0000"><i>   */</font></i>
<a name="84" href="#84">84</a>    <b>public</b> <b>static</b> <b>void</b> setRepository(org.apache.bcel.util.Repository rep) {
<a name="85" href="#85">85</a>      _repository = rep;
<a name="86" href="#86">86</a>    }
<a name="87" href="#87">87</a>  
<a name="88" href="#88">88</a>    <font color="#AA0000"><i>/**<font color="#AA0000"><i>* Lookup class somewhere found on your CLASSPATH, or whereever the</font></i></font></i>
<a name="89" href="#89">89</a>  <font color="#AA0000"><i>   * repository instance looks for it.</font></i>
<a name="90" href="#90">90</a>  <font color="#AA0000"><i>   *</font></i>
<a name="91" href="#91">91</a>  <font color="#AA0000"><i>   * @return class object for given fully qualified class name, or null</font></i>
<a name="92" href="#92">92</a>  <font color="#AA0000"><i>   * if the class could not be found or parsed correctly</font></i>
<a name="93" href="#93">93</a>  <font color="#AA0000"><i>   */</font></i>
<a name="94" href="#94">94</a>    <b>public</b> <b>static</b> <a href="../../../org/apache/bcel/classfile/JavaClass.html">JavaClass</a> lookupClass(String <b>class</b>_name) {
<a name="95" href="#95">95</a>      <b>try</b> {
<a name="96" href="#96">96</a>        <a href="../../../org/apache/bcel/classfile/JavaClass.html">JavaClass</a> clazz = _repository.findClass(<b>class</b>_name);
<a name="97" href="#97">97</a>  
<a name="98" href="#98">98</a>        <b>if</b>(clazz == <b>null</b>) {
<a name="99" href="#99">99</a>  	<b>return</b> _repository.loadClass(<b>class</b>_name);
<a name="100" href="#100">100</a>       } <b>else</b> {
<a name="101" href="#101">101</a> 	<b>return</b> clazz;
<a name="102" href="#102">102</a>       }
<a name="103" href="#103">103</a>     } <b>catch</b>(ClassNotFoundException ex) { <b>return</b> <b>null</b>; }
<a name="104" href="#104">104</a>   }
<a name="105" href="#105">105</a> 
<a name="106" href="#106">106</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="107" href="#107">107</a> <font color="#AA0000"><i>   * Try to find class source via getResourceAsStream().</font></i>
<a name="108" href="#108">108</a> <font color="#AA0000"><i>   * @see Class</font></i>
<a name="109" href="#109">109</a> <font color="#AA0000"><i>   * @return JavaClass object for given runtime class</font></i>
<a name="110" href="#110">110</a> <font color="#AA0000"><i>   */</font></i>
<a name="111" href="#111">111</a>   <b>public</b> <b>static</b> <a href="../../../org/apache/bcel/classfile/JavaClass.html">JavaClass</a> lookupClass(Class clazz) {
<a name="112" href="#112">112</a>     <b>try</b> {
<a name="113" href="#113">113</a>       <b>return</b> _repository.loadClass(clazz);
<a name="114" href="#114">114</a>     } <b>catch</b>(ClassNotFoundException ex) { <b>return</b> <b>null</b>; }
<a name="115" href="#115">115</a>   }
<a name="116" href="#116">116</a> 
<a name="117" href="#117">117</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>* @return class file object for given Java class.</font></i></font></i>
<a name="118" href="#118">118</a> <font color="#AA0000"><i>   */</font></i>
<a name="119" href="#119">119</a>   <b>public</b> <b>static</b> ClassPath.ClassFile lookupClassFile(String <b>class</b>_name) {
<a name="120" href="#120">120</a>     <b>try</b> {
<a name="121" href="#121">121</a>       <b>return</b> ClassPath.SYSTEM_CLASS_PATH.getClassFile(<b>class</b>_name);
<a name="122" href="#122">122</a>     } <b>catch</b>(IOException e) { <b>return</b> <b>null</b>; }
<a name="123" href="#123">123</a>   }
<a name="124" href="#124">124</a> 
<a name="125" href="#125">125</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>* Clear the repository.</font></i></font></i>
<a name="126" href="#126">126</a> <font color="#AA0000"><i>   */</font></i>
<a name="127" href="#127">127</a>   <b>public</b> <b>static</b> <b>void</b> clearCache() {
<a name="128" href="#128">128</a>     _repository.clear();
<a name="129" href="#129">129</a>   }
<a name="130" href="#130">130</a> 
<a name="131" href="#131">131</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="132" href="#132">132</a> <font color="#AA0000"><i>   * Add clazz to repository if there isn't an equally named class already in there.</font></i>
<a name="133" href="#133">133</a> <font color="#AA0000"><i>   *</font></i>
<a name="134" href="#134">134</a> <font color="#AA0000"><i>   * @return old entry in repository</font></i>
<a name="135" href="#135">135</a> <font color="#AA0000"><i>   */</font></i>
<a name="136" href="#136">136</a>   <b>public</b> <b>static</b> <a href="../../../org/apache/bcel/classfile/JavaClass.html">JavaClass</a> addClass(<a href="../../../org/apache/bcel/classfile/JavaClass.html">JavaClass</a> clazz) {
<a name="137" href="#137">137</a>     <a href="../../../org/apache/bcel/classfile/JavaClass.html">JavaClass</a> old = _repository.findClass(clazz.getClassName());
<a name="138" href="#138">138</a>     _repository.storeClass(clazz);
<a name="139" href="#139">139</a>     <b>return</b> old;
<a name="140" href="#140">140</a>   }
<a name="141" href="#141">141</a> 
<a name="142" href="#142">142</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="143" href="#143">143</a> <font color="#AA0000"><i>   * Remove class with given (fully qualified) name from repository.</font></i>
<a name="144" href="#144">144</a> <font color="#AA0000"><i>   */</font></i>
<a name="145" href="#145">145</a>   <b>public</b> <b>static</b> <b>void</b> removeClass(String clazz) {
<a name="146" href="#146">146</a>     _repository.removeClass(_repository.findClass(clazz));
<a name="147" href="#147">147</a>   }
<a name="148" href="#148">148</a> 
<a name="149" href="#149">149</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="150" href="#150">150</a> <font color="#AA0000"><i>   * Remove given class from repository.</font></i>
<a name="151" href="#151">151</a> <font color="#AA0000"><i>   */</font></i>
<a name="152" href="#152">152</a>   <b>public</b> <b>static</b> <b>void</b> removeClass(<a href="../../../org/apache/bcel/classfile/JavaClass.html">JavaClass</a> clazz) {
<a name="153" href="#153">153</a>     _repository.removeClass(clazz);
<a name="154" href="#154">154</a>   }
<a name="155" href="#155">155</a> 
<a name="156" href="#156">156</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="157" href="#157">157</a> <font color="#AA0000"><i>   * @return list of super classes of clazz in ascending order, i.e.,</font></i>
<a name="158" href="#158">158</a> <font color="#AA0000"><i>   * Object is always the last element</font></i>
<a name="159" href="#159">159</a> <font color="#AA0000"><i>   */</font></i>
<a name="160" href="#160">160</a>   <b>public</b> <b>static</b> <a href="../../../org/apache/bcel/classfile/JavaClass.html">JavaClass</a>[] getSuperClasses(<a href="../../../org/apache/bcel/classfile/JavaClass.html">JavaClass</a> clazz) {
<a name="161" href="#161">161</a>     <b>return</b> clazz.getSuperClasses();
<a name="162" href="#162">162</a>   }
<a name="163" href="#163">163</a> 
<a name="164" href="#164">164</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="165" href="#165">165</a> <font color="#AA0000"><i>   * @return list of super classes of clazz in ascending order, i.e.,</font></i>
<a name="166" href="#166">166</a> <font color="#AA0000"><i>   * Object is always the last element. return "null", if class</font></i>
<a name="167" href="#167">167</a> <font color="#AA0000"><i>   * cannot be found.</font></i>
<a name="168" href="#168">168</a> <font color="#AA0000"><i>   */</font></i>
<a name="169" href="#169">169</a>   <b>public</b> <b>static</b> <a href="../../../org/apache/bcel/classfile/JavaClass.html">JavaClass</a>[] getSuperClasses(String <b>class</b>_name) {
<a name="170" href="#170">170</a>     <a href="../../../org/apache/bcel/classfile/JavaClass.html">JavaClass</a> jc = lookupClass(<b>class</b>_name);
<a name="171" href="#171">171</a>     <b>return</b> (jc == <b>null</b>? <b>null</b> : getSuperClasses(jc));
<a name="172" href="#172">172</a>   }
<a name="173" href="#173">173</a> 
<a name="174" href="#174">174</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="175" href="#175">175</a> <font color="#AA0000"><i>   * @return all interfaces implemented by class and its super</font></i>
<a name="176" href="#176">176</a> <font color="#AA0000"><i>   * classes and the interfaces that those interfaces extend, and so on.</font></i>
<a name="177" href="#177">177</a> <font color="#AA0000"><i>   * (Some people call this a transitive hull).</font></i>
<a name="178" href="#178">178</a> <font color="#AA0000"><i>   */</font></i>
<a name="179" href="#179">179</a>   <b>public</b> <b>static</b> <a href="../../../org/apache/bcel/classfile/JavaClass.html">JavaClass</a>[] getInterfaces(<a href="../../../org/apache/bcel/classfile/JavaClass.html">JavaClass</a> clazz) {
<a name="180" href="#180">180</a>     <b>return</b> clazz.getAllInterfaces();
<a name="181" href="#181">181</a>   }
<a name="182" href="#182">182</a> 
<a name="183" href="#183">183</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="184" href="#184">184</a> <font color="#AA0000"><i>   * @return all interfaces implemented by class and its super</font></i>
<a name="185" href="#185">185</a> <font color="#AA0000"><i>   * classes and the interfaces that extend those interfaces, and so on</font></i>
<a name="186" href="#186">186</a> <font color="#AA0000"><i>   */</font></i>
<a name="187" href="#187">187</a>   <b>public</b> <b>static</b> <a href="../../../org/apache/bcel/classfile/JavaClass.html">JavaClass</a>[] getInterfaces(String <b>class</b>_name) {
<a name="188" href="#188">188</a>     <b>return</b> getInterfaces(lookupClass(<b>class</b>_name));
<a name="189" href="#189">189</a>   }
<a name="190" href="#190">190</a> 
<a name="191" href="#191">191</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="192" href="#192">192</a> <font color="#AA0000"><i>   * Equivalent to runtime "instanceof" operator.</font></i>
<a name="193" href="#193">193</a> <font color="#AA0000"><i>   * @return true, if clazz is an instance of super_class</font></i>
<a name="194" href="#194">194</a> <font color="#AA0000"><i>   */</font></i>
<a name="195" href="#195">195</a>   <b>public</b> <b>static</b> <b>boolean</b> instanceOf(<a href="../../../org/apache/bcel/classfile/JavaClass.html">JavaClass</a> clazz, <a href="../../../org/apache/bcel/classfile/JavaClass.html">JavaClass</a> <b>super</b>_<b>class</b>) {
<a name="196" href="#196">196</a>     <b>return</b> clazz.instanceOf(<b>super</b>_<b>class</b>);
<a name="197" href="#197">197</a>   }
<a name="198" href="#198">198</a> 
<a name="199" href="#199">199</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="200" href="#200">200</a> <font color="#AA0000"><i>   * @return true, if clazz is an instance of super_class</font></i>
<a name="201" href="#201">201</a> <font color="#AA0000"><i>   */</font></i>
<a name="202" href="#202">202</a>   <b>public</b> <b>static</b> <b>boolean</b> instanceOf(String clazz, String <b>super</b>_<b>class</b>) {
<a name="203" href="#203">203</a>     <b>return</b> instanceOf(lookupClass(clazz), lookupClass(<b>super</b>_<b>class</b>));
<a name="204" href="#204">204</a>   }
<a name="205" href="#205">205</a> 
<a name="206" href="#206">206</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="207" href="#207">207</a> <font color="#AA0000"><i>   * @return true, if clazz is an instance of super_class</font></i>
<a name="208" href="#208">208</a> <font color="#AA0000"><i>   */</font></i>
<a name="209" href="#209">209</a>   <b>public</b> <b>static</b> <b>boolean</b> instanceOf(<a href="../../../org/apache/bcel/classfile/JavaClass.html">JavaClass</a> clazz, String <b>super</b>_<b>class</b>) {
<a name="210" href="#210">210</a>     <b>return</b> instanceOf(clazz, lookupClass(<b>super</b>_<b>class</b>));
<a name="211" href="#211">211</a>   }
<a name="212" href="#212">212</a> 
<a name="213" href="#213">213</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="214" href="#214">214</a> <font color="#AA0000"><i>   * @return true, if clazz is an instance of super_class</font></i>
<a name="215" href="#215">215</a> <font color="#AA0000"><i>   */</font></i>
<a name="216" href="#216">216</a>   <b>public</b> <b>static</b> <b>boolean</b> instanceOf(String clazz, <a href="../../../org/apache/bcel/classfile/JavaClass.html">JavaClass</a> <b>super</b>_<b>class</b>) {
<a name="217" href="#217">217</a>     <b>return</b> instanceOf(lookupClass(clazz), <b>super</b>_<b>class</b>);
<a name="218" href="#218">218</a>   }
<a name="219" href="#219">219</a> 
<a name="220" href="#220">220</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="221" href="#221">221</a> <font color="#AA0000"><i>   * @return true, if clazz is an implementation of interface inter</font></i>
<a name="222" href="#222">222</a> <font color="#AA0000"><i>   */</font></i>
<a name="223" href="#223">223</a>   <b>public</b> <b>static</b> <b>boolean</b> implementationOf(<a href="../../../org/apache/bcel/classfile/JavaClass.html">JavaClass</a> clazz, <a href="../../../org/apache/bcel/classfile/JavaClass.html">JavaClass</a> inter) {
<a name="224" href="#224">224</a>     <b>return</b> clazz.implementationOf(inter);
<a name="225" href="#225">225</a>   }
<a name="226" href="#226">226</a> 
<a name="227" href="#227">227</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="228" href="#228">228</a> <font color="#AA0000"><i>   * @return true, if clazz is an implementation of interface inter</font></i>
<a name="229" href="#229">229</a> <font color="#AA0000"><i>   */</font></i>
<a name="230" href="#230">230</a>   <b>public</b> <b>static</b> <b>boolean</b> implementationOf(String clazz, String inter) {
<a name="231" href="#231">231</a>     <b>return</b> implementationOf(lookupClass(clazz), lookupClass(inter));
<a name="232" href="#232">232</a>   }
<a name="233" href="#233">233</a> 
<a name="234" href="#234">234</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="235" href="#235">235</a> <font color="#AA0000"><i>   * @return true, if clazz is an implementation of interface inter</font></i>
<a name="236" href="#236">236</a> <font color="#AA0000"><i>   */</font></i>
<a name="237" href="#237">237</a>   <b>public</b> <b>static</b> <b>boolean</b> implementationOf(<a href="../../../org/apache/bcel/classfile/JavaClass.html">JavaClass</a> clazz, String inter) {
<a name="238" href="#238">238</a>     <b>return</b> implementationOf(clazz, lookupClass(inter));
<a name="239" href="#239">239</a>   }
<a name="240" href="#240">240</a> 
<a name="241" href="#241">241</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="242" href="#242">242</a> <font color="#AA0000"><i>   * @return true, if clazz is an implementation of interface inter</font></i>
<a name="243" href="#243">243</a> <font color="#AA0000"><i>   */</font></i>
<a name="244" href="#244">244</a>   <b>public</b> <b>static</b> <b>boolean</b> implementationOf(String clazz, <a href="../../../org/apache/bcel/classfile/JavaClass.html">JavaClass</a> inter) {
<a name="245" href="#245">245</a>     <b>return</b> implementationOf(lookupClass(clazz), inter);
<a name="246" href="#246">246</a>   }
<a name="247" href="#247">247</a> }
<a name="248" href="#248">248</a> 
</pre>
<hr><center>This page was automatically generated by <a href="http://jakarta.apache.org/turbine/maven">Maven</a></center></body>
</html>

