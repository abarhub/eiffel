<html>
<body bgcolor="white">
<pre>
<table bgcolor="#FFFFCC" cellpadding="0" cellspacing="0" border="0" width="100%"><a href="../../../../../../apidocs/org/apache/bcel/verifier/statics/Pass1Verifier.html">View Javadoc</a></table>
<a name="1" href="#1">1</a>   <b>package</b> <a href="../../../../../org/apache/bcel/verifier/statics/package-summary.html">org.apache.bcel.verifier.statics</a>;
<a name="2" href="#2">2</a>   
<a name="3" href="#3">3</a>   <font color="#329900"><i>/*<font color="#329900"><i> ====================================================================</font></i></font></i>
<a name="4" href="#4">4</a>   <font color="#329900"><i> * The Apache Software License, Version 1.1</font></i>
<a name="5" href="#5">5</a>   <font color="#329900"><i> *</font></i>
<a name="6" href="#6">6</a>   <font color="#329900"><i> * Copyright (c) 2001 The Apache Software Foundation.  All rights</font></i>
<a name="7" href="#7">7</a>   <font color="#329900"><i> * reserved.</font></i>
<a name="8" href="#8">8</a>   <font color="#329900"><i> *</font></i>
<a name="9" href="#9">9</a>   <font color="#329900"><i> * Redistribution and use in source and binary forms, with or without</font></i>
<a name="10" href="#10">10</a>  <font color="#329900"><i> * modification, are permitted provided that the following conditions</font></i>
<a name="11" href="#11">11</a>  <font color="#329900"><i> * are met:</font></i>
<a name="12" href="#12">12</a>  <font color="#329900"><i> *</font></i>
<a name="13" href="#13">13</a>  <font color="#329900"><i> * 1. Redistributions of source code must retain the above copyright</font></i>
<a name="14" href="#14">14</a>  <font color="#329900"><i> *    notice, this list of conditions and the following disclaimer.</font></i>
<a name="15" href="#15">15</a>  <font color="#329900"><i> *</font></i>
<a name="16" href="#16">16</a>  <font color="#329900"><i> * 2. Redistributions in binary form must reproduce the above copyright</font></i>
<a name="17" href="#17">17</a>  <font color="#329900"><i> *    notice, this list of conditions and the following disclaimer in</font></i>
<a name="18" href="#18">18</a>  <font color="#329900"><i> *    the documentation and/or other materials provided with the</font></i>
<a name="19" href="#19">19</a>  <font color="#329900"><i> *    distribution.</font></i>
<a name="20" href="#20">20</a>  <font color="#329900"><i> *</font></i>
<a name="21" href="#21">21</a>  <font color="#329900"><i> * 3. The end-user documentation included with the redistribution,</font></i>
<a name="22" href="#22">22</a>  <font color="#329900"><i> *    if any, must include the following acknowledgment:</font></i>
<a name="23" href="#23">23</a>  <font color="#329900"><i> *       "This product includes software developed by the</font></i>
<a name="24" href="#24">24</a>  <font color="#329900"><i> *        Apache Software Foundation (<a href="http://www.apache.org/" target="alexandria_uri">http://www.apache.org/</a>)."</font></i>
<a name="25" href="#25">25</a>  <font color="#329900"><i> *    Alternately, this acknowledgment may appear in the software itself,</font></i>
<a name="26" href="#26">26</a>  <font color="#329900"><i> *    if and wherever such third-party acknowledgments normally appear.</font></i>
<a name="27" href="#27">27</a>  <font color="#329900"><i> *</font></i>
<a name="28" href="#28">28</a>  <font color="#329900"><i> * 4. The names "Apache" and "Apache Software Foundation" and</font></i>
<a name="29" href="#29">29</a>  <font color="#329900"><i> *    "Apache BCEL" must not be used to endorse or promote products</font></i>
<a name="30" href="#30">30</a>  <font color="#329900"><i> *    derived from this software without prior written permission. For</font></i>
<a name="31" href="#31">31</a>  <font color="#329900"><i> *    written permission, please contact apache@apache.org.</font></i>
<a name="32" href="#32">32</a>  <font color="#329900"><i> *</font></i>
<a name="33" href="#33">33</a>  <font color="#329900"><i> * 5. Products derived from this software may not be called "Apache",</font></i>
<a name="34" href="#34">34</a>  <font color="#329900"><i> *    "Apache BCEL", nor may "Apache" appear in their name, without</font></i>
<a name="35" href="#35">35</a>  <font color="#329900"><i> *    prior written permission of the Apache Software Foundation.</font></i>
<a name="36" href="#36">36</a>  <font color="#329900"><i> *</font></i>
<a name="37" href="#37">37</a>  <font color="#329900"><i> * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED</font></i>
<a name="38" href="#38">38</a>  <font color="#329900"><i> * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES</font></i>
<a name="39" href="#39">39</a>  <font color="#329900"><i> * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</font></i>
<a name="40" href="#40">40</a>  <font color="#329900"><i> * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR</font></i>
<a name="41" href="#41">41</a>  <font color="#329900"><i> * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</font></i>
<a name="42" href="#42">42</a>  <font color="#329900"><i> * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</font></i>
<a name="43" href="#43">43</a>  <font color="#329900"><i> * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF</font></i>
<a name="44" href="#44">44</a>  <font color="#329900"><i> * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND</font></i>
<a name="45" href="#45">45</a>  <font color="#329900"><i> * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</font></i>
<a name="46" href="#46">46</a>  <font color="#329900"><i> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT</font></i>
<a name="47" href="#47">47</a>  <font color="#329900"><i> * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF</font></i>
<a name="48" href="#48">48</a>  <font color="#329900"><i> * SUCH DAMAGE.</font></i>
<a name="49" href="#49">49</a>  <font color="#329900"><i> * ====================================================================</font></i>
<a name="50" href="#50">50</a>  <font color="#329900"><i> *</font></i>
<a name="51" href="#51">51</a>  <font color="#329900"><i> * This software consists of voluntary contributions made by many</font></i>
<a name="52" href="#52">52</a>  <font color="#329900"><i> * individuals on behalf of the Apache Software Foundation.  For more</font></i>
<a name="53" href="#53">53</a>  <font color="#329900"><i> * information on the Apache Software Foundation, please see</font></i>
<a name="54" href="#54">54</a>  <font color="#329900"><i> * &lt;<a href="http://www.apache.org/&gt" target="alexandria_uri">http://www.apache.org/&gt</a>;.</font></i>
<a name="55" href="#55">55</a>  <font color="#329900"><i> */</font></i>
<a name="56" href="#56">56</a>  
<a name="57" href="#57">57</a>  <b>import</b> <a href="../../../../../org/apache/bcel/classfile/package-summary.html">org.apache.bcel.classfile</a>.*;
<a name="58" href="#58">58</a>  <b>import</b> org.apache.bcel.Repository;
<a name="59" href="#59">59</a>  <b>import</b> <a href="../../../../../org/apache/bcel/verifier/package-summary.html">org.apache.bcel.verifier</a>.*;
<a name="60" href="#60">60</a>  <b>import</b> <a href="../../../../../org/apache/bcel/verifier/exc/package-summary.html">org.apache.bcel.verifier.exc</a>.*;
<a name="61" href="#61">61</a>  <b>import</b> org.apache.bcel.verifier.exc.Utility;
<a name="62" href="#62">62</a>  
<a name="63" href="#63">63</a>  <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="64" href="#64">64</a>  <font color="#AA0000"><i> * This PassVerifier verifies a class file according to pass 1 as</font></i>
<a name="65" href="#65">65</a>  <font color="#AA0000"><i> * described in The Java Virtual Machine Specification, 2nd edition.</font></i>
<a name="66" href="#66">66</a>  <font color="#AA0000"><i> * More detailed information is to be found at the do_verify() method's</font></i>
<a name="67" href="#67">67</a>  <font color="#AA0000"><i> * documentation.</font></i>
<a name="68" href="#68">68</a>  <font color="#AA0000"><i> *</font></i>
<a name="69" href="#69">69</a>  <font color="#AA0000"><i> * @version $Id: Pass1Verifier.java,v 1.2 2002/06/13 09:32:50 enver Exp $</font></i>
<a name="70" href="#70">70</a>  <font color="#AA0000"><i> * @author &lt;A HREF="<a href="http://www.inf.fu" target="alexandria_uri">http://www.inf.fu</a>-berlin.de/~ehaase"/&gt;Enver Haase&lt;/A&gt;</font></i>
<a name="71" href="#71">71</a>  <font color="#AA0000"><i> * @see #do_verify()</font></i>
<a name="72" href="#72">72</a>  <font color="#AA0000"><i> */</font></i>
<a name="73" href="#73">73</a>  <b>public</b> <b>final</b> <b>class</b> Pass1Verifier <b>extends</b> <a href="../../../../../org/apache/bcel/verifier/PassVerifier.html">PassVerifier</a>{
<a name="74" href="#74">74</a>  	<font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="75" href="#75">75</a>  <font color="#AA0000"><i>	 * DON'T USE THIS EVEN PRIVATELY! USE getJavaClass() INSTEAD.</font></i>
<a name="76" href="#76">76</a>  <font color="#AA0000"><i>	 * @see #getJavaClass()</font></i>
<a name="77" href="#77">77</a>  <font color="#AA0000"><i>	 */</font></i>
<a name="78" href="#78">78</a>  	<b>private</b> <a href="../../../../../org/apache/bcel/classfile/JavaClass.html">JavaClass</a> jc;
<a name="79" href="#79">79</a>  
<a name="80" href="#80">80</a>  	<font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="81" href="#81">81</a>  <font color="#AA0000"><i>	 * The Verifier that created this.</font></i>
<a name="82" href="#82">82</a>  <font color="#AA0000"><i>	 */</font></i>
<a name="83" href="#83">83</a>  	<b>private</b> <a href="../../../../../org/apache/bcel/verifier/Verifier.html">Verifier</a> myOwner;
<a name="84" href="#84">84</a>  
<a name="85" href="#85">85</a>  	<font color="#AA0000"><i>/**<font color="#AA0000"><i>* Used to load in and return the myOwner-matching <a href="../../../../../org/apache/bcel/classfile/JavaClass.html">JavaClass</a> object when needed. Avoids loading in a class file when it's not really needed! */</font></i></font></i>
<a name="86" href="#86">86</a>  	<b>private</b> <a href="../../../../../org/apache/bcel/classfile/JavaClass.html">JavaClass</a> getJavaClass(){
<a name="87" href="#87">87</a>  		<b>if</b> (jc == <b>null</b>){
<a name="88" href="#88">88</a>  			jc = Repository.lookupClass(myOwner.getClassName());
<a name="89" href="#89">89</a>  		}
<a name="90" href="#90">90</a>  		<b>return</b> jc;
<a name="91" href="#91">91</a>  	}
<a name="92" href="#92">92</a>  	
<a name="93" href="#93">93</a>  	<font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="94" href="#94">94</a>  <font color="#AA0000"><i>	 * Should only be instantiated by a Verifier.</font></i>
<a name="95" href="#95">95</a>  <font color="#AA0000"><i>	 *</font></i>
<a name="96" href="#96">96</a>  <font color="#AA0000"><i>	 * @see org.apache.bcel.verifier.Verifier</font></i>
<a name="97" href="#97">97</a>  <font color="#AA0000"><i>	 */</font></i>
<a name="98" href="#98">98</a>  	<b>public</b> Pass1Verifier(<a href="../../../../../org/apache/bcel/verifier/Verifier.html">Verifier</a> owner){
<a name="99" href="#99">99</a>  		myOwner = owner;
<a name="100" href="#100">100</a> 	}
<a name="101" href="#101">101</a> 
<a name="102" href="#102">102</a> 	<font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="103" href="#103">103</a> <font color="#AA0000"><i>	 * Pass-one verification basically means loading in a class file.</font></i>
<a name="104" href="#104">104</a> <font color="#AA0000"><i>	 * The Java Virtual Machine Specification is not too precise about</font></i>
<a name="105" href="#105">105</a> <font color="#AA0000"><i>	 * what makes the difference between passes one and two.</font></i>
<a name="106" href="#106">106</a> <font color="#AA0000"><i>	 * The answer is that only pass one is performed on a class file as</font></i>
<a name="107" href="#107">107</a> <font color="#AA0000"><i>	 * long as its resolution is not requested; whereas pass two and</font></i>
<a name="108" href="#108">108</a> <font color="#AA0000"><i>	 * pass three are performed during the resolution process.</font></i>
<a name="109" href="#109">109</a> <font color="#AA0000"><i>	 * Only four constraints to be checked are explicitely stated by</font></i>
<a name="110" href="#110">110</a> <font color="#AA0000"><i>	 * The Java Virtual Machine Specification, 2nd edition:</font></i>
<a name="111" href="#111">111</a> <font color="#AA0000"><i>	 * &lt;UL&gt;</font></i>
<a name="112" href="#112">112</a> <font color="#AA0000"><i>	 *  &lt;LI&gt;The first four bytes must contain the right magic number (0xCAFEBABE).</font></i>
<a name="113" href="#113">113</a> <font color="#AA0000"><i>	 *  &lt;LI&gt;All recognized attributes must be of the proper length.</font></i>
<a name="114" href="#114">114</a> <font color="#AA0000"><i>	 *  &lt;LI&gt;The class file must not be truncated or have extra bytes at the end.</font></i>
<a name="115" href="#115">115</a> <font color="#AA0000"><i>	 *  &lt;LI&gt;The constant pool must not contain any superficially unrecognizable information.</font></i>
<a name="116" href="#116">116</a> <font color="#AA0000"><i>	 * &lt;/UL&gt;</font></i>
<a name="117" href="#117">117</a> <font color="#AA0000"><i>	 * A more in-depth documentation of what pass one should do was written by</font></i>
<a name="118" href="#118">118</a> <font color="#AA0000"><i>	 * &lt;A HREF=<a href="mailto:pwfong@cs.sfu.ca&gt" target="alexandria_uri">mailto:pwfong@cs.sfu.ca&gt</a>;Philip W. L. Fong&lt;/A&gt;:</font></i>
<a name="119" href="#119">119</a> <font color="#AA0000"><i>	 * &lt;UL&gt;</font></i>
<a name="120" href="#120">120</a> <font color="#AA0000"><i>	 *  &lt;LI&gt; the file should not be truncated.</font></i>
<a name="121" href="#121">121</a> <font color="#AA0000"><i>	 *  &lt;LI&gt; the file should not have extra bytes at the end.</font></i>
<a name="122" href="#122">122</a> <font color="#AA0000"><i>	 *  &lt;LI&gt; all variable-length structures should be well-formatted:</font></i>
<a name="123" href="#123">123</a> <font color="#AA0000"><i>	 *  &lt;UL&gt;</font></i>
<a name="124" href="#124">124</a> <font color="#AA0000"><i>	 *   &lt;LI&gt; there should only be constant_pool_count-1 many entries in the constant pool.</font></i>
<a name="125" href="#125">125</a> <font color="#AA0000"><i>	 *   &lt;LI&gt; all constant pool entries should have size the same as indicated by their type tag.</font></i>
<a name="126" href="#126">126</a> <font color="#AA0000"><i>	 *   &lt;LI&gt; there are exactly interfaces_count many entries in the interfaces array of the class file.</font></i>
<a name="127" href="#127">127</a> <font color="#AA0000"><i>	 *   &lt;LI&gt; there are exactly fields_count many entries in the fields array of the class file.</font></i>
<a name="128" href="#128">128</a> <font color="#AA0000"><i>	 *   &lt;LI&gt; there are exactly methods_count many entries in the methods array of the class file.</font></i>
<a name="129" href="#129">129</a> <font color="#AA0000"><i>	 *   &lt;LI&gt; there are exactly attributes_count many entries in the attributes array of the class file, fields, methods, and code attribute.</font></i>
<a name="130" href="#130">130</a> <font color="#AA0000"><i>	 *   &lt;LI&gt; there should be exactly attribute_length many bytes in each attribute. Inconsistency between attribute_length and the actually size of the attribute content should be uncovered. For example, in an Exceptions attribute, the actual number of exceptions as required by the number_of_exceptions field might yeild an attribute size that doesn't match the attribute_length. Such an anomaly should be detected.</font></i>
<a name="131" href="#131">131</a> <font color="#AA0000"><i>	 *   &lt;LI&gt; all attributes should have proper length. In particular, under certain context (e.g. while parsing method_info), recognizable attributes (e.g. "Code" attribute) should have correct format (e.g. attribute_length is 2).</font></i>
<a name="132" href="#132">132</a> <font color="#AA0000"><i>	 *  &lt;/UL&gt;</font></i>
<a name="133" href="#133">133</a> <font color="#AA0000"><i>	 *  &lt;LI&gt; Also, certain constant values are checked for validity:</font></i>
<a name="134" href="#134">134</a> <font color="#AA0000"><i>	 *  &lt;UL&gt;</font></i>
<a name="135" href="#135">135</a> <font color="#AA0000"><i>	 *   &lt;LI&gt; The magic number should be 0xCAFEBABE.</font></i>
<a name="136" href="#136">136</a> <font color="#AA0000"><i>	 *   &lt;LI&gt; The major and minor version numbers are valid.</font></i>
<a name="137" href="#137">137</a> <font color="#AA0000"><i>	 *   &lt;LI&gt; All the constant pool type tags are recognizable.</font></i>
<a name="138" href="#138">138</a> <font color="#AA0000"><i>	 *   &lt;LI&gt; All undocumented access flags are masked off before use. Strictly speaking, this is not really a check.</font></i>
<a name="139" href="#139">139</a> <font color="#AA0000"><i>	 *   &lt;LI&gt; The field this_class should point to a string that represents a legal non-array class name, and this name should be the same as the class file being loaded.</font></i>
<a name="140" href="#140">140</a> <font color="#AA0000"><i>	 *   &lt;LI&gt; the field super_class should point to a string that represents a legal non-array class name.</font></i>
<a name="141" href="#141">141</a> <font color="#AA0000"><i>	 *   &lt;LI&gt; Because some of the above checks require cross referencing the constant pool entries, guards are set up to make sure that the referenced entries are of the right type and the indices are within the legal range (0 &lt; index &lt; constant_pool_count).</font></i>
<a name="142" href="#142">142</a> <font color="#AA0000"><i>	 *  &lt;/UL&gt;</font></i>
<a name="143" href="#143">143</a> <font color="#AA0000"><i>	 *  &lt;LI&gt; Extra checks done in pass 1:</font></i>
<a name="144" href="#144">144</a> <font color="#AA0000"><i>	 *  &lt;UL&gt;</font></i>
<a name="145" href="#145">145</a> <font color="#AA0000"><i>	 *   &lt;LI&gt; the constant values of static fields should have the same type as the fields.</font></i>
<a name="146" href="#146">146</a> <font color="#AA0000"><i>	 *   &lt;LI&gt; the number of words in a parameter list does not exceed 255 and locals_max.</font></i>
<a name="147" href="#147">147</a> <font color="#AA0000"><i>	 *   &lt;LI&gt; the name and signature of fields and methods are verified to be of legal format.</font></i>
<a name="148" href="#148">148</a> <font color="#AA0000"><i>	 *  &lt;/UL&gt;</font></i>
<a name="149" href="#149">149</a> <font color="#AA0000"><i>	 * &lt;/UL&gt;</font></i>
<a name="150" href="#150">150</a> <font color="#AA0000"><i>	 * (From the Paper &lt;A HREF=<a href="http://www.cs.sfu.ca/people/GradStudents/pwfong/personal/JVM/pass1/&gt" target="alexandria_uri">http://www.cs.sfu.ca/people/GradStudents/pwfong/personal/JVM/pass1/&gt</a>;The Mysterious Pass One, first draft, September 2, 1997&lt;/A&gt;.)</font></i>
<a name="151" href="#151">151</a> <font color="#AA0000"><i>	 * &lt;/BR&gt;</font></i>
<a name="152" href="#152">152</a> <font color="#AA0000"><i>	 * However, most of this is done by parsing a class file or generating a class file into BCEL's internal data structure.</font></i>
<a name="153" href="#153">153</a> <font color="#AA0000"><i>	 * &lt;B&gt;Therefore, all that is really done here is look up the class file from BCEL's repository.&lt;/B&gt;</font></i>
<a name="154" href="#154">154</a> <font color="#AA0000"><i>	 * This is also motivated by the fact that some omitted things</font></i>
<a name="155" href="#155">155</a> <font color="#AA0000"><i>	 * (like the check for extra bytes at the end of the class file) are handy when actually using BCEL to repair a class file (otherwise you would not be</font></i>
<a name="156" href="#156">156</a> <font color="#AA0000"><i>	 * able to load it into BCEL).</font></i>
<a name="157" href="#157">157</a> <font color="#AA0000"><i>	 *</font></i>
<a name="158" href="#158">158</a> <font color="#AA0000"><i>	 * @see org.apache.bcel.Repository</font></i>
<a name="159" href="#159">159</a> <font color="#AA0000"><i>	 */</font></i>
<a name="160" href="#160">160</a> 	<b>public</b> <a href="../../../../../org/apache/bcel/verifier/VerificationResult.html">VerificationResult</a> <b>do</b>_verify(){
<a name="161" href="#161">161</a> 		JavaClass jc;
<a name="162" href="#162">162</a> 		<b>try</b>{
<a name="163" href="#163">163</a> 			jc = getJavaClass();	<font color="#329900"><i>//loads in the class file if not already done.</font></i>
<a name="164" href="#164">164</a> 
<a name="165" href="#165">165</a> 			<b>if</b> (jc != <b>null</b>){
<a name="166" href="#166">166</a> 				<font color="#329900"><i>/*<font color="#329900"><i> If we find more constraints to check, we should do this in an own method. */</font></i></font></i>
<a name="167" href="#167">167</a> 				<b>if</b> (! myOwner.getClassName().equals(jc.getClassName())){
<a name="168" href="#168">168</a> 					<font color="#329900"><i>// This should maybe caught by BCEL: In case of renamed .class files we get wrong</font></i>
<a name="169" href="#169">169</a> 					<font color="#329900"><i>// JavaClass objects here.</font></i>
<a name="170" href="#170">170</a> 					<b>throw</b> <b>new</b> <a href="../../../../../org/apache/bcel/verifier/exc/LoadingException.html">LoadingException</a>(<font color="#000099">"Wrong name: the internal name of the .class file '"</font>+jc.getClassName()+<font color="#000099">"' does not match the file's name '"</font>+myOwner.getClassName()+<font color="#000099">"'."</font>);
<a name="171" href="#171">171</a> 				}
<a name="172" href="#172">172</a> 			}
<a name="173" href="#173">173</a> 			
<a name="174" href="#174">174</a> 		}
<a name="175" href="#175">175</a> 		<b>catch</b>(<a href="../../../../../org/apache/bcel/verifier/exc/LoadingException.html">LoadingException</a> e){
<a name="176" href="#176">176</a> 			<b>return</b> <b>new</b> <a href="../../../../../org/apache/bcel/verifier/VerificationResult.html">VerificationResult</a>(VerificationResult.VERIFIED_REJECTED, e.getMessage());
<a name="177" href="#177">177</a> 		}
<a name="178" href="#178">178</a> 		<b>catch</b>(ClassFormatError e){
<a name="179" href="#179">179</a> 			<font color="#329900"><i>// BCEL sometimes is a little harsh describing exceptual situations.</font></i>
<a name="180" href="#180">180</a> 			<b>return</b> <b>new</b> <a href="../../../../../org/apache/bcel/verifier/VerificationResult.html">VerificationResult</a>(VerificationResult.VERIFIED_REJECTED, e.getMessage());
<a name="181" href="#181">181</a> 		}
<a name="182" href="#182">182</a> 		<b>catch</b>(RuntimeException e){
<a name="183" href="#183">183</a> 			<font color="#329900"><i>// BCEL does not catch every possible RuntimeException; e.g. if</font></i>
<a name="184" href="#184">184</a> 			<font color="#329900"><i>// a constant pool index is referenced that does not exist.</font></i>
<a name="185" href="#185">185</a> 			<b>return</b> <b>new</b> <a href="../../../../../org/apache/bcel/verifier/VerificationResult.html">VerificationResult</a>(VerificationResult.VERIFIED_REJECTED, <font color="#000099">"Parsing via BCEL did not succeed. "</font>+e.getClass().getName()+<font color="#000099">" occured:\n"</font>+Utility.getStackTrace(e));
<a name="186" href="#186">186</a> 		}
<a name="187" href="#187">187</a> 
<a name="188" href="#188">188</a> 		<b>if</b> (jc != <b>null</b>){
<a name="189" href="#189">189</a> 			<b>return</b> VerificationResult.VR_OK;
<a name="190" href="#190">190</a> 		}
<a name="191" href="#191">191</a> 		<b>else</b>{
<a name="192" href="#192">192</a> 			<font color="#329900"><i>//TODO: Maybe change Repository's behaviour to throw a LoadingException instead of just returning "null"</font></i>
<a name="193" href="#193">193</a> 			<font color="#329900"><i>//      if a class file cannot be found or in another way be looked up.</font></i>
<a name="194" href="#194">194</a> 			<b>return</b> <b>new</b> <a href="../../../../../org/apache/bcel/verifier/VerificationResult.html">VerificationResult</a>(VerificationResult.VERIFIED_REJECTED, <font color="#000099">"Repository.lookup() failed. FILE NOT FOUND?"</font>);
<a name="195" href="#195">195</a> 		}
<a name="196" href="#196">196</a> 	}
<a name="197" href="#197">197</a> 
<a name="198" href="#198">198</a> 	<font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="199" href="#199">199</a> <font color="#AA0000"><i>	 * Currently this returns an empty array of String.</font></i>
<a name="200" href="#200">200</a> <font color="#AA0000"><i>	 * One could parse the error messages of BCEL</font></i>
<a name="201" href="#201">201</a> <font color="#AA0000"><i>	 * (written to java.lang.System.err) when loading</font></i>
<a name="202" href="#202">202</a> <font color="#AA0000"><i>	 * a class file such as detecting unknown attributes</font></i>
<a name="203" href="#203">203</a> <font color="#AA0000"><i>	 * or trailing garbage at the end of a class file.</font></i>
<a name="204" href="#204">204</a> <font color="#AA0000"><i>	 * However, Markus Dahm does not like the idea so this</font></i>
<a name="205" href="#205">205</a> <font color="#AA0000"><i>	 * method is currently useless and therefore marked as</font></i>
<a name="206" href="#206">206</a> <font color="#AA0000"><i>	 * &lt;B&gt;TODO&lt;/B&gt;.</font></i>
<a name="207" href="#207">207</a> <font color="#AA0000"><i>	 */</font></i>
<a name="208" href="#208">208</a> 	<b>public</b> String[] getMessages(){
<a name="209" href="#209">209</a> 		<font color="#329900"><i>// This method is only here to override the javadoc-comment.</font></i>
<a name="210" href="#210">210</a> 		<b>return</b> <b>super</b>.getMessages();
<a name="211" href="#211">211</a> 	}
<a name="212" href="#212">212</a> 
<a name="213" href="#213">213</a> }
</pre>
<hr><center>This page was automatically generated by <a href="http://jakarta.apache.org/turbine/maven">Maven</a></center></body>
</html>

