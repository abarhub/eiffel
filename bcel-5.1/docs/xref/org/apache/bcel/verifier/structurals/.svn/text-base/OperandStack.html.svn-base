<html>
<body bgcolor="white">
<pre>
<table bgcolor="#FFFFCC" cellpadding="0" cellspacing="0" border="0" width="100%"><a href="../../../../../../apidocs/org/apache/bcel/verifier/structurals/OperandStack.html">View Javadoc</a></table>
<a name="1" href="#1">1</a>   <b>package</b> <a href="../../../../../org/apache/bcel/verifier/structurals/package-summary.html">org.apache.bcel.verifier.structurals</a>;
<a name="2" href="#2">2</a>   
<a name="3" href="#3">3</a>   <font color="#329900"><i>/*<font color="#329900"><i> ====================================================================</font></i></font></i>
<a name="4" href="#4">4</a>   <font color="#329900"><i> * The Apache Software License, Version 1.1</font></i>
<a name="5" href="#5">5</a>   <font color="#329900"><i> *</font></i>
<a name="6" href="#6">6</a>   <font color="#329900"><i> * Copyright (c) 2001 The Apache Software Foundation.  All rights</font></i>
<a name="7" href="#7">7</a>   <font color="#329900"><i> * reserved.</font></i>
<a name="8" href="#8">8</a>   <font color="#329900"><i> *</font></i>
<a name="9" href="#9">9</a>   <font color="#329900"><i> * Redistribution and use in source and binary forms, with or without</font></i>
<a name="10" href="#10">10</a>  <font color="#329900"><i> * modification, are permitted provided that the following conditions</font></i>
<a name="11" href="#11">11</a>  <font color="#329900"><i> * are met:</font></i>
<a name="12" href="#12">12</a>  <font color="#329900"><i> *</font></i>
<a name="13" href="#13">13</a>  <font color="#329900"><i> * 1. Redistributions of source code must retain the above copyright</font></i>
<a name="14" href="#14">14</a>  <font color="#329900"><i> *    notice, this list of conditions and the following disclaimer.</font></i>
<a name="15" href="#15">15</a>  <font color="#329900"><i> *</font></i>
<a name="16" href="#16">16</a>  <font color="#329900"><i> * 2. Redistributions in binary form must reproduce the above copyright</font></i>
<a name="17" href="#17">17</a>  <font color="#329900"><i> *    notice, this list of conditions and the following disclaimer in</font></i>
<a name="18" href="#18">18</a>  <font color="#329900"><i> *    the documentation and/or other materials provided with the</font></i>
<a name="19" href="#19">19</a>  <font color="#329900"><i> *    distribution.</font></i>
<a name="20" href="#20">20</a>  <font color="#329900"><i> *</font></i>
<a name="21" href="#21">21</a>  <font color="#329900"><i> * 3. The end-user documentation included with the redistribution,</font></i>
<a name="22" href="#22">22</a>  <font color="#329900"><i> *    if any, must include the following acknowledgment:</font></i>
<a name="23" href="#23">23</a>  <font color="#329900"><i> *       "This product includes software developed by the</font></i>
<a name="24" href="#24">24</a>  <font color="#329900"><i> *        Apache Software Foundation (<a href="http://www.apache.org/" target="alexandria_uri">http://www.apache.org/</a>)."</font></i>
<a name="25" href="#25">25</a>  <font color="#329900"><i> *    Alternately, this acknowledgment may appear in the software itself,</font></i>
<a name="26" href="#26">26</a>  <font color="#329900"><i> *    if and wherever such third-party acknowledgments normally appear.</font></i>
<a name="27" href="#27">27</a>  <font color="#329900"><i> *</font></i>
<a name="28" href="#28">28</a>  <font color="#329900"><i> * 4. The names "Apache" and "Apache Software Foundation" and</font></i>
<a name="29" href="#29">29</a>  <font color="#329900"><i> *    "Apache BCEL" must not be used to endorse or promote products</font></i>
<a name="30" href="#30">30</a>  <font color="#329900"><i> *    derived from this software without prior written permission. For</font></i>
<a name="31" href="#31">31</a>  <font color="#329900"><i> *    written permission, please contact apache@apache.org.</font></i>
<a name="32" href="#32">32</a>  <font color="#329900"><i> *</font></i>
<a name="33" href="#33">33</a>  <font color="#329900"><i> * 5. Products derived from this software may not be called "Apache",</font></i>
<a name="34" href="#34">34</a>  <font color="#329900"><i> *    "Apache BCEL", nor may "Apache" appear in their name, without</font></i>
<a name="35" href="#35">35</a>  <font color="#329900"><i> *    prior written permission of the Apache Software Foundation.</font></i>
<a name="36" href="#36">36</a>  <font color="#329900"><i> *</font></i>
<a name="37" href="#37">37</a>  <font color="#329900"><i> * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED</font></i>
<a name="38" href="#38">38</a>  <font color="#329900"><i> * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES</font></i>
<a name="39" href="#39">39</a>  <font color="#329900"><i> * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</font></i>
<a name="40" href="#40">40</a>  <font color="#329900"><i> * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR</font></i>
<a name="41" href="#41">41</a>  <font color="#329900"><i> * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</font></i>
<a name="42" href="#42">42</a>  <font color="#329900"><i> * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</font></i>
<a name="43" href="#43">43</a>  <font color="#329900"><i> * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF</font></i>
<a name="44" href="#44">44</a>  <font color="#329900"><i> * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND</font></i>
<a name="45" href="#45">45</a>  <font color="#329900"><i> * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</font></i>
<a name="46" href="#46">46</a>  <font color="#329900"><i> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT</font></i>
<a name="47" href="#47">47</a>  <font color="#329900"><i> * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF</font></i>
<a name="48" href="#48">48</a>  <font color="#329900"><i> * SUCH DAMAGE.</font></i>
<a name="49" href="#49">49</a>  <font color="#329900"><i> * ====================================================================</font></i>
<a name="50" href="#50">50</a>  <font color="#329900"><i> *</font></i>
<a name="51" href="#51">51</a>  <font color="#329900"><i> * This software consists of voluntary contributions made by many</font></i>
<a name="52" href="#52">52</a>  <font color="#329900"><i> * individuals on behalf of the Apache Software Foundation.  For more</font></i>
<a name="53" href="#53">53</a>  <font color="#329900"><i> * information on the Apache Software Foundation, please see</font></i>
<a name="54" href="#54">54</a>  <font color="#329900"><i> * &lt;<a href="http://www.apache.org/&gt" target="alexandria_uri">http://www.apache.org/&gt</a>;.</font></i>
<a name="55" href="#55">55</a>  <font color="#329900"><i> */</font></i>
<a name="56" href="#56">56</a>  
<a name="57" href="#57">57</a>  <b>import</b> org.apache.bcel.<b>generic</b>.*;
<a name="58" href="#58">58</a>  <b>import</b> <a href="../../../../../org/apache/bcel/verifier/exc/package-summary.html">org.apache.bcel.verifier.exc</a>.*;
<a name="59" href="#59">59</a>  <b>import</b> java.util.*;
<a name="60" href="#60">60</a>  
<a name="61" href="#61">61</a>  <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="62" href="#62">62</a>  <font color="#AA0000"><i> * This class implements a stack used for symbolic JVM stack simulation.</font></i>
<a name="63" href="#63">63</a>  <font color="#AA0000"><i> * [It's used an an operand stack substitute.]</font></i>
<a name="64" href="#64">64</a>  <font color="#AA0000"><i> * Elements of this stack are org.apache.bcel.generic.Type objects.</font></i>
<a name="65" href="#65">65</a>  <font color="#AA0000"><i> *</font></i>
<a name="66" href="#66">66</a>  <font color="#AA0000"><i> * @version $Id: OperandStack.java,v 1.2 2002/08/02 11:57:51 enver Exp $</font></i>
<a name="67" href="#67">67</a>  <font color="#AA0000"><i> * @author &lt;A HREF="<a href="http://www.inf.fu" target="alexandria_uri">http://www.inf.fu</a>-berlin.de/~ehaase"/&gt;Enver Haase&lt;/A&gt;</font></i>
<a name="68" href="#68">68</a>  <font color="#AA0000"><i> */</font></i>
<a name="69" href="#69">69</a>  <b>public</b> <b>class</b> <a href="../../../../../org/apache/bcel/verifier/structurals/OperandStack.html">OperandStack</a>{
<a name="70" href="#70">70</a>  
<a name="71" href="#71">71</a>  	<font color="#AA0000"><i>/**<font color="#AA0000"><i>* We hold the stack information here. */</font></i></font></i>
<a name="72" href="#72">72</a>  	<b>private</b> ArrayList stack = <b>new</b> ArrayList();
<a name="73" href="#73">73</a>  
<a name="74" href="#74">74</a>  	<font color="#AA0000"><i>/**<font color="#AA0000"><i>* The maximum number of stack slots this <a href="../../../../../org/apache/bcel/verifier/structurals/OperandStack.html">OperandStack</a> instance may hold. */</font></i></font></i>
<a name="75" href="#75">75</a>  	<b>private</b> <b>int</b> maxStack;
<a name="76" href="#76">76</a>  
<a name="77" href="#77">77</a>  	<font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="78" href="#78">78</a>  <font color="#AA0000"><i>	 * Creates an empty stack with a maximum of maxStack slots.</font></i>
<a name="79" href="#79">79</a>  <font color="#AA0000"><i>	 */</font></i>
<a name="80" href="#80">80</a>  	<b>public</b> <a href="../../../../../org/apache/bcel/verifier/structurals/OperandStack.html">OperandStack</a>(<b>int</b> maxStack){
<a name="81" href="#81">81</a>  		<b>this</b>.maxStack = maxStack;
<a name="82" href="#82">82</a>  	}
<a name="83" href="#83">83</a>  
<a name="84" href="#84">84</a>  	<font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="85" href="#85">85</a>  <font color="#AA0000"><i>	 * Creates an otherwise empty stack with a maximum of maxStack slots and</font></i>
<a name="86" href="#86">86</a>  <font color="#AA0000"><i>	 * the ObjectType 'obj' at the top.</font></i>
<a name="87" href="#87">87</a>  <font color="#AA0000"><i>	 */</font></i>
<a name="88" href="#88">88</a>  	<b>public</b> <a href="../../../../../org/apache/bcel/verifier/structurals/OperandStack.html">OperandStack</a>(<b>int</b> maxStack, <a href="../../../../../org/apache/bcel/generic/ObjectType.html">ObjectType</a> obj){
<a name="89" href="#89">89</a>  		<b>this</b>.maxStack = maxStack;
<a name="90" href="#90">90</a>  		<b>this</b>.push(obj);
<a name="91" href="#91">91</a>  	}	
<a name="92" href="#92">92</a>  	<font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="93" href="#93">93</a>  <font color="#AA0000"><i>	 * Returns a deep copy of this object; that means, the clone operates</font></i>
<a name="94" href="#94">94</a>  <font color="#AA0000"><i>	 * on a new stack. However, the Type objects on the stack are</font></i>
<a name="95" href="#95">95</a>  <font color="#AA0000"><i>	 * shared.</font></i>
<a name="96" href="#96">96</a>  <font color="#AA0000"><i>	 */</font></i>
<a name="97" href="#97">97</a>  	<b>protected</b> Object clone(){
<a name="98" href="#98">98</a>  		OperandStack <b>new</b>stack = <b>new</b> <a href="../../../../../org/apache/bcel/verifier/structurals/OperandStack.html">OperandStack</a>(<b>this</b>.maxStack);
<a name="99" href="#99">99</a>  		newstack.stack = (ArrayList) <b>this</b>.stack.clone();
<a name="100" href="#100">100</a> 		<b>return</b> newstack;
<a name="101" href="#101">101</a> 	}
<a name="102" href="#102">102</a> 
<a name="103" href="#103">103</a> 	<font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="104" href="#104">104</a> <font color="#AA0000"><i>	 * Clears the stack.</font></i>
<a name="105" href="#105">105</a> <font color="#AA0000"><i>	 */</font></i>
<a name="106" href="#106">106</a> 	<b>public</b> <b>void</b> clear(){
<a name="107" href="#107">107</a> 		stack = <b>new</b> ArrayList();
<a name="108" href="#108">108</a> 	}
<a name="109" href="#109">109</a> 
<a name="110" href="#110">110</a> 	<font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="111" href="#111">111</a> <font color="#AA0000"><i>	 * Returns true if and only if this OperandStack</font></i>
<a name="112" href="#112">112</a> <font color="#AA0000"><i>	 * equals another, meaning equal lengths and equal</font></i>
<a name="113" href="#113">113</a> <font color="#AA0000"><i>	 * objects on the stacks.</font></i>
<a name="114" href="#114">114</a> <font color="#AA0000"><i>	 */</font></i>
<a name="115" href="#115">115</a> 	<b>public</b> <b>boolean</b> equals(Object o){
<a name="116" href="#116">116</a> 		<b>if</b> (!(o instanceof OperandStack)) <b>return</b> false;
<a name="117" href="#117">117</a> 		OperandStack s = (OperandStack) o;
<a name="118" href="#118">118</a> 		<b>return</b> <b>this</b>.stack.equals(s.stack);
<a name="119" href="#119">119</a> 	}
<a name="120" href="#120">120</a> 
<a name="121" href="#121">121</a> 	<font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="122" href="#122">122</a> <font color="#AA0000"><i>	 * Returns a (typed!) clone of this.</font></i>
<a name="123" href="#123">123</a> <font color="#AA0000"><i>	 *</font></i>
<a name="124" href="#124">124</a> <font color="#AA0000"><i>	 * @see #clone()</font></i>
<a name="125" href="#125">125</a> <font color="#AA0000"><i>	 */</font></i>
<a name="126" href="#126">126</a> 	<b>public</b> <a href="../../../../../org/apache/bcel/verifier/structurals/OperandStack.html">OperandStack</a> getClone(){
<a name="127" href="#127">127</a> 		<b>return</b> (OperandStack) <b>this</b>.clone();
<a name="128" href="#128">128</a> 	}
<a name="129" href="#129">129</a> 
<a name="130" href="#130">130</a> 	<font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="131" href="#131">131</a> <font color="#AA0000"><i>	 * Returns true IFF this OperandStack is empty.</font></i>
<a name="132" href="#132">132</a> <font color="#AA0000"><i>   */</font></i>
<a name="133" href="#133">133</a> 	<b>public</b> <b>boolean</b> isEmpty(){
<a name="134" href="#134">134</a> 		<b>return</b> stack.isEmpty();
<a name="135" href="#135">135</a> 	}
<a name="136" href="#136">136</a> 
<a name="137" href="#137">137</a> 	<font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="138" href="#138">138</a> <font color="#AA0000"><i>	 * Returns the number of stack slots this stack can hold.</font></i>
<a name="139" href="#139">139</a> <font color="#AA0000"><i>	 */</font></i>
<a name="140" href="#140">140</a> 	<b>public</b> <b>int</b> maxStack(){
<a name="141" href="#141">141</a> 		<b>return</b> <b>this</b>.maxStack;
<a name="142" href="#142">142</a> 	}
<a name="143" href="#143">143</a> 
<a name="144" href="#144">144</a> 	<font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="145" href="#145">145</a> <font color="#AA0000"><i>	 * Returns the element on top of the stack. The element is not popped off the stack!</font></i>
<a name="146" href="#146">146</a> <font color="#AA0000"><i>	 */</font></i>
<a name="147" href="#147">147</a> 	<b>public</b> <a href="../../../../../org/apache/bcel/generic/Type.html">Type</a> peek(){
<a name="148" href="#148">148</a> 		<b>return</b> peek(0);
<a name="149" href="#149">149</a> 	}
<a name="150" href="#150">150</a> 
<a name="151" href="#151">151</a> 	<font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="152" href="#152">152</a> <font color="#AA0000"><i>   * Returns the element that's i elements below the top element; that means,</font></i>
<a name="153" href="#153">153</a> <font color="#AA0000"><i>   * iff i==0 the top element is returned. The element is not popped off the stack!</font></i>
<a name="154" href="#154">154</a> <font color="#AA0000"><i>   */</font></i>
<a name="155" href="#155">155</a> 	<b>public</b> <a href="../../../../../org/apache/bcel/generic/Type.html">Type</a> peek(<b>int</b> i){
<a name="156" href="#156">156</a> 		<b>return</b> (Type) stack.get(size()-i-1);
<a name="157" href="#157">157</a> 	}
<a name="158" href="#158">158</a> 
<a name="159" href="#159">159</a> 	<font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="160" href="#160">160</a> <font color="#AA0000"><i>	 * Returns the element on top of the stack. The element is popped off the stack.</font></i>
<a name="161" href="#161">161</a> <font color="#AA0000"><i>	 */</font></i>
<a name="162" href="#162">162</a> 	<b>public</b> <a href="../../../../../org/apache/bcel/generic/Type.html">Type</a> pop(){
<a name="163" href="#163">163</a> 		Type e = (Type) stack.remove(size()-1);
<a name="164" href="#164">164</a> 		<b>return</b> e;
<a name="165" href="#165">165</a> 	}
<a name="166" href="#166">166</a> 
<a name="167" href="#167">167</a> 	<font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="168" href="#168">168</a> <font color="#AA0000"><i>	 * Pops i elements off the stack. ALWAYS RETURNS "null"!!!</font></i>
<a name="169" href="#169">169</a> <font color="#AA0000"><i>	 */</font></i>
<a name="170" href="#170">170</a> 	<b>public</b> <a href="../../../../../org/apache/bcel/generic/Type.html">Type</a> pop(<b>int</b> i){
<a name="171" href="#171">171</a> 		<b>for</b> (<b>int</b> j=0; j&lt;i; j++){
<a name="172" href="#172">172</a> 			pop();
<a name="173" href="#173">173</a> 		}
<a name="174" href="#174">174</a> 		<b>return</b> <b>null</b>;
<a name="175" href="#175">175</a> 	}
<a name="176" href="#176">176</a> 
<a name="177" href="#177">177</a> 	<font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="178" href="#178">178</a> <font color="#AA0000"><i>	 * Pushes a Type object onto the stack.</font></i>
<a name="179" href="#179">179</a> <font color="#AA0000"><i>	 */</font></i>
<a name="180" href="#180">180</a> 	<b>public</b> <b>void</b> push(<a href="../../../../../org/apache/bcel/generic/Type.html">Type</a> type){
<a name="181" href="#181">181</a> 		<b>if</b> (type == <b>null</b>) <b>throw</b> <b>new</b> AssertionViolatedException(<font color="#000099">"Cannot push NULL onto OperandStack."</font>);
<a name="182" href="#182">182</a> 		<b>if</b> (type == Type.BOOLEAN || type == Type.CHAR || type == Type.BYTE || type == Type.SHORT){
<a name="183" href="#183">183</a> 			<b>throw</b> <b>new</b> <a href="../../../../../org/apache/bcel/verifier/exc/AssertionViolatedException.html">AssertionViolatedException</a>(<font color="#000099">"The OperandStack does not know about '"</font>+type+<font color="#000099">"'; use Type.INT instead."</font>);
<a name="184" href="#184">184</a> 		}
<a name="185" href="#185">185</a> 		<b>if</b> (slotsUsed() &gt;= maxStack){
<a name="186" href="#186">186</a> 			<b>throw</b> <b>new</b> <a href="../../../../../org/apache/bcel/verifier/exc/AssertionViolatedException.html">AssertionViolatedException</a>(<font color="#000099">"OperandStack too small, should have thrown proper Exception elsewhere. Stack: "</font>+<b>this</b>);
<a name="187" href="#187">187</a> 		}
<a name="188" href="#188">188</a> 		stack.add(type);
<a name="189" href="#189">189</a> 	}
<a name="190" href="#190">190</a> 
<a name="191" href="#191">191</a> 	<font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="192" href="#192">192</a> <font color="#AA0000"><i>	 * Returns the size of this OperandStack; that means, how many Type objects there are.</font></i>
<a name="193" href="#193">193</a> <font color="#AA0000"><i>	 */</font></i>
<a name="194" href="#194">194</a> 	<b>int</b> size(){
<a name="195" href="#195">195</a> 		<b>return</b> stack.size();
<a name="196" href="#196">196</a> 	}
<a name="197" href="#197">197</a> 
<a name="198" href="#198">198</a> 	<font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="199" href="#199">199</a> <font color="#AA0000"><i>	 * Returns the number of stack slots used.</font></i>
<a name="200" href="#200">200</a> <font color="#AA0000"><i>	 * @see #maxStack()</font></i>
<a name="201" href="#201">201</a> <font color="#AA0000"><i>	 */</font></i>	
<a name="202" href="#202">202</a> 	<b>public</b> <b>int</b> slotsUsed(){
<a name="203" href="#203">203</a> 		<font color="#329900"><i>/*<font color="#329900"><i>  XXX change this to a better implementation using a variable</font></i></font></i>
<a name="204" href="#204">204</a> <font color="#329900"><i>		    that keeps track of the actual slotsUsed()-value monitoring</font></i>
<a name="205" href="#205">205</a> <font color="#329900"><i>		    all push()es and pop()s.</font></i>
<a name="206" href="#206">206</a> <font color="#329900"><i>		*/</font></i>
<a name="207" href="#207">207</a> 		<b>int</b> slots = 0;
<a name="208" href="#208">208</a> 		<b>for</b> (<b>int</b> i=0; i&lt;stack.size(); i++){
<a name="209" href="#209">209</a> 			slots += peek(i).getSize();
<a name="210" href="#210">210</a> 		}
<a name="211" href="#211">211</a> 		<b>return</b> slots;
<a name="212" href="#212">212</a> 	}
<a name="213" href="#213">213</a> 	
<a name="214" href="#214">214</a> 	<font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="215" href="#215">215</a> <font color="#AA0000"><i>	 * Returns a String representation of this OperandStack instance.</font></i>
<a name="216" href="#216">216</a> <font color="#AA0000"><i>	 */</font></i>
<a name="217" href="#217">217</a> 	<b>public</b> String toString(){
<a name="218" href="#218">218</a> 		String s = <font color="#000099">"Slots used: "</font>+slotsUsed()+<font color="#000099">" MaxStack: "</font>+maxStack+<font color="#000099">".\n"</font>;
<a name="219" href="#219">219</a> 		<b>for</b> (<b>int</b> i=0; i&lt;size(); i++){
<a name="220" href="#220">220</a> 			s+=peek(i)+<font color="#000099">" (Size: "</font>+peek(i).getSize()+<font color="#000099">")\n"</font>;
<a name="221" href="#221">221</a> 		}
<a name="222" href="#222">222</a> 		<b>return</b> s;
<a name="223" href="#223">223</a> 	}
<a name="224" href="#224">224</a> 
<a name="225" href="#225">225</a> 	<font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="226" href="#226">226</a> <font color="#AA0000"><i>	 * Merges another stack state into this instance's stack state.</font></i>
<a name="227" href="#227">227</a> <font color="#AA0000"><i>	 * See the Java Virtual Machine Specification, Second Edition, page 146: 4.9.2</font></i>
<a name="228" href="#228">228</a> <font color="#AA0000"><i>	 * for details.</font></i>
<a name="229" href="#229">229</a> <font color="#AA0000"><i>	 */</font></i>
<a name="230" href="#230">230</a> 	<b>public</b> <b>void</b> merge(<a href="../../../../../org/apache/bcel/verifier/structurals/OperandStack.html">OperandStack</a> s){
<a name="231" href="#231">231</a> 		<b>if</b> ( (slotsUsed() != s.slotsUsed()) || (size() != s.size()) )
<a name="232" href="#232">232</a> 			<b>throw</b> <b>new</b> <a href="../../../../../org/apache/bcel/verifier/exc/StructuralCodeConstraintException.html">StructuralCodeConstraintException</a>(<font color="#000099">"Cannot merge stacks of different size:\nOperandStack A:\n"</font>+<b>this</b>+<font color="#000099">"\nOperandStack B:\n"</font>+s);
<a name="233" href="#233">233</a> 		
<a name="234" href="#234">234</a> 		<b>for</b> (<b>int</b> i=0; i&lt;size(); i++){
<a name="235" href="#235">235</a> 			<font color="#329900"><i>// If the object _was_ initialized and we're supposed to merge</font></i>
<a name="236" href="#236">236</a> 			<font color="#329900"><i>// in some uninitialized object, we reject the code (see vmspec2, 4.9.4, last paragraph).</font></i>
<a name="237" href="#237">237</a> 			<b>if</b> ( (! (stack.get(i) instanceof UninitializedObjectType)) && (s.stack.get(i) instanceof UninitializedObjectType) ){
<a name="238" href="#238">238</a> 				<b>throw</b> <b>new</b> <a href="../../../../../org/apache/bcel/verifier/exc/StructuralCodeConstraintException.html">StructuralCodeConstraintException</a>(<font color="#000099">"Backwards branch with an uninitialized object on the stack detected."</font>);
<a name="239" href="#239">239</a> 			}
<a name="240" href="#240">240</a> 			<font color="#329900"><i>// Even harder, we're not initialized but are supposed to broaden</font></i>
<a name="241" href="#241">241</a> 			<font color="#329900"><i>// the known object type</font></i>
<a name="242" href="#242">242</a> 			<b>if</b> ( (!(stack.get(i).equals(s.stack.get(i)))) && (stack.get(i) instanceof UninitializedObjectType) && (!(s.stack.get(i) instanceof UninitializedObjectType))){
<a name="243" href="#243">243</a> 				<b>throw</b> <b>new</b> <a href="../../../../../org/apache/bcel/verifier/exc/StructuralCodeConstraintException.html">StructuralCodeConstraintException</a>(<font color="#000099">"Backwards branch with an uninitialized object on the stack detected."</font>);
<a name="244" href="#244">244</a> 			}
<a name="245" href="#245">245</a> 			<font color="#329900"><i>// on the other hand...</font></i>
<a name="246" href="#246">246</a> 			<b>if</b> (stack.get(i) instanceof UninitializedObjectType){ <font color="#329900"><i>//if we have an uninitialized object here</font></i>
<a name="247" href="#247">247</a> 				<b>if</b> (! (s.stack.get(i) instanceof UninitializedObjectType)){ <font color="#329900"><i>//that has been initialized by now</font></i>
<a name="248" href="#248">248</a> 					stack.set(i, ((UninitializedObjectType) (stack.get(i))).getInitialized() ); <font color="#329900"><i>//note that.</font></i>
<a name="249" href="#249">249</a> 				}
<a name="250" href="#250">250</a> 			}
<a name="251" href="#251">251</a> 			<b>if</b> (! stack.get(i).equals(s.stack.get(i))){
<a name="252" href="#252">252</a> 				<b>if</b> (	(stack.get(i) instanceof ReferenceType) &&
<a name="253" href="#253">253</a> 							(s.stack.get(i) instanceof ReferenceType)  ){
<a name="254" href="#254">254</a> 					stack.set(i, ((ReferenceType) stack.get(i)).getFirstCommonSuperclass((ReferenceType) (s.stack.get(i))));
<a name="255" href="#255">255</a> 				}
<a name="256" href="#256">256</a> 				<b>else</b>{
<a name="257" href="#257">257</a> 					<b>throw</b> <b>new</b> <a href="../../../../../org/apache/bcel/verifier/exc/StructuralCodeConstraintException.html">StructuralCodeConstraintException</a>(<font color="#000099">"Cannot merge stacks of different types:\nStack A:\n"</font>+<b>this</b>+<font color="#000099">"\nStack B:\n"</font>+s);
<a name="258" href="#258">258</a> 				}
<a name="259" href="#259">259</a> 			}
<a name="260" href="#260">260</a> 		}
<a name="261" href="#261">261</a> 	}
<a name="262" href="#262">262</a> 
<a name="263" href="#263">263</a> 	<font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="264" href="#264">264</a> <font color="#AA0000"><i>	 * Replaces all occurences of u in this OperandStack instance</font></i>
<a name="265" href="#265">265</a> <font color="#AA0000"><i>	 * with an "initialized" ObjectType.</font></i>
<a name="266" href="#266">266</a> <font color="#AA0000"><i>	 */</font></i>
<a name="267" href="#267">267</a> 	<b>public</b> <b>void</b> initializeObject(<a href="../../../../../org/apache/bcel/verifier/structurals/UninitializedObjectType.html">UninitializedObjectType</a> u){
<a name="268" href="#268">268</a> 		<b>for</b> (<b>int</b> i=0; i&lt;stack.size(); i++){
<a name="269" href="#269">269</a> 			<b>if</b> (stack.get(i) == u){
<a name="270" href="#270">270</a> 				stack.set(i, u.getInitialized());
<a name="271" href="#271">271</a> 			}
<a name="272" href="#272">272</a> 		}
<a name="273" href="#273">273</a> 	}
<a name="274" href="#274">274</a> 
<a name="275" href="#275">275</a> }
</pre>
<hr><center>This page was automatically generated by <a href="http://jakarta.apache.org/turbine/maven">Maven</a></center></body>
</html>

