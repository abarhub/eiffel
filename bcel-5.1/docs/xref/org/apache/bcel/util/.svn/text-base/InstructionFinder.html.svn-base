<html>
<body bgcolor="white">
<pre>
<table bgcolor="#FFFFCC" cellpadding="0" cellspacing="0" border="0" width="100%"><a href="../../../../../apidocs/org/apache/bcel/util/InstructionFinder.html">View Javadoc</a></table>
<a name="1" href="#1">1</a>   <b>package</b> <a href="../../../../org/apache/bcel/util/package-summary.html">org.apache.bcel.util</a>;
<a name="2" href="#2">2</a>   
<a name="3" href="#3">3</a>   <font color="#329900"><i>/*<font color="#329900"><i> ====================================================================</font></i></font></i>
<a name="4" href="#4">4</a>   <font color="#329900"><i> * The Apache Software License, Version 1.1</font></i>
<a name="5" href="#5">5</a>   <font color="#329900"><i> *</font></i>
<a name="6" href="#6">6</a>   <font color="#329900"><i> * Copyright (c) 2001 The Apache Software Foundation.  All rights</font></i>
<a name="7" href="#7">7</a>   <font color="#329900"><i> * reserved.</font></i>
<a name="8" href="#8">8</a>   <font color="#329900"><i> *</font></i>
<a name="9" href="#9">9</a>   <font color="#329900"><i> * Redistribution and use in source and binary forms, with or without</font></i>
<a name="10" href="#10">10</a>  <font color="#329900"><i> * modification, are permitted provided that the following conditions</font></i>
<a name="11" href="#11">11</a>  <font color="#329900"><i> * are met:</font></i>
<a name="12" href="#12">12</a>  <font color="#329900"><i> *</font></i>
<a name="13" href="#13">13</a>  <font color="#329900"><i> * 1. Redistributions of source code must retain the above copyright</font></i>
<a name="14" href="#14">14</a>  <font color="#329900"><i> *    notice, this list of conditions and the following disclaimer.</font></i>
<a name="15" href="#15">15</a>  <font color="#329900"><i> *</font></i>
<a name="16" href="#16">16</a>  <font color="#329900"><i> * 2. Redistributions in binary form must reproduce the above copyright</font></i>
<a name="17" href="#17">17</a>  <font color="#329900"><i> *    notice, this list of conditions and the following disclaimer in</font></i>
<a name="18" href="#18">18</a>  <font color="#329900"><i> *    the documentation and/or other materials provided with the</font></i>
<a name="19" href="#19">19</a>  <font color="#329900"><i> *    distribution.</font></i>
<a name="20" href="#20">20</a>  <font color="#329900"><i> *</font></i>
<a name="21" href="#21">21</a>  <font color="#329900"><i> * 3. The end-user documentation included with the redistribution,</font></i>
<a name="22" href="#22">22</a>  <font color="#329900"><i> *    if any, must include the following acknowledgment:</font></i>
<a name="23" href="#23">23</a>  <font color="#329900"><i> *       "This product includes software developed by the</font></i>
<a name="24" href="#24">24</a>  <font color="#329900"><i> *        Apache Software Foundation (<a href="http://www.apache.org/" target="alexandria_uri">http://www.apache.org/</a>)."</font></i>
<a name="25" href="#25">25</a>  <font color="#329900"><i> *    Alternately, this acknowledgment may appear in the software itself,</font></i>
<a name="26" href="#26">26</a>  <font color="#329900"><i> *    if and wherever such third-party acknowledgments normally appear.</font></i>
<a name="27" href="#27">27</a>  <font color="#329900"><i> *</font></i>
<a name="28" href="#28">28</a>  <font color="#329900"><i> * 4. The names "Apache" and "Apache Software Foundation" and</font></i>
<a name="29" href="#29">29</a>  <font color="#329900"><i> *    "Apache BCEL" must not be used to endorse or promote products</font></i>
<a name="30" href="#30">30</a>  <font color="#329900"><i> *    derived from this software without prior written permission. For</font></i>
<a name="31" href="#31">31</a>  <font color="#329900"><i> *    written permission, please contact apache@apache.org.</font></i>
<a name="32" href="#32">32</a>  <font color="#329900"><i> *</font></i>
<a name="33" href="#33">33</a>  <font color="#329900"><i> * 5. Products derived from this software may not be called "Apache",</font></i>
<a name="34" href="#34">34</a>  <font color="#329900"><i> *    "Apache BCEL", nor may "Apache" appear in their name, without</font></i>
<a name="35" href="#35">35</a>  <font color="#329900"><i> *    prior written permission of the Apache Software Foundation.</font></i>
<a name="36" href="#36">36</a>  <font color="#329900"><i> *</font></i>
<a name="37" href="#37">37</a>  <font color="#329900"><i> * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED</font></i>
<a name="38" href="#38">38</a>  <font color="#329900"><i> * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES</font></i>
<a name="39" href="#39">39</a>  <font color="#329900"><i> * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</font></i>
<a name="40" href="#40">40</a>  <font color="#329900"><i> * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR</font></i>
<a name="41" href="#41">41</a>  <font color="#329900"><i> * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</font></i>
<a name="42" href="#42">42</a>  <font color="#329900"><i> * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</font></i>
<a name="43" href="#43">43</a>  <font color="#329900"><i> * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF</font></i>
<a name="44" href="#44">44</a>  <font color="#329900"><i> * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND</font></i>
<a name="45" href="#45">45</a>  <font color="#329900"><i> * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</font></i>
<a name="46" href="#46">46</a>  <font color="#329900"><i> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT</font></i>
<a name="47" href="#47">47</a>  <font color="#329900"><i> * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF</font></i>
<a name="48" href="#48">48</a>  <font color="#329900"><i> * SUCH DAMAGE.</font></i>
<a name="49" href="#49">49</a>  <font color="#329900"><i> * ====================================================================</font></i>
<a name="50" href="#50">50</a>  <font color="#329900"><i> *</font></i>
<a name="51" href="#51">51</a>  <font color="#329900"><i> * This software consists of voluntary contributions made by many</font></i>
<a name="52" href="#52">52</a>  <font color="#329900"><i> * individuals on behalf of the Apache Software Foundation.  For more</font></i>
<a name="53" href="#53">53</a>  <font color="#329900"><i> * information on the Apache Software Foundation, please see</font></i>
<a name="54" href="#54">54</a>  <font color="#329900"><i> * &lt;<a href="http://www.apache.org/&gt" target="alexandria_uri">http://www.apache.org/&gt</a>;.</font></i>
<a name="55" href="#55">55</a>  <font color="#329900"><i> */</font></i>
<a name="56" href="#56">56</a>  
<a name="57" href="#57">57</a>  <b>import</b> java.util.*;
<a name="58" href="#58">58</a>  <b>import</b> org.apache.bcel.Constants;
<a name="59" href="#59">59</a>  <b>import</b> org.apache.bcel.<b>generic</b>.*;
<a name="60" href="#60">60</a>  <b>import</b> org.apache.regexp.*;
<a name="61" href="#61">61</a>  
<a name="62" href="#62">62</a>  <font color="#AA0000"><i>/**<font color="#AA0000"><i>* </font></i></font></i>
<a name="63" href="#63">63</a>  <font color="#AA0000"><i> * InstructionFinder is a tool to search for given instructions patterns,</font></i>
<a name="64" href="#64">64</a>  <font color="#AA0000"><i> * i.e., match sequences of instructions in an instruction list via</font></i>
<a name="65" href="#65">65</a>  <font color="#AA0000"><i> * regular expressions. This can be used, e.g., in order to implement</font></i>
<a name="66" href="#66">66</a>  <font color="#AA0000"><i> * a peep hole optimizer that looks for code patterns and replaces</font></i>
<a name="67" href="#67">67</a>  <font color="#AA0000"><i> * them with faster equivalents.</font></i>
<a name="68" href="#68">68</a>  <font color="#AA0000"><i> *</font></i>
<a name="69" href="#69">69</a>  <font color="#AA0000"><i> * &lt;p&gt;This class internally uses the &lt;a href="<a href="http://jakarta.apache.org/regexp/" target="alexandria_uri">http://jakarta.apache.org/regexp/</a>"&gt;</font></i>
<a name="70" href="#70">70</a>  <font color="#AA0000"><i> * Regexp&lt;/a&gt; package to search for regular expressions.</font></i>
<a name="71" href="#71">71</a>  <font color="#AA0000"><i> *</font></i>
<a name="72" href="#72">72</a>  <font color="#AA0000"><i> * A typical application would look like this:</font></i>
<a name="73" href="#73">73</a>  <font color="#AA0000"><i>&lt;pre&gt;</font></i>
<a name="74" href="#74">74</a>  <font color="#AA0000"><i>    InstructionFinder f   = new InstructionFinder(il);</font></i>
<a name="75" href="#75">75</a>  <font color="#AA0000"><i>    String            pat = "IfInstruction ICONST_0 GOTO ICONST_1 NOP (IFEQ|IFNE)";</font></i>
<a name="76" href="#76">76</a>  <font color="#AA0000"><i>    </font></i>
<a name="77" href="#77">77</a>  <font color="#AA0000"><i>    for(Iterator i = f.search(pat, constraint); i.hasNext(); ) {</font></i>
<a name="78" href="#78">78</a>  <font color="#AA0000"><i>      InstructionHandle[] match = (InstructionHandle[])i.next();</font></i>
<a name="79" href="#79">79</a>  <font color="#AA0000"><i>      ...</font></i>
<a name="80" href="#80">80</a>  <font color="#AA0000"><i>      il.delete(match[1], match[5]);</font></i>
<a name="81" href="#81">81</a>  <font color="#AA0000"><i>      ...</font></i>
<a name="82" href="#82">82</a>  <font color="#AA0000"><i>    }</font></i>
<a name="83" href="#83">83</a>  <font color="#AA0000"><i>&lt;/pre&gt;</font></i>
<a name="84" href="#84">84</a>  <font color="#AA0000"><i> * @version $Id: InstructionFinder.java,v 1.1.1.1 2001/10/29 20:00:30 jvanzyl Exp $</font></i>
<a name="85" href="#85">85</a>  <font color="#AA0000"><i> * @author  &lt;A HREF="<a href="http://www.berlin.de/" target="alexandria_uri">http://www.berlin.de/</a>~markus.dahm/"&gt;M. Dahm&lt;/A&gt;</font></i>
<a name="86" href="#86">86</a>  <font color="#AA0000"><i> * @see Instruction</font></i>
<a name="87" href="#87">87</a>  <font color="#AA0000"><i> * @see InstructionList</font></i>
<a name="88" href="#88">88</a>  <font color="#AA0000"><i> */</font></i>
<a name="89" href="#89">89</a>  <b>public</b> <b>class</b> <a href="../../../../org/apache/bcel/util/InstructionFinder.html">InstructionFinder</a> {
<a name="90" href="#90">90</a>    <b>private</b> <b>static</b> <b>final</b> <b>int</b> OFFSET     = 32767; <font color="#329900"><i>// char + OFFSET is outside of LATIN-1</font></i>
<a name="91" href="#91">91</a>    <b>private</b> <b>static</b> <b>final</b> <b>int</b> NO_OPCODES = 256;   <font color="#329900"><i>// Potential number, some are not used</font></i>
<a name="92" href="#92">92</a>  
<a name="93" href="#93">93</a>    <b>private</b> <b>static</b> <b>final</b> HashMap map = <b>new</b> HashMap(); <font color="#329900"><i>// Map&lt;String,Pattern&gt;</font></i>
<a name="94" href="#94">94</a>  
<a name="95" href="#95">95</a>    <b>private</b> <a href="../../../../org/apache/bcel/generic/InstructionList.html">InstructionList</a>     il;
<a name="96" href="#96">96</a>    <b>private</b> String              il_string;    <font color="#329900"><i>// instruction list as string</font></i>
<a name="97" href="#97">97</a>    <b>private</b> <a href="../../../../org/apache/bcel/generic/InstructionHandle.html">InstructionHandle</a>[] handles;      <font color="#329900"><i>// map instruction list to array</font></i>
<a name="98" href="#98">98</a>  
<a name="99" href="#99">99</a>    <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="100" href="#100">100</a> <font color="#AA0000"><i>   * @param il instruction list to search for given patterns</font></i>
<a name="101" href="#101">101</a> <font color="#AA0000"><i>   */</font></i>
<a name="102" href="#102">102</a>   <b>public</b> <a href="../../../../org/apache/bcel/util/InstructionFinder.html">InstructionFinder</a>(<a href="../../../../org/apache/bcel/generic/InstructionList.html">InstructionList</a> il) {
<a name="103" href="#103">103</a>     <b>this</b>.il = il;
<a name="104" href="#104">104</a>     reread();
<a name="105" href="#105">105</a>   }
<a name="106" href="#106">106</a> 
<a name="107" href="#107">107</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="108" href="#108">108</a> <font color="#AA0000"><i>   * Reread the instruction list, e.g., after you've altered the list upon a match.</font></i>
<a name="109" href="#109">109</a> <font color="#AA0000"><i>   */</font></i>
<a name="110" href="#110">110</a>   <b>public</b> <b>final</b> <b>void</b> reread() {
<a name="111" href="#111">111</a>     <b>int</b>    size  = il.getLength();
<a name="112" href="#112">112</a>     <b>char</b>[] buf   = <b>new</b> <b>char</b>[size]; <font color="#329900"><i>// Create a string with length equal to il length</font></i>
<a name="113" href="#113">113</a>     handles      = il.getInstructionHandles();
<a name="114" href="#114">114</a> 
<a name="115" href="#115">115</a>     <font color="#329900"><i>// Map opcodes to characters</font></i>
<a name="116" href="#116">116</a>     <b>for</b>(<b>int</b> i=0; i &lt; size; i++)
<a name="117" href="#117">117</a>       buf[i] = makeChar(handles[i].getInstruction().getOpcode());
<a name="118" href="#118">118</a> 
<a name="119" href="#119">119</a>     il_string = <b>new</b> String(buf);
<a name="120" href="#120">120</a>   }
<a name="121" href="#121">121</a> 
<a name="122" href="#122">122</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="123" href="#123">123</a> <font color="#AA0000"><i>   * Map symbolic instruction names like "getfield" to a single character.</font></i>
<a name="124" href="#124">124</a> <font color="#AA0000"><i>   *</font></i>
<a name="125" href="#125">125</a> <font color="#AA0000"><i>   * @param pattern instruction pattern in lower case</font></i>
<a name="126" href="#126">126</a> <font color="#AA0000"><i>   * @return encoded string for a pattern such as "BranchInstruction".</font></i>
<a name="127" href="#127">127</a> <font color="#AA0000"><i>   */</font></i>
<a name="128" href="#128">128</a>   <b>private</b> <b>static</b> <b>final</b> String mapName(String pattern) {
<a name="129" href="#129">129</a>     String result = (String)map.get(pattern);
<a name="130" href="#130">130</a> 
<a name="131" href="#131">131</a>     <b>if</b>(result != <b>null</b>)
<a name="132" href="#132">132</a>       <b>return</b> result;
<a name="133" href="#133">133</a> 
<a name="134" href="#134">134</a>     <b>for</b>(<b>short</b> i=0; i &lt; NO_OPCODES; i++)
<a name="135" href="#135">135</a>       <b>if</b>(pattern.equals(Constants.OPCODE_NAMES[i]))
<a name="136" href="#136">136</a> 	<b>return</b> <font color="#000099">""</font> + makeChar(i);
<a name="137" href="#137">137</a> 
<a name="138" href="#138">138</a>     <b>throw</b> <b>new</b> RuntimeException(<font color="#000099">"Instruction unknown: "</font> + pattern);
<a name="139" href="#139">139</a>   }
<a name="140" href="#140">140</a> 
<a name="141" href="#141">141</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="142" href="#142">142</a> <font color="#AA0000"><i>   * Replace symbolic names of instructions with the appropiate character and remove</font></i>
<a name="143" href="#143">143</a> <font color="#AA0000"><i>   * all white space from string. Meta characters such as +, * are ignored.</font></i>
<a name="144" href="#144">144</a> <font color="#AA0000"><i>   *</font></i>
<a name="145" href="#145">145</a> <font color="#AA0000"><i>   * @param pattern The pattern to compile</font></i>
<a name="146" href="#146">146</a> <font color="#AA0000"><i>   * @return translated regular expression string</font></i>
<a name="147" href="#147">147</a> <font color="#AA0000"><i>   */</font></i>
<a name="148" href="#148">148</a>   <b>private</b> <b>static</b> <b>final</b> String compilePattern(String pattern) {
<a name="149" href="#149">149</a>     String       lower      = pattern.toLowerCase();
<a name="150" href="#150">150</a>     StringBuffer buf        = <b>new</b> StringBuffer();
<a name="151" href="#151">151</a>     <b>int</b>          size       = pattern.length();
<a name="152" href="#152">152</a> 
<a name="153" href="#153">153</a>     <b>for</b>(<b>int</b> i=0; i &lt; size; i++) {
<a name="154" href="#154">154</a>       <b>char</b> ch = lower.<b>char</b>At(i);
<a name="155" href="#155">155</a>       
<a name="156" href="#156">156</a>       <b>if</b>(Character.isLetterOrDigit(ch)) {
<a name="157" href="#157">157</a> 	StringBuffer name = <b>new</b> StringBuffer();
<a name="158" href="#158">158</a> 	
<a name="159" href="#159">159</a> 	<b>while</b>((Character.isLetterOrDigit(ch) || ch == '_') && i &lt; size) {
<a name="160" href="#160">160</a> 	  name.append(ch);
<a name="161" href="#161">161</a> 
<a name="162" href="#162">162</a> 	  <b>if</b>(++i &lt; size)
<a name="163" href="#163">163</a> 	    ch = lower.charAt(i);
<a name="164" href="#164">164</a> 	  <b>else</b>
<a name="165" href="#165">165</a> 	    <b>break</b>;
<a name="166" href="#166">166</a> 	}
<a name="167" href="#167">167</a> 	
<a name="168" href="#168">168</a> 	i--;
<a name="169" href="#169">169</a> 
<a name="170" href="#170">170</a> 	buf.append(mapName(name.toString()));
<a name="171" href="#171">171</a>       } <b>else</b> <b>if</b>(!Character.isWhitespace(ch))
<a name="172" href="#172">172</a> 	buf.append(ch);
<a name="173" href="#173">173</a>     }
<a name="174" href="#174">174</a> 
<a name="175" href="#175">175</a>     <b>return</b> buf.toString();
<a name="176" href="#176">176</a>   }
<a name="177" href="#177">177</a> 
<a name="178" href="#178">178</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="179" href="#179">179</a> <font color="#AA0000"><i>   * @return the matched piece of code as an array of instruction (handles)</font></i>
<a name="180" href="#180">180</a> <font color="#AA0000"><i>   */</font></i>
<a name="181" href="#181">181</a>   <b>private</b> <a href="../../../../org/apache/bcel/generic/InstructionHandle.html">InstructionHandle</a>[] getMatch(<b>int</b> matched_from, <b>int</b> match_length) {
<a name="182" href="#182">182</a>     <a href="../../../../org/apache/bcel/generic/InstructionHandle.html">InstructionHandle</a>[] match = <b>new</b> <a href="../../../../org/apache/bcel/generic/InstructionHandle.html">InstructionHandle</a>[match_length];
<a name="183" href="#183">183</a>     System.arraycopy(handles, matched_from, match, 0, match_length);
<a name="184" href="#184">184</a> 
<a name="185" href="#185">185</a>     <b>return</b> match;
<a name="186" href="#186">186</a>   }
<a name="187" href="#187">187</a> 
<a name="188" href="#188">188</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="189" href="#189">189</a> <font color="#AA0000"><i>   * Search for the given pattern in the instruction list. You can search for any valid</font></i>
<a name="190" href="#190">190</a> <font color="#AA0000"><i>   * opcode via its symbolic name, e.g. "istore". You can also use a super class or</font></i>
<a name="191" href="#191">191</a> <font color="#AA0000"><i>   * an interface name to match a whole set of instructions, e.g. "BranchInstruction" or</font></i>
<a name="192" href="#192">192</a> <font color="#AA0000"><i>   * "LoadInstruction". "istore" is also an alias for all "istore_x" instructions. Additional</font></i>
<a name="193" href="#193">193</a> <font color="#AA0000"><i>   * aliases are "if" for "ifxx", "if_icmp" for "if_icmpxx", "if_acmp" for "if_acmpxx".</font></i>
<a name="194" href="#194">194</a> <font color="#AA0000"><i>   *</font></i>
<a name="195" href="#195">195</a> <font color="#AA0000"><i>   * Consecutive instruction names must be separated by white space which will be removed</font></i>
<a name="196" href="#196">196</a> <font color="#AA0000"><i>   * during the compilation of the pattern.</font></i>
<a name="197" href="#197">197</a> <font color="#AA0000"><i>   *</font></i>
<a name="198" href="#198">198</a> <font color="#AA0000"><i>   * For the rest the usual pattern matching rules for regular expressions apply.&lt;P&gt;</font></i>
<a name="199" href="#199">199</a> <font color="#AA0000"><i>   * Example pattern:</font></i>
<a name="200" href="#200">200</a> <font color="#AA0000"><i>   * &lt;pre&gt;</font></i>
<a name="201" href="#201">201</a> <font color="#AA0000"><i>     search("BranchInstruction NOP ((IfInstruction|GOTO)+ ISTORE Instruction)*");</font></i>
<a name="202" href="#202">202</a> <font color="#AA0000"><i>   * &lt;/pre&gt;</font></i>
<a name="203" href="#203">203</a> <font color="#AA0000"><i>   *</font></i>
<a name="204" href="#204">204</a> <font color="#AA0000"><i>   * &lt;p&gt;If you alter the instruction list upon a match such that other</font></i>
<a name="205" href="#205">205</a> <font color="#AA0000"><i>   * matching areas are affected, you should call reread() to update</font></i>
<a name="206" href="#206">206</a> <font color="#AA0000"><i>   * the finder and call search() again, because the matches are cached.</font></i>
<a name="207" href="#207">207</a> <font color="#AA0000"><i>   *</font></i>
<a name="208" href="#208">208</a> <font color="#AA0000"><i>   * @param pattern the instruction pattern to search for, where case is ignored</font></i>
<a name="209" href="#209">209</a> <font color="#AA0000"><i>   * @param from where to start the search in the instruction list</font></i>
<a name="210" href="#210">210</a> <font color="#AA0000"><i>   * @param constraint optional CodeConstraint to check the found code pattern for</font></i>
<a name="211" href="#211">211</a> <font color="#AA0000"><i>   * user-defined constraints</font></i>
<a name="212" href="#212">212</a> <font color="#AA0000"><i>   * @return iterator of matches where e.nextElement() returns an array of instruction handles</font></i>
<a name="213" href="#213">213</a> <font color="#AA0000"><i>   * describing the matched area </font></i>
<a name="214" href="#214">214</a> <font color="#AA0000"><i>   */</font></i>
<a name="215" href="#215">215</a>   <b>public</b> <b>final</b> Iterator search(String pattern, <a href="../../../../org/apache/bcel/generic/InstructionHandle.html">InstructionHandle</a> from,
<a name="216" href="#216">216</a> 			       CodeConstraint constraint)
<a name="217" href="#217">217</a>   {
<a name="218" href="#218">218</a>     String search = compilePattern(pattern);
<a name="219" href="#219">219</a>     <b>int</b>  start    = -1;
<a name="220" href="#220">220</a> 
<a name="221" href="#221">221</a>     <b>for</b>(<b>int</b> i=0; i &lt; handles.length; i++) {
<a name="222" href="#222">222</a>       <b>if</b>(handles[i] == from) {
<a name="223" href="#223">223</a> 	start = i; <font color="#329900"><i>// Where to start search from (index)</font></i>
<a name="224" href="#224">224</a> 	<b>break</b>;
<a name="225" href="#225">225</a>       }
<a name="226" href="#226">226</a>     }
<a name="227" href="#227">227</a> 
<a name="228" href="#228">228</a>     <b>if</b>(start == -1)
<a name="229" href="#229">229</a>       <b>throw</b> <b>new</b> <a href="../../../../org/apache/bcel/generic/ClassGenException.html">ClassGenException</a>(<font color="#000099">"Instruction handle "</font> + from + 
<a name="230" href="#230">230</a> 				  <font color="#000099">" not found in instruction list."</font>);
<a name="231" href="#231">231</a>     <b>try</b> {
<a name="232" href="#232">232</a>       RE regex = <b>new</b> RE(search);
<a name="233" href="#233">233</a>       ArrayList matches = <b>new</b> ArrayList();
<a name="234" href="#234">234</a> 
<a name="235" href="#235">235</a>       <b>while</b>(start &lt; il_string.length() && regex.match(il_string, start)) {
<a name="236" href="#236">236</a> 	<b>int</b> startExpr = regex.getParenStart(0); 
<a name="237" href="#237">237</a> 	<b>int</b> endExpr   = regex.getParenEnd(0);
<a name="238" href="#238">238</a> 	<b>int</b> lenExpr   = regex.getParenLength(0);
<a name="239" href="#239">239</a> 	
<a name="240" href="#240">240</a> 	InstructionHandle[] match = getMatch(startExpr, lenExpr);
<a name="241" href="#241">241</a> 
<a name="242" href="#242">242</a> 	<b>if</b>((constraint == <b>null</b>) || constraint.checkCode(match))
<a name="243" href="#243">243</a> 	  matches.add(match);
<a name="244" href="#244">244</a> 	start = endExpr;
<a name="245" href="#245">245</a>       }
<a name="246" href="#246">246</a> 
<a name="247" href="#247">247</a>       <b>return</b> matches.iterator();
<a name="248" href="#248">248</a>     } <b>catch</b>(RESyntaxException e) {
<a name="249" href="#249">249</a>       System.err.println(e);
<a name="250" href="#250">250</a>     }
<a name="251" href="#251">251</a> 
<a name="252" href="#252">252</a>     <b>return</b> <b>null</b>;
<a name="253" href="#253">253</a>   }
<a name="254" href="#254">254</a> 
<a name="255" href="#255">255</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="256" href="#256">256</a> <font color="#AA0000"><i>   * Start search beginning from the start of the given instruction list.</font></i>
<a name="257" href="#257">257</a> <font color="#AA0000"><i>   *</font></i>
<a name="258" href="#258">258</a> <font color="#AA0000"><i>   * @param pattern the instruction pattern to search for, where case is ignored</font></i>
<a name="259" href="#259">259</a> <font color="#AA0000"><i>   * @return iterator of matches where e.nextElement()</font></i>
<a name="260" href="#260">260</a> <font color="#AA0000"><i>   * returns an array of instruction handles describing the matched</font></i>
<a name="261" href="#261">261</a> <font color="#AA0000"><i>   * area</font></i>
<a name="262" href="#262">262</a> <font color="#AA0000"><i>   */</font></i>
<a name="263" href="#263">263</a>   <b>public</b> <b>final</b> Iterator search(String pattern) {
<a name="264" href="#264">264</a>     <b>return</b> search(pattern, il.getStart(), <b>null</b>);
<a name="265" href="#265">265</a>   }
<a name="266" href="#266">266</a> 
<a name="267" href="#267">267</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="268" href="#268">268</a> <font color="#AA0000"><i>   * Start search beginning from `from'.</font></i>
<a name="269" href="#269">269</a> <font color="#AA0000"><i>   *</font></i>
<a name="270" href="#270">270</a> <font color="#AA0000"><i>   * @param pattern the instruction pattern to search for, where case is ignored</font></i>
<a name="271" href="#271">271</a> <font color="#AA0000"><i>   * @param from where to start the search in the instruction list</font></i>
<a name="272" href="#272">272</a> <font color="#AA0000"><i>   * @return  iterator of matches where e.nextElement() returns an array of instruction handles</font></i>
<a name="273" href="#273">273</a> <font color="#AA0000"><i>   * describing the matched area</font></i>
<a name="274" href="#274">274</a> <font color="#AA0000"><i>   */</font></i>
<a name="275" href="#275">275</a>   <b>public</b> <b>final</b> Iterator search(String pattern, <a href="../../../../org/apache/bcel/generic/InstructionHandle.html">InstructionHandle</a> from) {
<a name="276" href="#276">276</a>     <b>return</b> search(pattern, from, <b>null</b>);
<a name="277" href="#277">277</a>   }
<a name="278" href="#278">278</a> 
<a name="279" href="#279">279</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="280" href="#280">280</a> <font color="#AA0000"><i>   * Start search beginning from the start of the given instruction list.</font></i>
<a name="281" href="#281">281</a> <font color="#AA0000"><i>   * Check found matches with the constraint object.</font></i>
<a name="282" href="#282">282</a> <font color="#AA0000"><i>   *</font></i>
<a name="283" href="#283">283</a> <font color="#AA0000"><i>   * @param pattern the instruction pattern to search for, case is ignored</font></i>
<a name="284" href="#284">284</a> <font color="#AA0000"><i>   * @param constraint constraints to be checked on matching code</font></i>
<a name="285" href="#285">285</a> <font color="#AA0000"><i>   * @return instruction handle or `null' if the match failed</font></i>
<a name="286" href="#286">286</a> <font color="#AA0000"><i>   */</font></i>
<a name="287" href="#287">287</a>   <b>public</b> <b>final</b> Iterator search(String pattern, CodeConstraint constraint) {
<a name="288" href="#288">288</a>     <b>return</b> search(pattern, il.getStart(), constraint);
<a name="289" href="#289">289</a>   }
<a name="290" href="#290">290</a> 
<a name="291" href="#291">291</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="292" href="#292">292</a> <font color="#AA0000"><i>   * Convert opcode number to char.</font></i>
<a name="293" href="#293">293</a> <font color="#AA0000"><i>   */</font></i>
<a name="294" href="#294">294</a>   <b>private</b> <b>static</b> <b>final</b> <b>char</b> makeChar(<b>short</b> opcode) {
<a name="295" href="#295">295</a>     <b>return</b> (<b>char</b>)(opcode + OFFSET);
<a name="296" href="#296">296</a>   }
<a name="297" href="#297">297</a> 
<a name="298" href="#298">298</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="299" href="#299">299</a> <font color="#AA0000"><i>   * @return the inquired instruction list</font></i>
<a name="300" href="#300">300</a> <font color="#AA0000"><i>   */</font></i>
<a name="301" href="#301">301</a>   <b>public</b> <b>final</b> <a href="../../../../org/apache/bcel/generic/InstructionList.html">InstructionList</a> getInstructionList() { <b>return</b> il; }
<a name="302" href="#302">302</a> 
<a name="303" href="#303">303</a>   <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="304" href="#304">304</a> <font color="#AA0000"><i>   * Code patterns found may be checked using an additional</font></i>
<a name="305" href="#305">305</a> <font color="#AA0000"><i>   * user-defined constraint object whether they really match the needed criterion.</font></i>
<a name="306" href="#306">306</a> <font color="#AA0000"><i>   * I.e., check constraints that can not expressed with regular expressions.</font></i>
<a name="307" href="#307">307</a> <font color="#AA0000"><i>   *</font></i>
<a name="308" href="#308">308</a> <font color="#AA0000"><i>   */</font></i>
<a name="309" href="#309">309</a>   <b>public</b> <b>interface</b> CodeConstraint {
<a name="310" href="#310">310</a>     <font color="#AA0000"><i>/**<font color="#AA0000"><i>*</font></i></font></i>
<a name="311" href="#311">311</a> <font color="#AA0000"><i>     * @param match array of instructions matching the requested pattern</font></i>
<a name="312" href="#312">312</a> <font color="#AA0000"><i>     * @return true if the matched area is really useful</font></i>
<a name="313" href="#313">313</a> <font color="#AA0000"><i>     */</font></i>
<a name="314" href="#314">314</a>     <b>public</b> <b>boolean</b> checkCode(<a href="../../../../org/apache/bcel/generic/InstructionHandle.html">InstructionHandle</a>[] match);
<a name="315" href="#315">315</a>   }
<a name="316" href="#316">316</a> 
<a name="317" href="#317">317</a>   <font color="#329900"><i>// Initialize pattern map</font></i>
<a name="318" href="#318">318</a> 
<a name="319" href="#319">319</a>   <b>static</b> {
<a name="320" href="#320">320</a>     map.put(<font color="#000099">"arithmeticinstruction"</font>, <font color="#000099">"(irem|lrem|iand|ior|ineg|isub|lneg|fneg|fmul|ldiv|fadd|lxor|frem|idiv|land|ixor|ishr|fsub|lshl|fdiv|iadd|lor|dmul|lsub|ishl|imul|lmul|lushr|dneg|iushr|lshr|ddiv|drem|dadd|ladd|dsub)"</font>);
<a name="321" href="#321">321</a>     map.put(<font color="#000099">"invokeinstruction"</font>, <font color="#000099">"(invokevirtual|invokeinterface|invokestatic|invokespecial)"</font>);
<a name="322" href="#322">322</a>     map.put(<font color="#000099">"arrayinstruction"</font>, <font color="#000099">"(baload|aastore|saload|caload|fastore|lastore|iaload|castore|iastore|aaload|bastore|sastore|faload|laload|daload|dastore)"</font>);
<a name="323" href="#323">323</a>     map.put(<font color="#000099">"gotoinstruction"</font>, <font color="#000099">"(goto|goto_w)"</font>);
<a name="324" href="#324">324</a>     map.put(<font color="#000099">"conversioninstruction"</font>, <font color="#000099">"(d2l|l2d|i2s|d2i|l2i|i2b|l2f|d2f|f2i|i2d|i2l|f2d|i2c|f2l|i2f)"</font>);
<a name="325" href="#325">325</a>     map.put(<font color="#000099">"localvariableinstruction"</font>, <font color="#000099">"(fstore|iinc|lload|dstore|dload|iload|aload|astore|istore|fload|lstore)"</font>);
<a name="326" href="#326">326</a>     map.put(<font color="#000099">"loadinstruction"</font>, <font color="#000099">"(fload|dload|lload|iload|aload)"</font>);
<a name="327" href="#327">327</a>     map.put(<font color="#000099">"fieldinstruction"</font>, <font color="#000099">"(getfield|putstatic|getstatic|putfield)"</font>);
<a name="328" href="#328">328</a>     map.put(<font color="#000099">"cpinstruction"</font>, <font color="#000099">"(ldc2_w|invokeinterface|multianewarray|putstatic|instanceof|getstatic|checkcast|getfield|invokespecial|ldc_w|invokestatic|invokevirtual|putfield|ldc|new|anewarray)"</font>);
<a name="329" href="#329">329</a>     map.put(<font color="#000099">"stackinstruction"</font>, <font color="#000099">"(dup2|swap|dup2_x2|pop|pop2|dup|dup2_x1|dup_x2|dup_x1)"</font>);
<a name="330" href="#330">330</a>     map.put(<font color="#000099">"branchinstruction"</font>, <font color="#000099">"(ifle|if_acmpne|if_icmpeq|if_acmpeq|ifnonnull|goto_w|iflt|ifnull|if_icmpne|tableswitch|if_icmple|ifeq|if_icmplt|jsr_w|if_icmpgt|ifgt|jsr|goto|ifne|ifge|lookupswitch|if_icmpge)"</font>);
<a name="331" href="#331">331</a>     map.put(<font color="#000099">"returninstruction"</font>, <font color="#000099">"(lreturn|ireturn|freturn|dreturn|areturn|return)"</font>);
<a name="332" href="#332">332</a>     map.put(<font color="#000099">"storeinstruction"</font>, <font color="#000099">"(istore|fstore|dstore|astore|lstore)"</font>);
<a name="333" href="#333">333</a>     map.put(<font color="#000099">"select"</font>, <font color="#000099">"(tableswitch|lookupswitch)"</font>);
<a name="334" href="#334">334</a>     map.put(<font color="#000099">"ifinstruction"</font>, <font color="#000099">"(ifeq|ifgt|if_icmpne|if_icmpeq|ifge|ifnull|ifne|if_icmple|if_icmpge|if_acmpeq|if_icmplt|if_acmpne|ifnonnull|iflt|if_icmpgt|ifle)"</font>);
<a name="335" href="#335">335</a>     map.put(<font color="#000099">"jsrinstruction"</font>, <font color="#000099">"(jsr|jsr_w)"</font>);
<a name="336" href="#336">336</a>     map.put(<font color="#000099">"variablelengthinstruction"</font>, <font color="#000099">"(tableswitch|jsr|goto|lookupswitch)"</font>);
<a name="337" href="#337">337</a>     map.put(<font color="#000099">"unconditionalbranch"</font>, <font color="#000099">"(goto|jsr|jsr_w|athrow|goto_w)"</font>);
<a name="338" href="#338">338</a>     map.put(<font color="#000099">"constantpushinstruction"</font>, <font color="#000099">"(dconst|bipush|sipush|fconst|iconst|lconst)"</font>);
<a name="339" href="#339">339</a>     map.put(<font color="#000099">"typedinstruction"</font>, <font color="#000099">"(imul|lsub|aload|fload|lor|new|aaload|fcmpg|iand|iaload|lrem|idiv|d2l|isub|dcmpg|dastore|ret|f2d|f2i|drem|iinc|i2c|checkcast|frem|lreturn|astore|lushr|daload|dneg|fastore|istore|lshl|ldiv|lstore|areturn|ishr|ldc_w|invokeinterface|aastore|lxor|ishl|l2d|i2f|return|faload|sipush|iushr|caload|instanceof|invokespecial|putfield|fmul|ireturn|laload|d2f|lneg|ixor|i2l|fdiv|lastore|multianewarray|i2b|getstatic|i2d|putstatic|fcmpl|saload|ladd|irem|dload|jsr_w|dconst|dcmpl|fsub|freturn|ldc|aconst_null|castore|lmul|ldc2_w|dadd|iconst|f2l|ddiv|dstore|land|jsr|anewarray|dmul|bipush|dsub|sastore|d2i|i2s|lshr|iadd|l2i|lload|bastore|fstore|fneg|iload|fadd|baload|fconst|ior|ineg|dreturn|l2f|lconst|getfield|invokevirtual|invokestatic|iastore)"</font>);
<a name="340" href="#340">340</a>     map.put(<font color="#000099">"popinstruction"</font>, <font color="#000099">"(fstore|dstore|pop|pop2|astore|putstatic|istore|lstore)"</font>);
<a name="341" href="#341">341</a>     map.put(<font color="#000099">"allocationinstruction"</font>, <font color="#000099">"(multianewarray|new|anewarray|newarray)"</font>);
<a name="342" href="#342">342</a>     map.put(<font color="#000099">"indexedinstruction"</font>, <font color="#000099">"(lload|lstore|fload|ldc2_w|invokeinterface|multianewarray|astore|dload|putstatic|instanceof|getstatic|checkcast|getfield|invokespecial|dstore|istore|iinc|ldc_w|ret|fstore|invokestatic|iload|putfield|invokevirtual|ldc|new|aload|anewarray)"</font>);
<a name="343" href="#343">343</a>     map.put(<font color="#000099">"pushinstruction"</font>, <font color="#000099">"(dup|lload|dup2|bipush|fload|ldc2_w|sipush|lconst|fconst|dload|getstatic|ldc_w|aconst_null|dconst|iload|ldc|iconst|aload)"</font>);
<a name="344" href="#344">344</a>     map.put(<font color="#000099">"stackproducer"</font>, <font color="#000099">"(imul|lsub|aload|fload|lor|new|aaload|fcmpg|iand|iaload|lrem|idiv|d2l|isub|dcmpg|dup|f2d|f2i|drem|i2c|checkcast|frem|lushr|daload|dneg|lshl|ldiv|ishr|ldc_w|invokeinterface|lxor|ishl|l2d|i2f|faload|sipush|iushr|caload|instanceof|invokespecial|fmul|laload|d2f|lneg|ixor|i2l|fdiv|getstatic|i2b|swap|i2d|dup2|fcmpl|saload|ladd|irem|dload|jsr_w|dconst|dcmpl|fsub|ldc|arraylength|aconst_null|tableswitch|lmul|ldc2_w|iconst|dadd|f2l|ddiv|land|jsr|anewarray|dmul|bipush|dsub|d2i|newarray|i2s|lshr|iadd|lload|l2i|fneg|iload|fadd|baload|fconst|lookupswitch|ior|ineg|lconst|l2f|getfield|invokevirtual|invokestatic)"</font>);
<a name="345" href="#345">345</a>     map.put(<font color="#000099">"stackconsumer"</font>, <font color="#000099">"(imul|lsub|lor|iflt|fcmpg|if_icmpgt|iand|ifeq|if_icmplt|lrem|ifnonnull|idiv|d2l|isub|dcmpg|dastore|if_icmpeq|f2d|f2i|drem|i2c|checkcast|frem|lreturn|astore|lushr|pop2|monitorexit|dneg|fastore|istore|lshl|ldiv|lstore|areturn|if_icmpge|ishr|monitorenter|invokeinterface|aastore|lxor|ishl|l2d|i2f|return|iushr|instanceof|invokespecial|fmul|ireturn|d2f|lneg|ixor|pop|i2l|ifnull|fdiv|lastore|i2b|if_acmpeq|ifge|swap|i2d|putstatic|fcmpl|ladd|irem|dcmpl|fsub|freturn|ifgt|castore|lmul|dadd|f2l|ddiv|dstore|land|if_icmpne|if_acmpne|dmul|dsub|sastore|ifle|d2i|i2s|lshr|iadd|l2i|bastore|fstore|fneg|fadd|ior|ineg|ifne|dreturn|l2f|if_icmple|getfield|invokevirtual|invokestatic|iastore)"</font>);
<a name="346" href="#346">346</a>     map.put(<font color="#000099">"exceptionthrower"</font>, <font color="#000099">"(irem|lrem|laload|putstatic|baload|dastore|areturn|getstatic|ldiv|anewarray|iastore|castore|idiv|saload|lastore|fastore|putfield|lreturn|caload|getfield|return|aastore|freturn|newarray|instanceof|multianewarray|athrow|faload|iaload|aaload|dreturn|monitorenter|checkcast|bastore|arraylength|new|invokevirtual|sastore|ldc_w|ireturn|invokespecial|monitorexit|invokeinterface|ldc|invokestatic|daload)"</font>);
<a name="347" href="#347">347</a>     map.put(<font color="#000099">"loadclass"</font>, <font color="#000099">"(multianewarray|invokeinterface|instanceof|invokespecial|putfield|checkcast|putstatic|invokevirtual|new|getstatic|invokestatic|getfield|anewarray)"</font>);
<a name="348" href="#348">348</a>     map.put(<font color="#000099">"instructiontargeter"</font>, <font color="#000099">"(ifle|if_acmpne|if_icmpeq|if_acmpeq|ifnonnull|goto_w|iflt|ifnull|if_icmpne|tableswitch|if_icmple|ifeq|if_icmplt|jsr_w|if_icmpgt|ifgt|jsr|goto|ifne|ifge|lookupswitch|if_icmpge)"</font>);
<a name="349" href="#349">349</a> 
<a name="350" href="#350">350</a>     <font color="#329900"><i>// Some aliases</font></i>
<a name="351" href="#351">351</a>     map.put(<font color="#000099">"if_icmp"</font>, <font color="#000099">"(if_icmpne|if_icmpeq|if_icmple|if_icmpge|if_icmplt|if_icmpgt)"</font>);
<a name="352" href="#352">352</a>     map.put(<font color="#000099">"if_acmp"</font>, <font color="#000099">"(if_acmpeq|if_acmpne)"</font>);
<a name="353" href="#353">353</a>     map.put(<font color="#000099">"if"</font>, <font color="#000099">"(ifeq|ifne|iflt|ifge|ifgt|ifle)"</font>);
<a name="354" href="#354">354</a> 
<a name="355" href="#355">355</a>     <font color="#329900"><i>// Precompile some aliases first</font></i>
<a name="356" href="#356">356</a>     map.put(<font color="#000099">"iconst"</font>, precompile(Constants.ICONST_0, Constants.ICONST_5, Constants.ICONST_M1));
<a name="357" href="#357">357</a>     map.put(<font color="#000099">"lconst"</font>, <b>new</b> String(<b>new</b> <b>char</b>[] { '(', makeChar(Constants.LCONST_0), '|',
<a name="358" href="#358">358</a> 					      makeChar(Constants.LCONST_1), ')' }));
<a name="359" href="#359">359</a>     map.put(<font color="#000099">"dconst"</font>, <b>new</b> String(<b>new</b> <b>char</b>[] { '(', makeChar(Constants.DCONST_0), '|',
<a name="360" href="#360">360</a> 					      makeChar(Constants.DCONST_1), ')' }));
<a name="361" href="#361">361</a>     map.put(<font color="#000099">"fconst"</font>, <b>new</b> String(<b>new</b> <b>char</b>[] { '(', makeChar(Constants.FCONST_0), '|',
<a name="362" href="#362">362</a> 					      makeChar(Constants.FCONST_1), ')' }));
<a name="363" href="#363">363</a> 
<a name="364" href="#364">364</a>     map.put(<font color="#000099">"iload"</font>, precompile(Constants.ILOAD_0, Constants.ILOAD_3, Constants.ILOAD));
<a name="365" href="#365">365</a>     map.put(<font color="#000099">"dload"</font>, precompile(Constants.DLOAD_0, Constants.DLOAD_3, Constants.DLOAD));
<a name="366" href="#366">366</a>     map.put(<font color="#000099">"fload"</font>, precompile(Constants.FLOAD_0, Constants.FLOAD_3, Constants.FLOAD));
<a name="367" href="#367">367</a>     map.put(<font color="#000099">"aload"</font>, precompile(Constants.ALOAD_0, Constants.ALOAD_3, Constants.ALOAD));
<a name="368" href="#368">368</a> 
<a name="369" href="#369">369</a>     map.put(<font color="#000099">"istore"</font>, precompile(Constants.ISTORE_0, Constants.ISTORE_3, Constants.ISTORE));
<a name="370" href="#370">370</a>     map.put(<font color="#000099">"dstore"</font>, precompile(Constants.DSTORE_0, Constants.DSTORE_3, Constants.DSTORE));
<a name="371" href="#371">371</a>     map.put(<font color="#000099">"fstore"</font>, precompile(Constants.FSTORE_0, Constants.FSTORE_3, Constants.FSTORE));
<a name="372" href="#372">372</a>     map.put(<font color="#000099">"astore"</font>, precompile(Constants.ASTORE_0, Constants.ASTORE_3, Constants.ASTORE));
<a name="373" href="#373">373</a> 
<a name="374" href="#374">374</a>     <font color="#329900"><i>// Compile strings</font></i>
<a name="375" href="#375">375</a> 
<a name="376" href="#376">376</a>     <b>for</b>(Iterator i = map.keySet().iterator(); i.hasNext(); ) {
<a name="377" href="#377">377</a>       String key   = (String)i.next();
<a name="378" href="#378">378</a>       String value = (String)map.get(key);
<a name="379" href="#379">379</a> 
<a name="380" href="#380">380</a>       <b>char</b> ch = value.<b>char</b>At(1); <font color="#329900"><i>// Omit already precompiled patterns</font></i>
<a name="381" href="#381">381</a>       <b>if</b>(ch &lt; OFFSET) {
<a name="382" href="#382">382</a> 	map.put(key, compilePattern(value)); <font color="#329900"><i>// precompile all patterns</font></i>
<a name="383" href="#383">383</a>       }
<a name="384" href="#384">384</a>     }
<a name="385" href="#385">385</a> 
<a name="386" href="#386">386</a>     <font color="#329900"><i>// Add instruction alias to match anything</font></i>
<a name="387" href="#387">387</a> 
<a name="388" href="#388">388</a>     StringBuffer buf = <b>new</b> StringBuffer(<font color="#000099">"("</font>);
<a name="389" href="#389">389</a>     
<a name="390" href="#390">390</a>     <b>for</b>(<b>short</b> i=0; i &lt; NO_OPCODES; i++) {
<a name="391" href="#391">391</a>       <b>if</b>(Constants.NO_OF_OPERANDS[i] != Constants.UNDEFINED) { <font color="#329900"><i>// Not an invalid opcode</font></i>
<a name="392" href="#392">392</a> 	buf.append(makeChar(i));
<a name="393" href="#393">393</a> 
<a name="394" href="#394">394</a> 	<b>if</b>(i &lt; NO_OPCODES - 1)
<a name="395" href="#395">395</a> 	  buf.append('|');
<a name="396" href="#396">396</a>       }
<a name="397" href="#397">397</a>     }
<a name="398" href="#398">398</a>     buf.append(')');
<a name="399" href="#399">399</a> 
<a name="400" href="#400">400</a>     map.put(<font color="#000099">"instruction"</font>, buf.toString());
<a name="401" href="#401">401</a>   }
<a name="402" href="#402">402</a> 
<a name="403" href="#403">403</a>   <b>private</b> <b>static</b> String precompile(<b>short</b> from, <b>short</b> to, <b>short</b> extra) {
<a name="404" href="#404">404</a>     StringBuffer buf = <b>new</b> StringBuffer(<font color="#000099">"("</font>);
<a name="405" href="#405">405</a> 
<a name="406" href="#406">406</a>     <b>for</b>(<b>short</b> i=from; i &lt;= to; i++) {
<a name="407" href="#407">407</a>       buf.append(makeChar(i));
<a name="408" href="#408">408</a>       buf.append('|');
<a name="409" href="#409">409</a>     }
<a name="410" href="#410">410</a> 
<a name="411" href="#411">411</a>     buf.append(makeChar(extra));
<a name="412" href="#412">412</a>     buf.append(<font color="#000099">")"</font>);
<a name="413" href="#413">413</a>     <b>return</b> buf.toString();
<a name="414" href="#414">414</a>   }
<a name="415" href="#415">415</a> 
<a name="416" href="#416">416</a>   <font color="#329900"><i>/*</font></i>
<a name="417" href="#417">417</a> <font color="#329900"><i>   * Internal debugging routines.</font></i>
<a name="418" href="#418">418</a> <font color="#329900"><i>   */</font></i>
<a name="419" href="#419">419</a>   <b>private</b> <b>static</b> <b>final</b> String pattern2string(String pattern) {
<a name="420" href="#420">420</a>     <b>return</b> pattern2string(pattern, <b>true</b>);
<a name="421" href="#421">421</a>   }
<a name="422" href="#422">422</a> 
<a name="423" href="#423">423</a>   <b>private</b> <b>static</b> <b>final</b> String pattern2string(String pattern, <b>boolean</b> make_string) {
<a name="424" href="#424">424</a>     StringBuffer buf = <b>new</b> StringBuffer();
<a name="425" href="#425">425</a> 
<a name="426" href="#426">426</a>     <b>for</b>(<b>int</b> i=0; i &lt; pattern.length(); i++) {
<a name="427" href="#427">427</a>       <b>char</b> ch = pattern.<b>char</b>At(i);
<a name="428" href="#428">428</a> 
<a name="429" href="#429">429</a>       <b>if</b>(ch &gt;= OFFSET) {
<a name="430" href="#430">430</a> 	<b>if</b>(make_string)
<a name="431" href="#431">431</a> 	  buf.append(Constants.OPCODE_NAMES[ch - OFFSET]);
<a name="432" href="#432">432</a> 	<b>else</b>
<a name="433" href="#433">433</a> 	  buf.append((<b>int</b>)(ch - OFFSET));
<a name="434" href="#434">434</a>       } <b>else</b>
<a name="435" href="#435">435</a> 	buf.append(ch);
<a name="436" href="#436">436</a>     }
<a name="437" href="#437">437</a> 
<a name="438" href="#438">438</a>     <b>return</b> buf.toString();
<a name="439" href="#439">439</a>   }
<a name="440" href="#440">440</a> }
</pre>
<hr><center>This page was automatically generated by <a href="http://jakarta.apache.org/turbine/maven">Maven</a></center></body>
</html>

