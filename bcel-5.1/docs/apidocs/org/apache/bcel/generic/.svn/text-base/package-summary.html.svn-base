<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN""http://www.w3.org/TR/REC-html40/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc on Fri Apr 25 09:05:24 GMT+01:00 2003 -->
<TITLE>
org.apache.bcel.generic (jakarta-bcel 5.1 API)
</TITLE>
<META NAME="keywords" CONTENT="org.apache.bcel.generic package">
<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
</HEAD>
<SCRIPT>
function asd()
{
parent.document.title="org.apache.bcel.generic (jakarta-bcel 5.1 API)";
}
</SCRIPT>
<BODY BGCOLOR="white" onload="asd();">

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_top"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Package</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <FONT CLASS="NavBarFont1">Class</FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-use.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../org/apache/bcel/classfile/package-summary.html"><B>PREV PACKAGE</B></A>&nbsp;
&nbsp;<A HREF="../../../../org/apache/bcel/util/package-summary.html"><B>NEXT PACKAGE</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="package-summary.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
<H2>
Package org.apache.bcel.generic
</H2>

This package contains the "generic" part of the
<a href="http://jakarta.apache.org/bcel/">Byte Code Engineering
Library</a>, i.e., classes to dynamically modify class objects and
byte code instructions.

<P>
<B>See:</B>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#package_description"><B>Description</B></A>
<P>

<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Interface Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="AllocationInstruction.html"><I>AllocationInstruction</I></A></B></TD>
<TD>Denote family of instructions that allocates space in the heap.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="ClassObserver.html"><I>ClassObserver</I></A></B></TD>
<TD>Implement this interface if you're interested in changes to a ClassGen object
 and register yourself with addObserver().</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="CompoundInstruction.html"><I>CompoundInstruction</I></A></B></TD>
<TD>Wrapper class for `compound' operations, virtual instructions that
 don't exist as byte code, but give a useful meaning. </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="ConstantPushInstruction.html"><I>ConstantPushInstruction</I></A></B></TD>
<TD>Denotes a push instruction that produces a literal on the stack
 such as  SIPUSH, BIPUSH, ICONST, etc.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="ExceptionThrower.html"><I>ExceptionThrower</I></A></B></TD>
<TD>Denote an instruction that may throw a run-time or a linking
 exception (or both) during execution.  </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="FieldObserver.html"><I>FieldObserver</I></A></B></TD>
<TD>Imnplement this interface if you're interested in changes to a FieldGen object
 and register yourself with addObserver().</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="IndexedInstruction.html"><I>IndexedInstruction</I></A></B></TD>
<TD>Denote entity that refers to an index, e.g. local variable instructions,
 RET, CPInstruction, etc.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="InstructionComparator.html"><I>InstructionComparator</I></A></B></TD>
<TD>Equality of instructions isn't clearly to be defined. </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="InstructionConstants.html"><I>InstructionConstants</I></A></B></TD>
<TD>This interface contains shareable instruction objects.

 </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="InstructionListObserver.html"><I>InstructionListObserver</I></A></B></TD>
<TD>Implement this interface if you're interested in changes to an InstructionList object
 and register yourself with addObserver().</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="InstructionTargeter.html"><I>InstructionTargeter</I></A></B></TD>
<TD>Denote that a class targets InstructionHandles within an InstructionList. </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="LoadClass.html"><I>LoadClass</I></A></B></TD>
<TD>Denotes that an instruction may start the process of loading and resolving 
 the referenced class in the Virtual Machine.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="MethodObserver.html"><I>MethodObserver</I></A></B></TD>
<TD>Implement this interface if you're interested in changes to a MethodGen object
 and register yourself with addObserver().</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="NamedAndTyped.html"><I>NamedAndTyped</I></A></B></TD>
<TD>Denote entity that has both name and type. </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="PopInstruction.html"><I>PopInstruction</I></A></B></TD>
<TD>Denotes an unparameterized instruction to pop a value on top from the stack,
 such as ISTORE, POP, PUTSTATIC.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="PushInstruction.html"><I>PushInstruction</I></A></B></TD>
<TD>Denotes an unparameterized instruction to produce a value on top of the stack,
 such as ILOAD, LDC, SIPUSH, DUP, ICONST, etc.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="StackConsumer.html"><I>StackConsumer</I></A></B></TD>
<TD>Denote an instruction that may consume a value from the stack.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="StackProducer.html"><I>StackProducer</I></A></B></TD>
<TD>Denote an instruction that may produce a value on top of the stack
 (this excludes DUP_X1, e.g.)</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="TypedInstruction.html"><I>TypedInstruction</I></A></B></TD>
<TD>Get the type associated with an instruction, int for ILOAD, or the type
 of the field of a PUTFIELD instruction, e.g..</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="UnconditionalBranch.html"><I>UnconditionalBranch</I></A></B></TD>
<TD>Denotes an instruction to perform an unconditional branch, i.e., GOTO, JSR.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="VariableLengthInstruction.html"><I>VariableLengthInstruction</I></A></B></TD>
<TD>Denotes an instruction to be a variable length instruction, such as
 GOTO, JSR, LOOKUPSWITCH and TABLESWITCH.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="Visitor.html"><I>Visitor</I></A></B></TD>
<TD>Interface implementing the Visitor pattern programming style.
 </TD>
</TR>
</TABLE>
&nbsp;

<P>

<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Class Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="AALOAD.html">AALOAD</A></B></TD>
<TD>AALOAD - Load reference from array
 Stack: ..., arrayref, index -&gt; value</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="AASTORE.html">AASTORE</A></B></TD>
<TD>AASTORE -  Store into reference array
 Stack: ..., arrayref, index, value -&gt; ...</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="ACONST_NULL.html">ACONST_NULL</A></B></TD>
<TD>ACONST_NULL - Push null reference
 Stack: ... </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="ALOAD.html">ALOAD</A></B></TD>
<TD>ALOAD - Load reference from local variable
 Stack: ... </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="ANEWARRAY.html">ANEWARRAY</A></B></TD>
<TD>ANEWARRAY -  Create new array of references
 Stack: ..., count -&gt; ..., arrayref</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="ARETURN.html">ARETURN</A></B></TD>
<TD>ARETURN -  Return reference from method
 Stack: ..., objectref -&gt; &lt;empty&gt;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="ArithmeticInstruction.html">ArithmeticInstruction</A></B></TD>
<TD>Super class for the family of arithmetic instructions.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="ArrayInstruction.html">ArrayInstruction</A></B></TD>
<TD>Super class for instructions dealing with array access such as IALOAD.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="ARRAYLENGTH.html">ARRAYLENGTH</A></B></TD>
<TD>ARRAYLENGTH -  Get length of array
 Stack: ..., arrayref -&gt; ..., length</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="ArrayType.html">ArrayType</A></B></TD>
<TD>Denotes array type, such as int[][]</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="ASTORE.html">ASTORE</A></B></TD>
<TD>ASTORE - Store reference into local variable
 Stack ..., objectref -&gt; ... </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="ATHROW.html">ATHROW</A></B></TD>
<TD>ATHROW -  Throw exception
 Stack: ..., objectref -&gt; objectref</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="BALOAD.html">BALOAD</A></B></TD>
<TD>BALOAD - Load byte or boolean from array
 Stack: ..., arrayref, index -&gt; ..., value</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="BasicType.html">BasicType</A></B></TD>
<TD>Denotes basic type such as int.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="BASTORE.html">BASTORE</A></B></TD>
<TD>BASTORE -  Store into byte or boolean array
 Stack: ..., arrayref, index, value -&gt; ...</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="BIPUSH.html">BIPUSH</A></B></TD>
<TD>BIPUSH - Push byte on stack

 Stack: ... </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="BranchHandle.html">BranchHandle</A></B></TD>
<TD>BranchHandle is returned by specialized InstructionList.append() whenever a
 BranchInstruction is appended. </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="BranchInstruction.html">BranchInstruction</A></B></TD>
<TD>Abstract super class for branching instructions like GOTO, IFEQ, etc..
 </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="BREAKPOINT.html">BREAKPOINT</A></B></TD>
<TD>BREAKPOINT, JVM dependent, ignored by default</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="CALOAD.html">CALOAD</A></B></TD>
<TD>CALOAD - Load char from array
 Stack: ..., arrayref, index -&gt; ..., value</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="CASTORE.html">CASTORE</A></B></TD>
<TD>CASTORE -  Store into char array
 Stack: ..., arrayref, index, value -&gt; ...</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="CHECKCAST.html">CHECKCAST</A></B></TD>
<TD>CHECKCAST - Check whether object is of given type
 Stack: ..., objectref -&gt; ..., objectref</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="ClassGen.html">ClassGen</A></B></TD>
<TD>Template class for building up a java class. </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="CodeExceptionGen.html">CodeExceptionGen</A></B></TD>
<TD>This class represents an exception handler, i.e., specifies the  region where
 a handler is active and an instruction where the actual handling is done.
 </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="ConstantPoolGen.html">ConstantPoolGen</A></B></TD>
<TD>This class is used to build up a constant pool. </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="ConversionInstruction.html">ConversionInstruction</A></B></TD>
<TD>Super class for the x2y family of instructions.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="CPInstruction.html">CPInstruction</A></B></TD>
<TD>Abstract super class for instructions that use an index into the 
 constant pool such as LDC, INVOKEVIRTUAL, etc.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="D2F.html">D2F</A></B></TD>
<TD>D2F - Convert double to float
 Stack: ..., value.word1, value.word2 -&gt; ..., result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="D2I.html">D2I</A></B></TD>
<TD>D2I - Convert double to int
 Stack: ..., value.word1, value.word2 -&gt; ..., result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="D2L.html">D2L</A></B></TD>
<TD>D2L - Convert double to long
 Stack: ..., value.word1, value.word2 -&gt; ..., result.word1, result.word2</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="DADD.html">DADD</A></B></TD>
<TD>DADD - Add doubles
 Stack: ..., value1.word1, value1.word2, value2.word1, value2.word2 -&gt;
        ..., result.word1, result1.word2</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="DALOAD.html">DALOAD</A></B></TD>
<TD>DALOAD - Load double from array
 Stack: ..., arrayref, index -&gt; ..., result.word1, result.word2</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="DASTORE.html">DASTORE</A></B></TD>
<TD>DASTORE -  Store into double array
 Stack: ..., arrayref, index, value.word1, value.word2 -&gt; ...</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="DCMPG.html">DCMPG</A></B></TD>
<TD>DCMPG - Compare doubles: value1 > value2
 Stack: ..., value1.word1, value1.word2, value2.word1, value2.word2 -&gt;
        ..., result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="DCMPL.html">DCMPL</A></B></TD>
<TD>DCMPL - Compare doubles: value1 < value2
 Stack: ..., value1.word1, value1.word2, value2.word1, value2.word2 -&gt;
        ..., result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="DCONST.html">DCONST</A></B></TD>
<TD>DCONST - Push 0.0 or 1.0, other values cause an exception

 Stack: ... </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="DDIV.html">DDIV</A></B></TD>
<TD>DDIV -  Divide doubles
 Stack: ..., value1.word1, value1.word2, value2.word1, value2.word2 -&gt;
        ..., result.word1, result.word2</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="DLOAD.html">DLOAD</A></B></TD>
<TD>DLOAD - Load double from local variable
 Stack ... </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="DMUL.html">DMUL</A></B></TD>
<TD>DMUL - Multiply doubles
 Stack: ..., value1.word1, value1.word2, value2.word1, value2.word2 -&gt;
        ..., result.word1, result.word2</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="DNEG.html">DNEG</A></B></TD>
<TD>DNEG - Negate double
 Stack: ..., value.word1, value.word2 -&gt; ..., result.word1, result.word2</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="DREM.html">DREM</A></B></TD>
<TD>DREM - Remainder of doubles
 Stack: ..., value1.word1, value1.word2, value2.word1, value2.word2 -&gt;
        ..., result.word1, result.word2</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="DRETURN.html">DRETURN</A></B></TD>
<TD>DRETURN -  Return double from method
 Stack: ..., value.word1, value.word2 -&gt; &lt;empty&gt;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="DSTORE.html">DSTORE</A></B></TD>
<TD>DSTORE - Store double into local variable
 Stack: ..., value.word1, value.word2 -&gt; ... </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="DSUB.html">DSUB</A></B></TD>
<TD>DSUB - Substract doubles
 Stack: ..., value1.word1, value1.word2, value2.word1, value2.word2 -&gt;
        ..., result.word1, result.word2</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="DUP.html">DUP</A></B></TD>
<TD>DUP - Duplicate top operand stack word
 Stack: ..., word -&gt; ..., word, word</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="DUP_X1.html">DUP_X1</A></B></TD>
<TD>DUP_X1 - Duplicate top operand stack word and put two down
 Stack: ..., word2, word1 -&gt; ..., word1, word2, word1</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="DUP_X2.html">DUP_X2</A></B></TD>
<TD>DUP_X2 - Duplicate top operand stack word and put three down
 Stack: ..., word3, word2, word1 -&gt; ..., word1, word3, word2, word1</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="DUP2.html">DUP2</A></B></TD>
<TD>DUP2 - Duplicate two top operand stack words
 Stack: ..., word2, word1 -&gt; ..., word2, word1, word2, word1</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="DUP2_X1.html">DUP2_X1</A></B></TD>
<TD>DUP2_X1 - Duplicate two top operand stack words and put three down
 Stack: ..., word3, word2, word1 -&gt; ..., word2, word1, word3, word2, word1</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="DUP2_X2.html">DUP2_X2</A></B></TD>
<TD>DUP2_X2 - Duplicate two top operand stack words and put four down
 Stack: ..., word4, word3, word2, word1 -&gt; ..., word2, word1, word4, word3, word2, word1</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="EmptyVisitor.html">EmptyVisitor</A></B></TD>
<TD>Supplies empty method bodies to be overridden by subclasses.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="F2D.html">F2D</A></B></TD>
<TD>F2D - Convert float to double
 Stack: ..., value -&gt; ..., result.word1, result.word2</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="F2I.html">F2I</A></B></TD>
<TD>F2I - Convert float to int
 Stack: ..., value -&gt; ..., result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="F2L.html">F2L</A></B></TD>
<TD>F2L - Convert float to long
 Stack: ..., value -&gt; ..., result.word1, result.word2</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="FADD.html">FADD</A></B></TD>
<TD>FADD - Add floats
 Stack: ..., value1, value2 -&gt; result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="FALOAD.html">FALOAD</A></B></TD>
<TD>FALOAD - Load float from array
 Stack: ..., arrayref, index -&gt; ..., value</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="FASTORE.html">FASTORE</A></B></TD>
<TD>FASTORE -  Store into float array
 Stack: ..., arrayref, index, value -&gt; ...</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="FCMPG.html">FCMPG</A></B></TD>
<TD>FCMPG - Compare floats: value1 > value2
 Stack: ..., value1, value2 -&gt; ..., result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="FCMPL.html">FCMPL</A></B></TD>
<TD>FCMPL - Compare floats: value1 < value2
 Stack: ..., value1, value2 -&gt; ..., result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="FCONST.html">FCONST</A></B></TD>
<TD>FCONST - Push 0.0, 1.0 or 2.0, other values cause an exception

 Stack: ... </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="FDIV.html">FDIV</A></B></TD>
<TD>FDIV - Divide floats
 Stack: ..., value1, value2 -&gt; result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="FieldGen.html">FieldGen</A></B></TD>
<TD>Template class for building up a field.  </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="FieldGenOrMethodGen.html">FieldGenOrMethodGen</A></B></TD>
<TD>Super class for FieldGen and MethodGen objects, since they have
 some methods in common!</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="FieldInstruction.html">FieldInstruction</A></B></TD>
<TD>Super class for the GET/PUTxxx family of instructions.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="FieldOrMethod.html">FieldOrMethod</A></B></TD>
<TD>Super class for InvokeInstruction and FieldInstruction, since they have
 some methods in common!</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="FLOAD.html">FLOAD</A></B></TD>
<TD>FLOAD - Load float from local variable
 Stack ... </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="FMUL.html">FMUL</A></B></TD>
<TD>FMUL - Multiply floats
 Stack: ..., value1, value2 -&gt; result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="FNEG.html">FNEG</A></B></TD>
<TD>FNEG - Negate float
 Stack: ..., value -&gt; ..., result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="FREM.html">FREM</A></B></TD>
<TD>FREM - Remainder of floats
 Stack: ..., value1, value2 -&gt; result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="FRETURN.html">FRETURN</A></B></TD>
<TD>FRETURN -  Return float from method
 Stack: ..., value -&gt; &lt;empty&gt;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="FSTORE.html">FSTORE</A></B></TD>
<TD>FSTORE - Store float into local variable
 Stack: ..., value -&gt; ... </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="FSUB.html">FSUB</A></B></TD>
<TD>FSUB - Substract floats
 Stack: ..., value1, value2 -&gt; result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="GETFIELD.html">GETFIELD</A></B></TD>
<TD>GETFIELD - Fetch field from object
 Stack: ..., objectref -&gt; ..., value
 OR
 Stack: ..., objectref -&gt; ..., value.word1, value.word2</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="GETSTATIC.html">GETSTATIC</A></B></TD>
<TD>GETSTATIC - Fetch static field from class
 Stack: ..., -&gt; ..., value
 OR
 Stack: ..., -&gt; ..., value.word1, value.word2</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="GOTO.html">GOTO</A></B></TD>
<TD>GOTO - Branch always (to relative offset, not absolute address)</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="GOTO_W.html">GOTO_W</A></B></TD>
<TD>GOTO_W - Branch always (to relative offset, not absolute address)</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="GotoInstruction.html">GotoInstruction</A></B></TD>
<TD>Super class for GOTO</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="I2B.html">I2B</A></B></TD>
<TD>I2B - Convert int to byte
 Stack: ..., value -&gt; ..., result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="I2C.html">I2C</A></B></TD>
<TD>I2C - Convert int to char
 Stack: ..., value -&gt; ..., result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="I2D.html">I2D</A></B></TD>
<TD>I2D - Convert int to double
 Stack: ..., value -&gt; ..., result.word1, result.word2</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="I2F.html">I2F</A></B></TD>
<TD>I2F - Convert int to float
 Stack: ..., value -&gt; ..., result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="I2L.html">I2L</A></B></TD>
<TD>I2L - Convert int to long
 Stack: ..., value -&gt; ..., result.word1, result.word2</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="I2S.html">I2S</A></B></TD>
<TD>I2S - Convert int to short
 Stack: ..., value -&gt; ..., result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="IADD.html">IADD</A></B></TD>
<TD>IADD - Add ints
 Stack: ..., value1, value2 -&gt; result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="IALOAD.html">IALOAD</A></B></TD>
<TD>IALOAD - Load int from array
 Stack: ..., arrayref, index -&gt; ..., value</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="IAND.html">IAND</A></B></TD>
<TD>IAND - Bitwise AND int
 Stack: ..., value1, value2 -&gt; ..., result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="IASTORE.html">IASTORE</A></B></TD>
<TD>IASTORE -  Store into int array
 Stack: ..., arrayref, index, value -&gt; ...</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="ICONST.html">ICONST</A></B></TD>
<TD>ICONST - Push value between -1, ..., 5, other values cause an exception

 Stack: ... </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="IDIV.html">IDIV</A></B></TD>
<TD>IDIV - Divide ints
 Stack: ..., value1, value2 -&gt; result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="IF_ACMPEQ.html">IF_ACMPEQ</A></B></TD>
<TD>IF_ACMPEQ - Branch if reference comparison succeeds

 Stack: ..., value1, value2 -&gt; ...</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="IF_ACMPNE.html">IF_ACMPNE</A></B></TD>
<TD>IF_ACMPNE - Branch if reference comparison doesn't succeed

 Stack: ..., value1, value2 -&gt; ...</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="IF_ICMPEQ.html">IF_ICMPEQ</A></B></TD>
<TD>IF_ICMPEQ - Branch if int comparison succeeds

 Stack: ..., value1, value2 -&gt; ...</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="IF_ICMPGE.html">IF_ICMPGE</A></B></TD>
<TD>IF_ICMPGE - Branch if int comparison succeeds

 Stack: ..., value1, value2 -&gt; ...</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="IF_ICMPGT.html">IF_ICMPGT</A></B></TD>
<TD>IF_ICMPGT - Branch if int comparison succeeds

 Stack: ..., value1, value2 -&gt; ...</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="IF_ICMPLE.html">IF_ICMPLE</A></B></TD>
<TD>IF_ICMPLE - Branch if int comparison succeeds

 Stack: ..., value1, value2 -&gt; ...</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="IF_ICMPLT.html">IF_ICMPLT</A></B></TD>
<TD>IF_ICMPLT - Branch if int comparison succeeds

 Stack: ..., value1, value2 -&gt; ...</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="IF_ICMPNE.html">IF_ICMPNE</A></B></TD>
<TD>IF_ICMPNE - Branch if int comparison doesn't succeed

 Stack: ..., value1, value2 -&gt; ...</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="IFEQ.html">IFEQ</A></B></TD>
<TD>IFEQ - Branch if int comparison with zero succeeds

 Stack: ..., value -&gt; ...</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="IFGE.html">IFGE</A></B></TD>
<TD>IFGE - Branch if int comparison with zero succeeds

 Stack: ..., value -&gt; ...</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="IFGT.html">IFGT</A></B></TD>
<TD>IFGT - Branch if int comparison with zero succeeds

 Stack: ..., value -&gt; ...</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="IfInstruction.html">IfInstruction</A></B></TD>
<TD>Super class for the IFxxx family of instructions.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="IFLE.html">IFLE</A></B></TD>
<TD>IFLE - Branch if int comparison with zero succeeds

 Stack: ..., value -&gt; ...</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="IFLT.html">IFLT</A></B></TD>
<TD>IFLT - Branch if int comparison with zero succeeds

 Stack: ..., value -&gt; ...</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="IFNE.html">IFNE</A></B></TD>
<TD>IFNE - Branch if int comparison with zero succeeds

 Stack: ..., value -&gt; ...</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="IFNONNULL.html">IFNONNULL</A></B></TD>
<TD>IFNONNULL - Branch if reference is not null

 Stack: ..., reference -&gt; ...</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="IFNULL.html">IFNULL</A></B></TD>
<TD>IFNULL - Branch if reference is not null

 Stack: ..., reference -&gt; ...</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="IINC.html">IINC</A></B></TD>
<TD>IINC - Increment local variable by constant</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="ILOAD.html">ILOAD</A></B></TD>
<TD>ILOAD - Load int from local variable onto stack
 Stack: ... </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="IMPDEP1.html">IMPDEP1</A></B></TD>
<TD>IMPDEP1 - Implementation dependent</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="IMPDEP2.html">IMPDEP2</A></B></TD>
<TD>IMPDEP2 - Implementation dependent</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="IMUL.html">IMUL</A></B></TD>
<TD>IMUL - Multiply ints
 Stack: ..., value1, value2 -&gt; result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="INEG.html">INEG</A></B></TD>
<TD>INEG - Negate int
 Stack: ..., value -&gt; ..., result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="INSTANCEOF.html">INSTANCEOF</A></B></TD>
<TD>INSTANCEOF - Determine if object is of given type
 Stack: ..., objectref -&gt; ..., result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="Instruction.html">Instruction</A></B></TD>
<TD>Abstract super class for all Java byte codes.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="InstructionConstants.Clinit.html">InstructionConstants.Clinit</A></B></TD>
<TD>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="InstructionFactory.html">InstructionFactory</A></B></TD>
<TD>Instances of this class may be used, e.g., to generate typed
 versions of instructions. </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="InstructionHandle.html">InstructionHandle</A></B></TD>
<TD>Instances of this class give users a handle to the instructions contained in
 an InstructionList. </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="InstructionList.html">InstructionList</A></B></TD>
<TD>This class is a container for a list of <a
 href="Instruction.html">Instruction</a> objects. </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="InvokeInstruction.html">InvokeInstruction</A></B></TD>
<TD>Super class for the INVOKExxx family of instructions.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="INVOKEINTERFACE.html">INVOKEINTERFACE</A></B></TD>
<TD>INVOKEINTERFACE - Invoke interface method
 Stack: ..., objectref, [arg1, [arg2 ...]] </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="INVOKESPECIAL.html">INVOKESPECIAL</A></B></TD>
<TD>INVOKESPECIAL - Invoke instance method; special handling for superclass, private
 and instance initialization method invocations

 Stack: ..., objectref, [arg1, [arg2 ...]] </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="INVOKESTATIC.html">INVOKESTATIC</A></B></TD>
<TD>INVOKESTATIC - Invoke a class (static) method

 Stack: ..., [arg1, [arg2 ...]] </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="INVOKEVIRTUAL.html">INVOKEVIRTUAL</A></B></TD>
<TD>INVOKEVIRTUAL - Invoke instance method; dispatch based on class

 Stack: ..., objectref, [arg1, [arg2 ...]] </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="IOR.html">IOR</A></B></TD>
<TD>IOR - Bitwise OR int
 Stack: ..., value1, value2 -&gt; ..., result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="IREM.html">IREM</A></B></TD>
<TD>IREM - Remainder of int
 Stack: ..., value1, value2 -&gt; result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="IRETURN.html">IRETURN</A></B></TD>
<TD>IRETURN -  Return int from method
 Stack: ..., value -&gt; &lt;empty&gt;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="ISHL.html">ISHL</A></B></TD>
<TD>ISHL - Arithmetic shift left int
 Stack: ..., value1, value2 -&gt; ..., result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="ISHR.html">ISHR</A></B></TD>
<TD>ISHR - Arithmetic shift right int
 Stack: ..., value1, value2 -&gt; ..., result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="ISTORE.html">ISTORE</A></B></TD>
<TD>ISTORE - Store int from stack into local variable
 Stack: ..., value -&gt; ... </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="ISUB.html">ISUB</A></B></TD>
<TD>ISUB - Substract ints
 Stack: ..., value1, value2 -&gt; result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="IUSHR.html">IUSHR</A></B></TD>
<TD>IUSHR - Logical shift right int
 Stack: ..., value1, value2 -&gt; ..., result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="IXOR.html">IXOR</A></B></TD>
<TD>IXOR - Bitwise XOR int
 Stack: ..., value1, value2 -&gt; ..., result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="JSR.html">JSR</A></B></TD>
<TD>JSR - Jump to subroutine</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="JSR_W.html">JSR_W</A></B></TD>
<TD>JSR_W - Jump to subroutine</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="JsrInstruction.html">JsrInstruction</A></B></TD>
<TD>Super class for JSR - Jump to subroutine</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="L2D.html">L2D</A></B></TD>
<TD>L2D - Convert long to double
 Stack: ..., value.word1, value.word2 -&gt; ..., result.word1, result.word2</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="L2F.html">L2F</A></B></TD>
<TD>L2F - Convert long to float
 Stack: ..., value.word1, value.word2 -&gt; ..., result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="L2I.html">L2I</A></B></TD>
<TD>L2I - Convert long to int
 Stack: ..., value.word1, value.word2 -&gt; ..., result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="LADD.html">LADD</A></B></TD>
<TD>LADD - Add longs
 Stack: ..., value1.word1, value1.word2, value2.word1, value2.word2 -&gt;
        ..., result.word1, result.word2</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="LALOAD.html">LALOAD</A></B></TD>
<TD>LALOAD - Load long from array
 Stack: ..., arrayref, index -&gt; ..., value1, value2</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="LAND.html">LAND</A></B></TD>
<TD>LAND - Bitwise AND longs
 Stack: ..., value1.word1, value1.word2, value2.word1, value2.word2 -&gt;
        ..., result.word1, result.word2</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="LASTORE.html">LASTORE</A></B></TD>
<TD>LASTORE -  Store into long array
 Stack: ..., arrayref, index, value.word1, value.word2 -&gt; ...</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="LCMP.html">LCMP</A></B></TD>
<TD>LCMP - Compare longs:
 Stack: ..., value1.word1, value1.word2, value2.word1, value2.word2 -&gt;
        ..., result <= -1, 0, 1></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="LCONST.html">LCONST</A></B></TD>
<TD>LCONST - Push 0 or 1, other values cause an exception

 Stack: ... </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="LDC.html">LDC</A></B></TD>
<TD>LDC - Push item from constant pool.

 </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="LDC_W.html">LDC_W</A></B></TD>
<TD>LDC_W - Push item from constant pool (wide index)

 Stack: ... </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="LDC2_W.html">LDC2_W</A></B></TD>
<TD>LDC2_W - Push long or double from constant pool

 Stack: ... </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="LDIV.html">LDIV</A></B></TD>
<TD>LDIV - Divide longs
 Stack: ..., value1.word1, value1.word2, value2.word1, value2.word2 -&gt;
        ..., result.word1, result.word2</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="LineNumberGen.html">LineNumberGen</A></B></TD>
<TD>This class represents a line number within a method, i.e., give an instruction
 a line number corresponding to the source code line.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="LLOAD.html">LLOAD</A></B></TD>
<TD>LLOAD - Load long from local variable
Stack ... </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="LMUL.html">LMUL</A></B></TD>
<TD>LMUL - Multiply longs
 Stack: ..., value1.word1, value1.word2, value2.word1, value2.word2 -&gt;
        ..., result.word1, result.word2</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="LNEG.html">LNEG</A></B></TD>
<TD>LNEG - Negate long
 Stack: ..., value.word1, value.word2 -&gt; ..., result.word1, result.word2</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="LoadInstruction.html">LoadInstruction</A></B></TD>
<TD>Denotes an unparameterized instruction to load a value from a local
 variable, e.g. </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="LocalVariableGen.html">LocalVariableGen</A></B></TD>
<TD>This class represents a local variable within a method. </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="LocalVariableInstruction.html">LocalVariableInstruction</A></B></TD>
<TD>Abstract super class for instructions dealing with local variables.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="LOOKUPSWITCH.html">LOOKUPSWITCH</A></B></TD>
<TD>LOOKUPSWITCH - Switch with unordered set of values</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="LOR.html">LOR</A></B></TD>
<TD>LOR - Bitwise OR long
 Stack: ..., value1, value2 -&gt; ..., result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="LREM.html">LREM</A></B></TD>
<TD>LREM - Remainder of long
 Stack: ..., value1, value2 -&gt; result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="LRETURN.html">LRETURN</A></B></TD>
<TD>LRETURN -  Return long from method
 Stack: ..., value.word1, value.word2 -&gt; &lt;empty&gt;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="LSHL.html">LSHL</A></B></TD>
<TD>LSHL - Arithmetic shift left long
 Stack: ..., value1.word1, value1.word2, value2 -&gt; ..., result.word1, result.word2</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="LSHR.html">LSHR</A></B></TD>
<TD>LSHR - Arithmetic shift right long
 Stack: ..., value1.word1, value1.word2, value2 -&gt; ..., result.word1, result.word2</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="LSTORE.html">LSTORE</A></B></TD>
<TD>LSTORE - Store long into local variable
 Stack: ..., value.word1, value.word2 -&gt; ... </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="LSUB.html">LSUB</A></B></TD>
<TD>LSUB - Substract longs
 Stack: ..., value1.word1, value1.word2, value2.word1, value2.word2 -&gt;
        ..., result.word1, result.word2</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="LUSHR.html">LUSHR</A></B></TD>
<TD>LUSHR - Logical shift right long
 Stack: ..., value1, value2 -&gt; ..., result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="LXOR.html">LXOR</A></B></TD>
<TD>LXOR - Bitwise XOR long
 Stack: ..., value1, value2 -&gt; ..., result</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="MethodGen.html">MethodGen</A></B></TD>
<TD>Template class for building up a method. </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="MONITORENTER.html">MONITORENTER</A></B></TD>
<TD>MONITORENTER - Enter monitor for object
 Stack: ..., objectref -&gt; ...</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="MONITOREXIT.html">MONITOREXIT</A></B></TD>
<TD>MONITOREXIT - Exit monitor for object
 Stack: ..., objectref -&gt; ...</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="MULTIANEWARRAY.html">MULTIANEWARRAY</A></B></TD>
<TD>MULTIANEWARRAY - Create new mutidimensional array of references
 Stack: ..., count1, [count2, ...] </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="NEW.html">NEW</A></B></TD>
<TD>NEW - Create new object
 Stack: ... </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="NEWARRAY.html">NEWARRAY</A></B></TD>
<TD>NEWARRAY -  Create new array of basic type (int, short, ...)
 </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="NOP.html">NOP</A></B></TD>
<TD>NOP - Do nothing</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="ObjectType.html">ObjectType</A></B></TD>
<TD>Denotes reference such as java.lang.String.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="POP.html">POP</A></B></TD>
<TD>POP - Pop top operand stack word

 Stack: ..., word -&gt; ...</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="POP2.html">POP2</A></B></TD>
<TD>POP2 - Pop two top operand stack words

 Stack: ..., word2, word1 -&gt; ...</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="PUSH.html">PUSH</A></B></TD>
<TD>Wrapper class for push operations, which are implemented either as BIPUSH,
 LDC or xCONST_n instructions.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="PUTFIELD.html">PUTFIELD</A></B></TD>
<TD>PUTFIELD - Put field in object
 Stack: ..., objectref, value -&gt; ...</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="PUTSTATIC.html">PUTSTATIC</A></B></TD>
<TD>PUTSTATIC - Put static field in class
 Stack: ..., value -&gt; ...</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="ReferenceType.html">ReferenceType</A></B></TD>
<TD>Super class for object and array types.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="RET.html">RET</A></B></TD>
<TD>RET - Return from subroutine

 Stack: ..., -&gt; ..., address</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="RETURN.html">RETURN</A></B></TD>
<TD>RETURN -  Return from void method
 Stack: ... </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="ReturnaddressType.html">ReturnaddressType</A></B></TD>
<TD>Returnaddress, the type JSR or JSR_W instructions push upon the stack.

 </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="ReturnInstruction.html">ReturnInstruction</A></B></TD>
<TD>Super class for the xRETURN family of instructions.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="SALOAD.html">SALOAD</A></B></TD>
<TD>SALOAD - Load short from array
 Stack: ..., arrayref, index -&gt; ..., value</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="SASTORE.html">SASTORE</A></B></TD>
<TD>SASTORE - Store into short array
 Stack: ..., arrayref, index, value -&gt; ...</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="Select.html">Select</A></B></TD>
<TD>Select - Abstract super class for LOOKUPSWITCH and TABLESWITCH instructions.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="SIPUSH.html">SIPUSH</A></B></TD>
<TD>SIPUSH - Push short

 Stack: ... </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="StackInstruction.html">StackInstruction</A></B></TD>
<TD>Super class for stack operations like DUP and POP.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="StoreInstruction.html">StoreInstruction</A></B></TD>
<TD>Denotes an unparameterized instruction to store a value into a local variable,
 e.g. </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="SWAP.html">SWAP</A></B></TD>
<TD>SWAP - Swa top operand stack word
 Stack: ..., word2, word1 -&gt; ..., word1, word2</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="SWITCH.html">SWITCH</A></B></TD>
<TD>SWITCH - Branch depending on int value, generates either LOOKUPSWITCH or
 TABLESWITCH instruction, depending on whether the match values (int[]) can be
 sorted with no gaps between the numbers.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="TABLESWITCH.html">TABLESWITCH</A></B></TD>
<TD>TABLESWITCH - Switch within given range of values, i.e., low..high</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="Type.html">Type</A></B></TD>
<TD>Abstract super class for all possible java types, namely basic types
 such as int, object types like String and array types, e.g. int[]</TD>
</TR>
</TABLE>
&nbsp;

<P>

<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Exception Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="ClassGenException.html">ClassGenException</A></B></TD>
<TD>Thrown on internal errors. </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="TargetLostException.html">TargetLostException</A></B></TD>
<TD>Thrown by InstructionList.remove() when one or multiple disposed instruction
 are still being referenced by a InstructionTargeter object. </TD>
</TR>
</TABLE>
&nbsp;

<P>
<A NAME="package_description"><!-- --></A><H2>
Package org.apache.bcel.generic Description
</H2>

<P>
<p>
This package contains the "generic" part of the
<a href="http://jakarta.apache.org/bcel/">Byte Code Engineering
Library</a>, i.e., classes to dynamically modify class objects and
byte code instructions.
</p>
<P>

<P>
<HR>

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_bottom"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Package</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <FONT CLASS="NavBarFont1">Class</FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-use.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../org/apache/bcel/classfile/package-summary.html"><B>PREV PACKAGE</B></A>&nbsp;
&nbsp;<A HREF="../../../../org/apache/bcel/util/package-summary.html"><B>NEXT PACKAGE</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="package-summary.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
Copyright &copy; 2002-2003 Apache Software Foundation. All Rights Reserved.
</BODY>
</HTML>
