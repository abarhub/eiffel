<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN""http://www.w3.org/TR/REC-html40/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc on Fri Apr 25 09:05:27 GMT+01:00 2003 -->
<TITLE>
Instruction (jakarta-bcel 5.1 API)
</TITLE>
<META NAME="keywords" CONTENT="org.apache.bcel.generic.Instruction,Instruction class">
<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
</HEAD>
<SCRIPT>
function asd()
{
parent.document.title="Instruction (jakarta-bcel 5.1 API)";
}
</SCRIPT>
<BODY BGCOLOR="white" onload="asd();">

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_top"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/Instruction.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../org/apache/bcel/generic/INSTANCEOF.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../org/apache/bcel/generic/InstructionConstants.Clinit.html"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="Instruction.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
org.apache.bcel.generic</FONT>
<BR>
Class Instruction</H2>
<PRE>
java.lang.Object
  |
  +--<B>org.apache.bcel.generic.Instruction</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD>java.lang.Cloneable, java.io.Serializable</DD>
</DL>
<DL>
<DT><B>Direct Known Subclasses:</B> <DD><A HREF="../../../../org/apache/bcel/generic/ACONST_NULL.html">ACONST_NULL</A>, <A HREF="../../../../org/apache/bcel/generic/ArithmeticInstruction.html">ArithmeticInstruction</A>, <A HREF="../../../../org/apache/bcel/generic/ArrayInstruction.html">ArrayInstruction</A>, <A HREF="../../../../org/apache/bcel/generic/ARRAYLENGTH.html">ARRAYLENGTH</A>, <A HREF="../../../../org/apache/bcel/generic/ATHROW.html">ATHROW</A>, <A HREF="../../../../org/apache/bcel/generic/BIPUSH.html">BIPUSH</A>, <A HREF="../../../../org/apache/bcel/generic/BranchInstruction.html">BranchInstruction</A>, <A HREF="../../../../org/apache/bcel/generic/BREAKPOINT.html">BREAKPOINT</A>, <A HREF="../../../../org/apache/bcel/generic/ConversionInstruction.html">ConversionInstruction</A>, <A HREF="../../../../org/apache/bcel/generic/CPInstruction.html">CPInstruction</A>, <A HREF="../../../../org/apache/bcel/generic/DCMPG.html">DCMPG</A>, <A HREF="../../../../org/apache/bcel/generic/DCMPL.html">DCMPL</A>, <A HREF="../../../../org/apache/bcel/generic/DCONST.html">DCONST</A>, <A HREF="../../../../org/apache/bcel/generic/FCMPG.html">FCMPG</A>, <A HREF="../../../../org/apache/bcel/generic/FCMPL.html">FCMPL</A>, <A HREF="../../../../org/apache/bcel/generic/FCONST.html">FCONST</A>, <A HREF="../../../../org/apache/bcel/generic/ICONST.html">ICONST</A>, <A HREF="../../../../org/apache/bcel/generic/IMPDEP1.html">IMPDEP1</A>, <A HREF="../../../../org/apache/bcel/generic/IMPDEP2.html">IMPDEP2</A>, <A HREF="../../../../org/apache/bcel/generic/LCMP.html">LCMP</A>, <A HREF="../../../../org/apache/bcel/generic/LCONST.html">LCONST</A>, <A HREF="../../../../org/apache/bcel/generic/LocalVariableInstruction.html">LocalVariableInstruction</A>, <A HREF="../../../../org/apache/bcel/generic/MONITORENTER.html">MONITORENTER</A>, <A HREF="../../../../org/apache/bcel/generic/MONITOREXIT.html">MONITOREXIT</A>, <A HREF="../../../../org/apache/bcel/generic/NEWARRAY.html">NEWARRAY</A>, <A HREF="../../../../org/apache/bcel/generic/NOP.html">NOP</A>, <A HREF="../../../../org/apache/bcel/generic/RET.html">RET</A>, <A HREF="../../../../org/apache/bcel/generic/ReturnInstruction.html">ReturnInstruction</A>, <A HREF="../../../../org/apache/bcel/generic/SIPUSH.html">SIPUSH</A>, <A HREF="../../../../org/apache/bcel/generic/StackInstruction.html">StackInstruction</A></DD>
</DL>
<HR>
<DL>
<DT>public abstract class <B>Instruction</B><DT>extends java.lang.Object<DT>implements java.lang.Cloneable, java.io.Serializable</DL>

<P>
Abstract super class for all Java byte codes.
<P>

<P>
<DL>
<DT><B>Version:</B></DT>
  <DD>$Id: Instruction.java,v 1.3 2002/08/07 18:01:32 mdahm Exp $</DD>
<DT><B>Author:</B></DT>
  <DD><A HREF="mailto:markus.dahm@berlin.de">M. Dahm</A></DD>
<DT><B>See Also:</B><DD><A HREF="../../../../serialized-form.html" TARGET="org.apache.bcel.generic.Instruction">Serialized Form</A></DL>
<HR>

<P>
<!-- ======== NESTED CLASS SUMMARY ======== -->


<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Field Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;short</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/bcel/generic/Instruction.html#length">length</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;short</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/bcel/generic/Instruction.html#opcode">opcode</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../org/apache/bcel/generic/Instruction.html#Instruction(short, short)">Instruction</A></B>(short&nbsp;opcode,
            short&nbsp;length)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Method Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/bcel/generic/Instruction.html#accept(org.apache.bcel.generic.Visitor)">accept</A></B>(<A HREF="../../../../org/apache/bcel/generic/Visitor.html">Visitor</A>&nbsp;v)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Call corresponding visitor method(s). </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/bcel/generic/Instruction.html#consumeStack(org.apache.bcel.generic.ConstantPoolGen)">consumeStack</A></B>(<A HREF="../../../../org/apache/bcel/generic/ConstantPoolGen.html">ConstantPoolGen</A>&nbsp;cpg)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method also gives right results for instructions whose
 effect on the stack depends on the constant pool entry they
 reference.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../org/apache/bcel/generic/Instruction.html">Instruction</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/bcel/generic/Instruction.html#copy()">copy</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Use with caution, since `BranchInstruction's have a `target' reference which
 is not copied correctly (only basic types are). </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/bcel/generic/Instruction.html#dump(java.io.DataOutputStream)">dump</A></B>(java.io.DataOutputStream&nbsp;out)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dump instruction as byte code to stream out.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/bcel/generic/Instruction.html#equals(java.lang.Object)">equals</A></B>(java.lang.Object&nbsp;that)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Check for equality, delegated to comparator</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;<A HREF="../../../../org/apache/bcel/generic/InstructionComparator.html">InstructionComparator</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/bcel/generic/Instruction.html#getComparator()">getComparator</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get Comparator object used in the equals() method to determine
 equality of instructions.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/bcel/generic/Instruction.html#getLength()">getLength</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/bcel/generic/Instruction.html#getName()">getName</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;short</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/bcel/generic/Instruction.html#getOpcode()">getOpcode</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/bcel/generic/Instruction.html#initFromFile(org.apache.bcel.util.ByteSequence, boolean)">initFromFile</A></B>(<A HREF="../../../../org/apache/bcel/util/ByteSequence.html">ByteSequence</A>&nbsp;bytes,
             boolean&nbsp;wide)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Read needed data (e.g. index) from file.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/bcel/generic/Instruction.html#produceStack(org.apache.bcel.generic.ConstantPoolGen)">produceStack</A></B>(<A HREF="../../../../org/apache/bcel/generic/ConstantPoolGen.html">ConstantPoolGen</A>&nbsp;cpg)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method also gives right results for instructions whose
 effect on the stack depends on the constant pool entry they
 reference.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;<A HREF="../../../../org/apache/bcel/generic/Instruction.html">Instruction</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/bcel/generic/Instruction.html#readInstruction(org.apache.bcel.util.ByteSequence)">readInstruction</A></B>(<A HREF="../../../../org/apache/bcel/util/ByteSequence.html">ByteSequence</A>&nbsp;bytes)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Read an instruction from (byte code) input stream and return the
 appropiate object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/bcel/generic/Instruction.html#setComparator(org.apache.bcel.generic.InstructionComparator)">setComparator</A></B>(<A HREF="../../../../org/apache/bcel/generic/InstructionComparator.html">InstructionComparator</A>&nbsp;c)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set comparator to be used for equals().</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/bcel/generic/Instruction.html#toString()">toString</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/bcel/generic/Instruction.html#toString(boolean)">toString</A></B>(boolean&nbsp;verbose)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Long output format:

 &lt;name of opcode&gt; "["&lt;opcode number&gt;"]" 
 "("&lt;length of instruction&gt;")"</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/bcel/generic/Instruction.html#toString(org.apache.bcel.classfile.ConstantPool)">toString</A></B>(<A HREF="../../../../org/apache/bcel/classfile/ConstantPool.html">ConstantPool</A>&nbsp;cp)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Methods inherited from class java.lang.Object</B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>clone, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->

<A NAME="field_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Field Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="length"><!-- --></A><H3>
length</H3>
<PRE>
protected short <B>length</B></PRE>
<DL>
<DL>
</DL>
</DL>
<HR>

<A NAME="opcode"><!-- --></A><H3>
opcode</H3>
<PRE>
protected short <B>opcode</B></PRE>
<DL>
<DL>
</DL>
</DL>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="Instruction(short, short)"><!-- --></A><H3>
Instruction</H3>
<PRE>
public <B>Instruction</B>(short&nbsp;opcode,
                   short&nbsp;length)</PRE>
<DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Method Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="dump(java.io.DataOutputStream)"><!-- --></A><H3>
dump</H3>
<PRE>
public void <B>dump</B>(java.io.DataOutputStream&nbsp;out)
          throws java.io.IOException</PRE>
<DL>
<DD>Dump instruction as byte code to stream out.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>out</CODE> - Output stream
<DD><CODE>java.io.IOException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getName()"><!-- --></A><H3>
getName</H3>
<PRE>
public java.lang.String <B>getName</B>()</PRE>
<DL>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>name of instruction, i.e., opcode name</DL>
</DD>
</DL>
<HR>

<A NAME="toString(boolean)"><!-- --></A><H3>
toString</H3>
<PRE>
public java.lang.String <B>toString</B>(boolean&nbsp;verbose)</PRE>
<DL>
<DD>Long output format:

 &lt;name of opcode&gt; "["&lt;opcode number&gt;"]" 
 "("&lt;length of instruction&gt;")"
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>verbose</CODE> - long/short format switch
<DT><B>Returns:</B><DD>mnemonic for instruction</DL>
</DD>
</DL>
<HR>

<A NAME="toString()"><!-- --></A><H3>
toString</H3>
<PRE>
public java.lang.String <B>toString</B>()</PRE>
<DL>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE>toString</CODE> in class <CODE>java.lang.Object</CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>mnemonic for instruction in verbose format</DL>
</DD>
</DL>
<HR>

<A NAME="toString(org.apache.bcel.classfile.ConstantPool)"><!-- --></A><H3>
toString</H3>
<PRE>
public java.lang.String <B>toString</B>(<A HREF="../../../../org/apache/bcel/classfile/ConstantPool.html">ConstantPool</A>&nbsp;cp)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>mnemonic for instruction with sumbolic references resolved</DL>
</DD>
</DL>
<HR>

<A NAME="copy()"><!-- --></A><H3>
copy</H3>
<PRE>
public <A HREF="../../../../org/apache/bcel/generic/Instruction.html">Instruction</A> <B>copy</B>()</PRE>
<DL>
<DD>Use with caution, since `BranchInstruction's have a `target' reference which
 is not copied correctly (only basic types are). This also applies for 
 `Select' instructions with their multiple branch targets.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>(shallow) copy of an instruction<DT><B>See Also:</B><DD><A HREF="../../../../org/apache/bcel/generic/BranchInstruction.html"><CODE>BranchInstruction</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="initFromFile(org.apache.bcel.util.ByteSequence, boolean)"><!-- --></A><H3>
initFromFile</H3>
<PRE>
protected void <B>initFromFile</B>(<A HREF="../../../../org/apache/bcel/util/ByteSequence.html">ByteSequence</A>&nbsp;bytes,
                            boolean&nbsp;wide)
                     throws java.io.IOException</PRE>
<DL>
<DD>Read needed data (e.g. index) from file.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>bytes</CODE> - byte sequence to read from<DD><CODE>wide</CODE> - "wide" instruction flag
<DD><CODE>java.io.IOException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="readInstruction(org.apache.bcel.util.ByteSequence)"><!-- --></A><H3>
readInstruction</H3>
<PRE>
public static final <A HREF="../../../../org/apache/bcel/generic/Instruction.html">Instruction</A> <B>readInstruction</B>(<A HREF="../../../../org/apache/bcel/util/ByteSequence.html">ByteSequence</A>&nbsp;bytes)
                                         throws java.io.IOException</PRE>
<DL>
<DD>Read an instruction from (byte code) input stream and return the
 appropiate object.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>instruction object being read
<DD><CODE>java.io.IOException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="consumeStack(org.apache.bcel.generic.ConstantPoolGen)"><!-- --></A><H3>
consumeStack</H3>
<PRE>
public int <B>consumeStack</B>(<A HREF="../../../../org/apache/bcel/generic/ConstantPoolGen.html">ConstantPoolGen</A>&nbsp;cpg)</PRE>
<DL>
<DD>This method also gives right results for instructions whose
 effect on the stack depends on the constant pool entry they
 reference.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>Number of words consumed from stack by this instruction,
 or Constants.UNPREDICTABLE, if this can not be computed statically</DL>
</DD>
</DL>
<HR>

<A NAME="produceStack(org.apache.bcel.generic.ConstantPoolGen)"><!-- --></A><H3>
produceStack</H3>
<PRE>
public int <B>produceStack</B>(<A HREF="../../../../org/apache/bcel/generic/ConstantPoolGen.html">ConstantPoolGen</A>&nbsp;cpg)</PRE>
<DL>
<DD>This method also gives right results for instructions whose
 effect on the stack depends on the constant pool entry they
 reference.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>Number of words produced onto stack by this instruction,
 or Constants.UNPREDICTABLE, if this can not be computed statically</DL>
</DD>
</DL>
<HR>

<A NAME="getOpcode()"><!-- --></A><H3>
getOpcode</H3>
<PRE>
public short <B>getOpcode</B>()</PRE>
<DL>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>this instructions opcode</DL>
</DD>
</DL>
<HR>

<A NAME="getLength()"><!-- --></A><H3>
getLength</H3>
<PRE>
public int <B>getLength</B>()</PRE>
<DL>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>length (in bytes) of instruction</DL>
</DD>
</DL>
<HR>

<A NAME="accept(org.apache.bcel.generic.Visitor)"><!-- --></A><H3>
accept</H3>
<PRE>
public abstract void <B>accept</B>(<A HREF="../../../../org/apache/bcel/generic/Visitor.html">Visitor</A>&nbsp;v)</PRE>
<DL>
<DD>Call corresponding visitor method(s). The order is:
 Call visitor methods of implemented interfaces first, then
 call methods according to the class hierarchy in descending order,
 i.e., the most specific visitXXX() call comes last.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>v</CODE> - Visitor object</DL>
</DD>
</DL>
<HR>

<A NAME="getComparator()"><!-- --></A><H3>
getComparator</H3>
<PRE>
public static <A HREF="../../../../org/apache/bcel/generic/InstructionComparator.html">InstructionComparator</A> <B>getComparator</B>()</PRE>
<DL>
<DD>Get Comparator object used in the equals() method to determine
 equality of instructions.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>currently used comparator for equals()</DL>
</DD>
</DL>
<HR>

<A NAME="setComparator(org.apache.bcel.generic.InstructionComparator)"><!-- --></A><H3>
setComparator</H3>
<PRE>
public static void <B>setComparator</B>(<A HREF="../../../../org/apache/bcel/generic/InstructionComparator.html">InstructionComparator</A>&nbsp;c)</PRE>
<DL>
<DD>Set comparator to be used for equals().
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="equals(java.lang.Object)"><!-- --></A><H3>
equals</H3>
<PRE>
public boolean <B>equals</B>(java.lang.Object&nbsp;that)</PRE>
<DL>
<DD>Check for equality, delegated to comparator
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE>equals</CODE> in class <CODE>java.lang.Object</CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>true if that is an Instruction and has the same opcode</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_bottom"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/Instruction.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../org/apache/bcel/generic/INSTANCEOF.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../org/apache/bcel/generic/InstructionConstants.Clinit.html"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="Instruction.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
Copyright &copy; 2002-2003 Apache Software Foundation. All Rights Reserved.
</BODY>
</HTML>
