/**
 * liste_testesType.java
 *
 * This file was generated by XMLSpy 2005 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSpy Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.type;

import com.altova.types.*;

public class liste_testesType extends com.altova.xml.Node {
	public liste_testesType() {
		super();
	}

	public liste_testesType(liste_testesType node) {
		super(node);
	}

	public liste_testesType(org.w3c.dom.Node node) {
		super(node);
	}

	public liste_testesType(org.w3c.dom.Document doc) {
		super(doc);
	}
	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Element, null, "conformite");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "conformite", i);
			internalAdjustPrefix(tmpNode, false);
			new conformiteType(tmpNode).adjustPrefix();
		}
	}

	public int getconformiteMinCount() {
		return 0;
	}

	public int getconformiteMaxCount() {
		return 0;
	}

	public int getconformiteCount() {
		return getDomChildCount(Element, null, "conformite");
	}

	public boolean hasconformite() {
		return hasDomChild(Element, null, "conformite");
	}

	public conformiteType getconformiteAt(int index) throws Exception {
		return new conformiteType(getDomChildAt(Element, null, "conformite", index));
	}

	public conformiteType getconformite() throws Exception {
		return getconformiteAt(0);
	}

	public void removeconformiteAt(int index) {
		removeDomChildAt(Element, null, "conformite", index);
	}

	public void removeconformite() {
		while (hasconformite())
			removeconformiteAt(0);
	}

	public void addconformite(conformiteType value) {
		appendDomElement(null, "conformite", value);
	}

	public void insertconformiteAt(conformiteType value, int index) {
		insertDomElementAt(null, "conformite", index, value);
	}

	public void replaceconformiteAt(conformiteType value, int index) {
		replaceDomElementAt(null, "conformite", index, value);
	}
}
