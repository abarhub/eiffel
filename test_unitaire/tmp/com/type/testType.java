/**
 * testType.java
 *
 * This file was generated by XMLSpy 2005 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSpy Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.type;

import com.altova.types.*;

public class testType extends com.altova.xml.Node {
	public testType() {
		super();
	}

	public testType(testType node) {
		super(node);
	}

	public testType(org.w3c.dom.Node node) {
		super(node);
	}

	public testType(org.w3c.dom.Document doc) {
		super(doc);
	}

	public SchemaString getValue() {
		return new SchemaString(getDomNodeValue(domNode));
	}

	public void setValue(SchemaType value) {
		setDomNodeValue(domNode, value.toString());
	}

	public void assign(SchemaType value) {
		setValue(value);
	}

	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Attribute, null, "de");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "de", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "ancetre");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "ancetre", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "conforme");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "conforme", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "lieux");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "lieux", i);
			internalAdjustPrefix(tmpNode, false);
		}
	}

	public int getdeMinCount() {
		return 1;
	}

	public int getdeMaxCount() {
		return 1;
	}

	public int getdeCount() {
		return getDomChildCount(Attribute, null, "de");
	}

	public boolean hasde() {
		return hasDomChild(Attribute, null, "de");
	}

	public SchemaString getdeAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "de", index)));
	}

	public SchemaString getde() throws Exception {
		return getdeAt(0);
	}

	public void removedeAt(int index) {
		removeDomChildAt(Attribute, null, "de", index);
	}

	public void removede() {
		while (hasde())
			removedeAt(0);
	}

	public void addde(SchemaString value) {
		appendDomChild(Attribute, null, "de", value.toString());
	}

	public void addde(String value) throws Exception {
		addde(new SchemaString(value));
	}

	public void insertdeAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "de", index, value.toString());
	}

	public void insertdeAt(String value, int index) throws Exception {
		insertdeAt(new SchemaString(value), index);
	}

	public void replacedeAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "de", index, value.toString());
	}

	public void replacedeAt(String value, int index) throws Exception {
		replacedeAt(new SchemaString(value), index);
	}

	public int getancetreMinCount() {
		return 1;
	}

	public int getancetreMaxCount() {
		return 1;
	}

	public int getancetreCount() {
		return getDomChildCount(Attribute, null, "ancetre");
	}

	public boolean hasancetre() {
		return hasDomChild(Attribute, null, "ancetre");
	}

	public SchemaString getancetreAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "ancetre", index)));
	}

	public SchemaString getancetre() throws Exception {
		return getancetreAt(0);
	}

	public void removeancetreAt(int index) {
		removeDomChildAt(Attribute, null, "ancetre", index);
	}

	public void removeancetre() {
		while (hasancetre())
			removeancetreAt(0);
	}

	public void addancetre(SchemaString value) {
		appendDomChild(Attribute, null, "ancetre", value.toString());
	}

	public void addancetre(String value) throws Exception {
		addancetre(new SchemaString(value));
	}

	public void insertancetreAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "ancetre", index, value.toString());
	}

	public void insertancetreAt(String value, int index) throws Exception {
		insertancetreAt(new SchemaString(value), index);
	}

	public void replaceancetreAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "ancetre", index, value.toString());
	}

	public void replaceancetreAt(String value, int index) throws Exception {
		replaceancetreAt(new SchemaString(value), index);
	}

	public int getconformeMinCount() {
		return 1;
	}

	public int getconformeMaxCount() {
		return 1;
	}

	public int getconformeCount() {
		return getDomChildCount(Attribute, null, "conforme");
	}

	public boolean hasconforme() {
		return hasDomChild(Attribute, null, "conforme");
	}

	public EnumerationType getconformeAt(int index) throws Exception {
		return new EnumerationType(getDomNodeValue(getDomChildAt(Attribute, null, "conforme", index)));
	}

	public EnumerationType getconforme() throws Exception {
		return getconformeAt(0);
	}

	public void removeconformeAt(int index) {
		removeDomChildAt(Attribute, null, "conforme", index);
	}

	public void removeconforme() {
		while (hasconforme())
			removeconformeAt(0);
	}

	public void addconforme(EnumerationType value) {
		appendDomChild(Attribute, null, "conforme", value.toString());
	}

	public void addconforme(String value) throws Exception {
		addconforme(new EnumerationType(value));
	}

	public void insertconformeAt(EnumerationType value, int index) {
		insertDomChildAt(Attribute, null, "conforme", index, value.toString());
	}

	public void insertconformeAt(String value, int index) throws Exception {
		insertconformeAt(new EnumerationType(value), index);
	}

	public void replaceconformeAt(EnumerationType value, int index) {
		replaceDomChildAt(Attribute, null, "conforme", index, value.toString());
	}

	public void replaceconformeAt(String value, int index) throws Exception {
		replaceconformeAt(new EnumerationType(value), index);
	}

	public int getlieuxMinCount() {
		return 0;
	}

	public int getlieuxMaxCount() {
		return 1;
	}

	public int getlieuxCount() {
		return getDomChildCount(Attribute, null, "lieux");
	}

	public boolean haslieux() {
		return hasDomChild(Attribute, null, "lieux");
	}

	public SchemaString getlieuxAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "lieux", index)));
	}

	public SchemaString getlieux() throws Exception {
		return getlieuxAt(0);
	}

	public void removelieuxAt(int index) {
		removeDomChildAt(Attribute, null, "lieux", index);
	}

	public void removelieux() {
		while (haslieux())
			removelieuxAt(0);
	}

	public void addlieux(SchemaString value) {
		appendDomChild(Attribute, null, "lieux", value.toString());
	}

	public void addlieux(String value) throws Exception {
		addlieux(new SchemaString(value));
	}

	public void insertlieuxAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "lieux", index, value.toString());
	}

	public void insertlieuxAt(String value, int index) throws Exception {
		insertlieuxAt(new SchemaString(value), index);
	}

	public void replacelieuxAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "lieux", index, value.toString());
	}

	public void replacelieuxAt(String value, int index) throws Exception {
		replacelieuxAt(new SchemaString(value), index);
	}
}
