/**
 * conformiteType.java
 *
 * This file was generated by XMLSpy 2005 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSpy Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.type;

import com.altova.types.*;

public class conformiteType extends com.altova.xml.Node {
	public conformiteType() {
		super();
	}

	public conformiteType(conformiteType node) {
		super(node);
	}

	public conformiteType(org.w3c.dom.Node node) {
		super(node);
	}

	public conformiteType(org.w3c.dom.Document doc) {
		super(doc);
	}
	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Attribute, null, "nom");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "nom", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "nb_erreur");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "nb_erreur", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Element, null, "test");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "test", i);
			internalAdjustPrefix(tmpNode, false);
			new testType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "test_expr");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "test_expr", i);
			internalAdjustPrefix(tmpNode, false);
			new test_exprType(tmpNode).adjustPrefix();
		}
	}

	public int getnomMinCount() {
		return 1;
	}

	public int getnomMaxCount() {
		return 1;
	}

	public int getnomCount() {
		return getDomChildCount(Attribute, null, "nom");
	}

	public boolean hasnom() {
		return hasDomChild(Attribute, null, "nom");
	}

	public SchemaString getnomAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "nom", index)));
	}

	public SchemaString getnom() throws Exception {
		return getnomAt(0);
	}

	public void removenomAt(int index) {
		removeDomChildAt(Attribute, null, "nom", index);
	}

	public void removenom() {
		while (hasnom())
			removenomAt(0);
	}

	public void addnom(SchemaString value) {
		appendDomChild(Attribute, null, "nom", value.toString());
	}

	public void addnom(String value) throws Exception {
		addnom(new SchemaString(value));
	}

	public void insertnomAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "nom", index, value.toString());
	}

	public void insertnomAt(String value, int index) throws Exception {
		insertnomAt(new SchemaString(value), index);
	}

	public void replacenomAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "nom", index, value.toString());
	}

	public void replacenomAt(String value, int index) throws Exception {
		replacenomAt(new SchemaString(value), index);
	}

	public int getnb_erreurMinCount() {
		return 0;
	}

	public int getnb_erreurMaxCount() {
		return 1;
	}

	public int getnb_erreurCount() {
		return getDomChildCount(Attribute, null, "nb_erreur");
	}

	public boolean hasnb_erreur() {
		return hasDomChild(Attribute, null, "nb_erreur");
	}

	public SchemaString getnb_erreurAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "nb_erreur", index)));
	}

	public SchemaString getnb_erreur() throws Exception {
		return getnb_erreurAt(0);
	}

	public void removenb_erreurAt(int index) {
		removeDomChildAt(Attribute, null, "nb_erreur", index);
	}

	public void removenb_erreur() {
		while (hasnb_erreur())
			removenb_erreurAt(0);
	}

	public void addnb_erreur(SchemaString value) {
		appendDomChild(Attribute, null, "nb_erreur", value.toString());
	}

	public void addnb_erreur(String value) throws Exception {
		addnb_erreur(new SchemaString(value));
	}

	public void insertnb_erreurAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "nb_erreur", index, value.toString());
	}

	public void insertnb_erreurAt(String value, int index) throws Exception {
		insertnb_erreurAt(new SchemaString(value), index);
	}

	public void replacenb_erreurAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "nb_erreur", index, value.toString());
	}

	public void replacenb_erreurAt(String value, int index) throws Exception {
		replacenb_erreurAt(new SchemaString(value), index);
	}

	public int gettestMinCount() {
		return 0;
	}

	public int gettestMaxCount() {
		return 0;
	}

	public int gettestCount() {
		return getDomChildCount(Element, null, "test");
	}

	public boolean hastest() {
		return hasDomChild(Element, null, "test");
	}

	public testType gettestAt(int index) throws Exception {
		return new testType(getDomChildAt(Element, null, "test", index));
	}

	public testType gettest() throws Exception {
		return gettestAt(0);
	}

	public void removetestAt(int index) {
		removeDomChildAt(Element, null, "test", index);
	}

	public void removetest() {
		while (hastest())
			removetestAt(0);
	}

	public void addtest(testType value) {
		appendDomElement(null, "test", value);
	}

	public void inserttestAt(testType value, int index) {
		insertDomElementAt(null, "test", index, value);
	}

	public void replacetestAt(testType value, int index) {
		replaceDomElementAt(null, "test", index, value);
	}

	public int gettest_exprMinCount() {
		return 0;
	}

	public int gettest_exprMaxCount() {
		return 0;
	}

	public int gettest_exprCount() {
		return getDomChildCount(Element, null, "test_expr");
	}

	public boolean hastest_expr() {
		return hasDomChild(Element, null, "test_expr");
	}

	public test_exprType gettest_exprAt(int index) throws Exception {
		return new test_exprType(getDomChildAt(Element, null, "test_expr", index));
	}

	public test_exprType gettest_expr() throws Exception {
		return gettest_exprAt(0);
	}

	public void removetest_exprAt(int index) {
		removeDomChildAt(Element, null, "test_expr", index);
	}

	public void removetest_expr() {
		while (hastest_expr())
			removetest_exprAt(0);
	}

	public void addtest_expr(test_exprType value) {
		appendDomElement(null, "test_expr", value);
	}

	public void inserttest_exprAt(test_exprType value, int index) {
		insertDomElementAt(null, "test_expr", index, value);
	}

	public void replacetest_exprAt(test_exprType value, int index) {
		replaceDomElementAt(null, "test_expr", index, value);
	}
}
